{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/parseExternalContractTransaction.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useDebounce.js","hooks/useLocalStorage.js","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/TenderlySimulation.jsx","components/MultiSig/TransactionDetailsModal.jsx","helpers/types.ts","helpers/communicator.ts","components/WalletConnectInput.jsx","helpers/utils.ts","helpers/messageFormatter.ts","contexts/SafeInjectContext.tsx","components/IFrame.jsx","components/MultiSig/TransactionListItem.jsx","hooks/useEventListener.js","components/MultiSig/Owners.jsx","components/MultiSig/CreateModalSentOverlay.jsx","components/MultiSig/CreateMultiSigModal.jsx","store/StoreProvider.jsx","store/useStore.jsx","components/MultiSig/ImportMultiSigModal.jsx","views/Hints.jsx","views/Subgraph.jsx","views/Home.jsx","views/CreateTransaction.jsx","views/Transactions.jsx","Routes.jsx","components/MultiSig/WalletActions.jsx","App.jsx","hooks/useApp.js","index.jsx","constants.js"],"names":["Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","blockieSize","scale","display","alignItems","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","zero","BigNumber","from","Balance","useState","dollarMode","setDollarMode","balance","setBalance","provider","balanceContract","useBalance","useEffect","getBalance","newBalance","eq","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","axios","isJsonString","str","parseExternalContractTransaction","contractAddress","txData","get","params","module","action","apikey","response","getParsedTransaction","abi","iface","Interface","parseTransaction","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","displayMax","setDisplayMax","gasCost","parseInt","_mode","float","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","calculatePK","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculateAddress","officialEthersWallet","Wallet","opacity","Password","disabled","height","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","location","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","justifyContent","onOk","onCancel","footer","type","loading","parseEther","to","SendOutlined","Account","useBurner","accountButton","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isFactoryDeployed","isContract","cachedProvider","className","shape","undefined","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","paddingRight","icon","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","margin","event","suffix","txValueInput","floatValue","toHexString","payable","handleForm","returned","buttonIcon","marginLeft","defaultValue","bordered","args","baseType","stateMutability","overrides","noContractDisplay","borderRadius","fontWeight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","listAccounts","_faucetAddress","GasGauge","Title","Header","children","Ramp","modalUp","setModalUp","allFaucets","n","networks","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","useDebounce","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useLocalStorage","initialValue","ttl","item","parsedItem","getTime","expiry","removeItem","storedValue","setStoredValue","valueToStore","Function","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","networkDisplay","USE_NETWORK_SELECTOR","networkSelected","NETWORK","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","TENDERLY_USER","process","TENDERLY_PROJECT","SIMULATE_URL","OPTS","headers","TenderlySimulation","multiSigWallet","signaturesRequired","simulated","setSimulated","simulationFailed","setSimulationFailed","simulationUnexpectedError","setSimulationUnexpectedError","simulationId","setSimulationId","simulateTransaction","encodeFunctionData","signatures","multiSigWalletAddressLowerCase","currentSignaturesCount","encodedStateOverrides","populateTransaction","unsignedTransactionToSimulate","network_id","state_objects","storage","stateOverrides","save","post","simResponse","transaction_info","call_trace","output","simulation","status","TransactionDetailsModal","handleOk","handleCancel","txnInfo","showFooter","destroyOnClose","maskClosable","functionFragment","signature","element","index","flexDirection","numberDisplay","sighash","Methods","RPC_AUTHENTICATION","GAS_PRICE_TYPE","FEATURES","TransactionStatus","TransferDirection","TransactionTokenType","Operation","SettingsInfoType","TokenType","LegacyMethods","CLIENT_META","icons","WalletConnectInput","loadTransactionData","setData","setTo","isModalVisible","setIsModalVisible","parsedTransactionData","setParsedTransactionData","walletConnect_wallet","setWalletConnect_wallet","walletLoading","setWalletLoading","setWalletConnectSession_wallet","setWalletConnectSession_main","walletConnectUri","setWalletConnectUri","isConnected","setIsConnected","peerMeta","setPeerMeta","walletConnect_wallet_cached","Boolean","walletConnectData","WalletConnect","clientMeta","subscribeToEvents","decodeFunctionData","setupConnector","mainWalletConnect","uri","payload","approveSession","accounts","connected","walletConnect","parseCallRequest","resetConnection","callData","src","alt","Group","compact","marginBottom","onWalletConnect","isReload","killSession","dec2hex","dec","padStart","generateRequestId","len","arr","Uint8Array","crypto","getRandomValues","Array","join","generateId","MessageFormatter","makeRequest","env","sdkVersion","makeResponse","version","makeErrorResponse","AppCommunicator","iframeRef","handlers","Map","set","isValidMessage","msg","hasOwnProperty","sentFromIframe","current","contentWindow","source","knownMethod","values","canHandleMessage","send","requestId","postMessage","handleIncomingMessage","validMessage","hasHandler","clear","removeEventListener","this","addEventListener","SafeInjectContext","createContext","appUrl","newTx","setAppUrl","setRpcUrl","setNewTx","SafeInjectProvider","useRef","communicator","setCommunicator","communicatorInstance","initCommunicator","useAppCommunicator","requestWithMessage","Math","trunc","performance","getSafeInfo","safeAddress","owners","threshold","isReadOnly","getEnvironmentInfo","origin","rpcCall","call","sendTransactions","transactions","txs","rest","signMessage","signTypedMessage","typedData","Provider","IFrame","isTxLoaded","cachedNetwork","NETWORKS","useContext","isIFrameLoading","setIsIFrameLoading","inputAppUrl","setInputAppUrl","setTx","isSafeDappsOpen","setIsSafeDappsOpen","safeDapps","setSafeDapps","searchSafeDapp","setSearchSafeDapp","filteredSafeDapps","setFilteredSafeDapps","setRefresh","fetchSafeDapps","dapps","d","dapp","toLocaleLowerCase","hideModal","minHeight","maxHeight","overflow","overflowX","overflowY","paddingBottom","maxWidth","gutter","i","iconUrl","minWidth","ref","onLoad","isIframe","TransactionListItem","readContracts","contractName","transactionHash","txnData","setTxnData","showModal","parsedData","newData","argumentError","parsedTransaction","Item","border","nonce","toSelf","EllipsisOutlined","txDisplay","useEventListener","eventName","eventData","setEventData","loadEvents","filters","queryFilter","queryEvents","Panel","Collapse","Owners","currentMultiSigAddress","reDeployWallet","contractNameForEvent","ownerEvents","setOwnerEvents","allOwnerEvents","Set","prevOwners","forEach","ownerEvent","added","add","owner","delete","loadOwnersEvents","contractEvent","header","dataSource","renderItem","ownerAddress","collapsible","prevOwnerAddress","CreateModalSentOverlay","pointerEvents","backdropFilter","gap","txError","errorText","StopOutlined","txSuccess","successText","CheckCircleOutlined","pendingText","transform","CreateMultiSigModal","writeContracts","isCreateModalVisible","setIsCreateModalVisible","poolServerUrl","getUserWallets","setReDeployWallet","currentNetworkName","deployType","setDeployType","pendingCreate","setPendingCreate","txSent","setTxSent","setTxError","setTxSuccess","setSignaturesRequired","setOwners","walletName","setWalletName","preComputedAddress","setPreComputedAddress","isWalletExist","setIsWalletExist","showCreateModal","prevSignaturesRequired","prevWalletName","computedAddress","computed_wallet_address","addMultipleAddress","validateAddress","addresses","uniqueAddresses","finalUniqueAddresses","resetState","handleSubmit","valid","err","slice","some","o","validateFields","currentWalletName","create2","update","reason","code","walletAddress","reqData","res","catch","checkWalletExist","getCode","isContractExists","onInputWalletName","ghost","onBlur","showIcon","val","newOwners","updateOwner","danger","splice","removeOwnerField","DeleteOutlined","PlusOutlined","checkProps","prePorps","nextProps","React","memo","StoreContext","Reducer","state","StoreProvider","store","useReducer","dispatch","useStore","ImportMultiSigModal","networkOptions","multiSigWalletABI","userWallets","setSelectedWalletAddress","walletParams","importedMultiSigs","setImportedMultiSigs","pendingImport","setPendingImport","setError","duplicateError","setDuplicateError","loadingWalletName","setLoadingWalletName","factoryVersion","setFactoryVersion","setNetwork","walletAddressDebounce","getFactoryVersion","Number","numberOfOwners","ownnersCount","importWalletData","chainIds","newImportedMultiSigs","checkDuplicateWallet","find","onEnterWalletAddress","onEnterWalletName","importURLWallet","isExists","spinning","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","toISOString","newPurpose","setNewPurpose","deployWarning","YourContract","setPurpose","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","then","json","docExplorerOpen","query","Home","useParams","allExecuteTransactionEvents","executeTransactionEvents","setExecuteTransactionEvents","txListLoading","setTxListLoading","updateExecutedEvents","filteredEvents","reverse","getWalletName","Sleep","ShareAltOutlined","tooltips","preProps","CreateTransaction","history","useHistory","methodName","setMethodName","newSignaturesRequired","setNewSignaturesRequired","customCallData","setCustomCallData","parsedCustomCallData","setParsedCustomCallData","setLoading","shouldCreateTransaction","setShouldCreateTransaction","isOwner","setIsOwner","setIsIframe","setIsTxLoaded","hasEdited","setHasEdited","customNonce","setCustomNonce","useLayoutEffect","createTransaction","alert","executeToAddress","getTransactionHash","newHash","arrayify","recover","signers","prev","hostURL","CodeOutlined","Transactions","setTransactions","selectedTx","setSelectedTx","usePoller","getTransactions","newTransactions","thisNonce","gte","validSignatures","sig","getSortedSigList","allSigs","sigList","sort","a","b","sub","finalSigList","finalSigners","used","hasSigned","hasEnoughSignatures","finalGaslimit","estimateGas","executeTransaction","estimateGasLimit","tos","sigs","has","executeBatch","Routes","userHasMultiSigs","DEBUG","BACKEND_URL","mainnetContracts","exact","path","offset","DAI","WalletActions","selectNetworkOptions","onChangeNetwork","handleMultiSigChange","hideWalletItem","loadWallet","networkName","MinusCircleOutlined","initialNetwork","mainnet","Web3ModalSetup","MultiSigWalletAbi","App","injectedProvider","setInjectedProvider","setUserWallets","updateServerWallets","setUpdateServerWallets","useLocation","setCurrentMultiSigAddress","setNonce","setContractNameForEvent","hiddenWallets","setHiddenWallets","multiSigFactoryData","setMultiSigFactoryData","mainWalletConnectSession","selectedWalletAddress","deployedContracts","USE_BURNER_WALLET","REACT_APP_PROVIDER","useExchangeEthPrice","userProviderAndSigner","useUserProviderAndSigner","MultiSigWallet","walletCreate2Events","signaturesRequiredContract","useContractReader","nonceContract","useApp","useOnBlock","_lastBlockNumber","clearCachedProvider","disconnect","createEthersContractWallet","latestSignaturesRequired","currentMultiSig","currentMultiSigChainIds","getContractValues","syncWalletsWithServer","numberOfMultiSigs","totalWalletCount","walletsData","creator","Web3Provider","isUpdate","localWallets","allWallets","flat","lastMultiSigAddress","currentFactoryContractAddres","multiSigsForUser","recentMultiSigAddress","updateUserWallets","faucetAvailable","connection","HeaderBar","lte","stopPropagation","preventDefault","MainMenu","selectedKeys","pathname","BurnerWallet","align","keys","prevTheme","client","ApolloClient","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","localhost","global","hostname","gnosis","optimism","polygon","arbitrum","goerli","sepolia","canto","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","localOptimismL1","localOptimism","kovanOptimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","time","resolve","reject"],"mappings":"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","file":"static/js/main.87593a9b.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={props.blockieSize ? props.blockieSize : 8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <Blockies seed={address.toLowerCase()} size={props.blockieSize ? props.blockieSize : 8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      <span style={{paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { BigNumber } from \"ethers\";\n\nconst { utils } = require(\"ethers\");\nconst zero = BigNumber.from(0);\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n  const { provider, address } = props;\n\n  const balanceContract = useBalance(props.provider, props.address);\n  useEffect(() => {\n    setBalance(balanceContract);\n  }, [balanceContract]);\n\n  useEffect(() => {\n    async function getBalance() {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (!newBalance.eq(balance ?? zero)) {\n          setBalance(newBalance);\n        }\n      }\n    }\n    getBalance();\n  }, [address, provider]);\n\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: \"0 0.5rem\",\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"54.4444444\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\"\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { ethers } from \"ethers\";\n\nconst axios = require(\"axios\");\n\nfunction isJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nexport default async function parseExternalContractTransaction(contractAddress, txData) {\n  // console.log(\"n-PARSE\", contractAddress, txData);\n  try {\n    let response = await axios.get(\"https://api.etherscan.io/api\", {\n      params: {\n        module: \"contract\",\n        action: \"getabi\",\n        address: contractAddress,\n        apikey: \"PJPKDC3BEBJQJVDEPCU5KAIA7WIV8IWQ51\",\n      },\n    });\n\n    const getParsedTransaction = async () => {\n      const abi = response?.data?.result;\n\n      if (abi && txData && txData !== \"\" && isJsonString(abi)) {\n        const iface = new ethers.utils.Interface(JSON.parse(abi));\n        return iface.parseTransaction({ data: txData });\n      }\n    };\n\n    return await getParsedTransaction(response);\n  } catch (error) {\n    console.log(\"parseExternalContractTransaction error:\", error);\n  }\n}\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n  const [displayMax, setDisplayMax] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const balance = useBalance(props.provider, props.contractAddress);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  let gasCost = 0;\n\n  if (usingBalance) {\n    if(props.gasPrice){\n      gasCost =  parseInt(props.gasPrice, 10) * 150000 / 10 ** 18;\n    }\n\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance - gasCost);\n    if (floatBalance < 0) {\n      floatBalance = 0;\n    }\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price;\n\n  function getBalance(_mode) {\n    setValue(floatBalance);\n    if (_mode === \"USD\") {\n      displayBalance = (floatBalance * price).toFixed(2);\n    } else {\n      displayBalance = floatBalance.toFixed(4);\n    }\n    return displayBalance;\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <div>\n    <span\n      style={{ cursor: \"pointer\", color: \"red\", float: \"right\", marginTop: \"-5px\" }}\n      onClick={() => {\n        setDisplay(getBalance(mode));\n        setDisplayMax(true);\n        if (typeof props.onChange === \"function\") {\n          props.onChange(floatBalance);\n        }\n      }}\n    >\n      max\n    </span>\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                displayMax ? setDisplay(getBalance(\"ETH\")) : setDisplay(currentValue);\n              } else if (mode === \"ETH\") {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  displayMax ? setDisplay(getBalance(\"USD\")) : setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        setDisplayMax(false);\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n        </div>\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            contractAddress={selectedAddress}\n            provider={props.provider}\n            gasPrice={props.gasPrice}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-around\" }}>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/**\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n  isFactoryDeployed,\n  gasPrice\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  let accountButton;\n  if (web3Modal?.cachedProvider) {\n    accountButton = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButton = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  return (\n    <div\n      className=\"flex\"\n      // style={{ display: \"flex\" }}\n    >\n      <div\n        // style={\n        //   {\n        // border: \"1px solid #d9d9d9\",\n        // borderRadius: \"9999px\",\n        // paddingLeft: \"0.875rem\",\n        // display: \"flex\",\n        // alignItems: \"center\",\n        //   }\n        // }\n        className=\"border border-gray-300  flex items-center rounded-3xl \"\n      >\n        <Balance address={address} provider={localProvider} price={price} size={\"1.125rem\"} />\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={\"1.4rem\"}\n          padding={\"0px\"}\n          gasPrice={gasPrice}\n        />\n        <div\n          // style={\n          //   {\n          // border: \"1px solid transparent\",\n          // borderRadius: \"9999px\",\n          // backgroundColor: currentTheme === \"light\" ? \"#f1f5f9\" : \"#262626\",\n          // marginLeft: \"0.5rem\",\n          // padding: \"0.375rem 0.875rem\",\n          //   }\n          // }\n          className={`border-2  rounded-3xl  ml-2 p-1 ${\n            currentTheme === \"light\" ? \"border-gray-200 bg-gray-100\" : \"border-gray-500 bg-gray-800\"\n          }`}\n        >\n          {address && (\n            <Address\n              address={address}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              // fontSize={\"1.125rem\"}\n              blockieSize={8}\n              fontSize={16}\n            />\n          )}\n        </div>\n      </div>\n      <Button\n        // style={{ verticalAlign: \"top\", marginLeft: 8, height: \"auto\" }}\n        className=\"ml-2\"\n        shape=\"round\"\n        size=\"large\"\n        onClick={accountButton.action}\n        disabled={isFactoryDeployed === undefined}\n      >\n        {accountButton.name}\n      </Button>\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\n\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{fontSize:24}}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address}/>\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n**/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\n// displays a page header\n\nexport default function Header(props) {\n  return (\n    <div className=\"flex justify-between items-center p-2  shadow-sm \">\n      <div className=\" flex flex-1 items-center\">\n        <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\n          👛 multisig.lol\n        </Title>\n        <a href=\"https://github.com/austintgriffith/maas\" target=\"_blank\">\n          warning: prototype for testnet use (view code)\n        </a>\n      </div>\n      {props.children}\n    </div>\n  );\n}\n","import { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\n\n// added display of 0 if price={price} is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n**/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price && props.price.toFixed && props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useState } from \"react\";\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue, ttl) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n        return parsedItem.value;\n      }\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (ttl) {\n        const now = new Date();\n\n        // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl,\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [JSON.stringify(urlArray)]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  }\n\n  // console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ position: \"absolute\", left: 0, bottom: \"-45px\", padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { useEffect, useState } from \"react\";\nimport { Spin } from \"antd\";\nimport axios from \"axios\";\n\nconst { BigNumber, ethers } = require(\"ethers\");\n\n// set up your access-key, if you don't have one or you want to generate new one follow next link\n// https://dashboard.tenderly.co/account/authorization\n\n// Create a .env file in the react-app folder with the credentials\n//REACT_APP_TENDERLY_USER = \"\"\n//REACT_APP_TENDERLY_PROJECT = \"\"\n//REACT_APP_TENDERLY_ACCESS_KEY = \"\"\n\nconst TENDERLY_USER = process.env.REACT_APP_TENDERLY_USER;\nconst TENDERLY_PROJECT = process.env.REACT_APP_TENDERLY_PROJECT;\nconst TENDERLY_ACCESS_KEY = process.env.REACT_APP_TENDERLY_ACCESS_KEY;\n\nconst SIMULATE_URL = `https://api.tenderly.co/api/v1/account/${TENDERLY_USER}/project/${TENDERLY_PROJECT}/simulate`;\nconst OPTS = {\n  headers: {\n    'X-Access-Key': TENDERLY_ACCESS_KEY\n  }\n}\n\nexport default function TenderlySimulation({ params, address, multiSigWallet, signaturesRequired}) {\n  const [simulated, setSimulated] = useState(false);\n  const [simulationFailed, setSimulationFailed] = useState(false);\n  const [simulationUnexpectedError, setSimulationUnexpectedError] = useState(false);\n  const [simulationId, setSimulationId] = useState();\n\n  useEffect(()=> {\n    const simulateTransaction = async () => {\n      try {\n        if (!params || !address || !multiSigWallet || !signaturesRequired) {\n          return;\n        }\n\n        const value = params.amount ? ethers.utils.parseEther(\"\" + parseFloat(params.amount).toFixed(12)) : \"0x00\";\n        const txData = (params.data && params.data != \"0x\") ? params.data : \"0x\";\n        const data = multiSigWallet.interface.encodeFunctionData(\"executeTransaction\", [params.to, value, txData, params.signatures]);\n\n        const multiSigWalletAddressLowerCase = multiSigWallet.address.toLowerCase(); // Tenderly does a lowerCase on the contract address\n\n        let body; // Tenderly simulation transaction params\n\n        const currentSignaturesCount = params.signatures.length;\n\n        if (currentSignaturesCount < signaturesRequired.toNumber()) {\n          // If there are not enough signatures, we need to do state overrides for the simulation\n          // We override signaturesRequired with the currentSignaturesCount, \n          // so we can simulate the transaction even though we don't have all the signatures yet\n\n          // Tenderly docs\n          // https://tenderlydev.notion.site/Sim-API-With-State-Overrides-83d80213689b43de8f3d45e121689b42#0a87b56e05af47ffb2304777f9229843\n          // https://tenderlydev.notion.site/Sim-API-With-State-Overrides-83d80213689b43de8f3d45e121689b42#e00e8c2a9183421a9495fb78742d9c58\n\n/*\n          I'm leaving step 1 and 2 here, even though it is not used right now\n          In order to use state overrides, we need to verify the contract on Tenderly\n          I did it once, so I could use the ENCODE_STATE_API and save the response,\n          which can be reused for not verified contracts as well:\n\n          \"stateOverrides\": {\n              [multiSigWalletAddressLowerCase]: {\n                  \"value\": {\n                      \"0x0000000000000000000000000000000000000000000000000000000000000003\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n                  }\n              }\n            }\n          };\n\n          // 1: prepare state overrides. This is where you specify all the contracts you need to override for the simulation.\n          const stateOverridesSpecification = {\n            networkID: `${params.chainId}`, // a STRING: network ID as \"3\"\n            // stateOverrides is a specification of assignments: Map<ContractAddress, AssignmentsSpecification>\n            //    - The key is the contract's address (so you can override state in multiple contracts)\n            //    - AssignmentsSpecification: The value is an object specifying overrides of state variables' values.\n            //      To achieve kvStore[1] = 99 add \"kvStore[1]\": \"99\" to as an entry of the value map.\n            //      Left hand side is the key in this JSON (\"kvStore[1]\") and right hand side of the assignment is the value (\"99\").\n            //\n            stateOverrides: {\n                [multiSigWallet.address]: {\n                    value: {\n                        // overrides of contract state override (fields come from contract's state vars)\n                        \"signaturesRequired\": \"1\",\n                    }\n                }\n            }\n          }\n\n          // 2: Encode state overrides (intermediary step)\n          const ENCODE_STATE_API = `https://api.tenderly.co/api/v1/account/${TENDERLY_USER}/project/${TENDERLY_PROJECT}/contracts/encode-states`;\n          const encodedSatateResponse = await axios.post(ENCODE_STATE_API, stateOverridesSpecification, OPTS);\n          const encodedStateOverrides = encodedSatateResponse.data;\n */         \n          const encodedStateOverrides = {\n            \"stateOverrides\": {\n              [multiSigWalletAddressLowerCase]: {\n                  \"value\": {\n                      //\"0x0000000000000000000000000000000000000000000000000000000000000003\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n                      \"0x0000000000000000000000000000000000000000000000000000000000000003\": ethers.utils.hexlify(currentSignaturesCount)\n                  }\n              }\n            }\n          };\n\n          // 3: Prepare transaction\n          const unsignedTransactionToSimulate = await multiSigWallet.populateTransaction.signaturesRequired();\n\n          // 4: Create a transaction and pass encodedStateOverrides under state_objects\n          body = {\n            ...unsignedTransactionToSimulate, // \n            input: data, // input is necessary\n            network_id: `${params.chainId}`, //network ID: a string\n            \"from\": address, // any address\n            to: multiSigWalletAddressLowerCase,\n\n            /* \n                This is again a mapping; Map<ContractAddress, {storage: encodedStorageOverrides }> \n                populate storage with the value in encodedStateOverrides which corresponds  \n            */\n            state_objects: {\n                [multiSigWalletAddressLowerCase]: {\n                    storage: encodedStateOverrides.stateOverrides[multiSigWalletAddressLowerCase].value\n                }\n            },\n            save: true // saves to dashboard\n          }\n\n          console.log(\"Simulating with state overrides\")\n        }\n        else {\n          body = {\n            // standard TX fields\n            \"network_id\": params.chainId,\n            \"from\": address,\n            \"to\": multiSigWalletAddressLowerCase,\n            \"input\": data,\n            //\"gas\": 61606000,\n            //\"gas_price\": \"0\",\n            //\"value\": params.amount ? ethers.utils.parseEther(params.amount.toString()).toString() : \"0\", Let's keep this here to remember the hours long debugging\n            \"value\": \"0\",\n            // simulation config (tenderly specific)\n            \"save_if_fails\": true,\n            \"save\": true,\n            //\"simulation_type\": \"quick\"\n          }\n\n          console.log(\"Simulating with all the signatures, without state overrides\")\n        }\n\n        const simResponse = await axios.post(SIMULATE_URL, body, OPTS);\n        console.log(\"Returned value: \", simResponse.data.transaction.transaction_info.call_trace.output);\n\n        if (simResponse.data.simulation.status === false) {\n          setSimulationFailed(true);\n        }\n\n        setSimulationId(simResponse.data.simulation.id);\n        setSimulated(true);\n      }\n      catch(error) {\n        setSimulationUnexpectedError(true);\n        console.error(\"simulateTransaction\", error)\n      }\n    }\n\n    simulateTransaction();\n  },[]);\n\n  return (\n    <div>\n       <div style={{ textAlign: \"center\"}}>\n          {!simulated && !simulationUnexpectedError && <>Simulating on Tenderly... <Spin/></>}\n          {simulated && simulationId && <>Simulating on <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://dashboard.tenderly.co/public/${TENDERLY_USER}/${TENDERLY_PROJECT}/simulator/${simulationId}`}>Tenderly</a> {!simulationFailed ? \"was successful!\" : \"has failed!\"}</>}\n          {simulationUnexpectedError && <>Couldn't simulate on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tenderly.co/\">Tenderly</a> because of an unexpected error.</>}\n       </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { Address, Balance } from \"..\";\nimport { ethers } from \"ethers\";\n\nexport default function TransactionDetailsModal({\n  visible,\n  handleOk,\n  handleCancel,\n  mainnetProvider,\n  price,\n  txnInfo = null,\n  showFooter = false,\n  to = false,\n  value = false,\n  type = \"\",\n}) {\n  return (\n    <Modal\n      title={`${ type } Transaction Details`}\n      visible={visible}\n      onCancel={handleCancel}\n      destroyOnClose\n      onOk={handleOk}\n      closable\n      maskClosable\n      footer={\n        showFooter\n          ? [\n            <Button key=\"cancel\" onClick={handleCancel}>\n              Cancel\n            </Button>,\n            <Button key=\"ok\" type=\"primary\" onClick={handleOk}>\n              Propose\n            </Button>,\n          ]\n          : null\n      }\n    >\n      {/* wallet connect tx details  */}\n      {to && value && (\n        <>\n          <div>\n            <div className=\"m-2\">\n              to: <span className=\"bg-gray-300 p-1 rounded-md\">{to}</span>{\" \"}\n            </div>\n            <div className=\"m-2\">\n              value: <span className=\"bg-gray-300 p-1 rounded-md\">{value}</span>{\" \"}\n            </div>\n            <div className=\"m-2\">{!txnInfo && <span className=\"text-blue-500\">can't parse tx data !</span>}</div>\n          </div>\n        </>\n      )}\n\n      {txnInfo && (\n        <div>\n          <p>\n            <b>Event Name :</b> {txnInfo.functionFragment.name}\n          </p>\n          <p>\n            <b>Function Signature :</b> {txnInfo.signature}\n          </p>\n          <h4>Arguments :&nbsp;</h4>\n          {txnInfo.functionFragment.inputs.map((element, index) => {\n            if (element.type === \"address\") {\n              return (\n                <div\n                  key={element.name}\n                  style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"left\" }}\n                >\n                  <b>{element.name} :&nbsp;</b>\n                  <Address fontSize={16} address={txnInfo.args[index]} ensProvider={mainnetProvider} />\n                </div>\n              );\n            } else if (element.type === \"uint256\") {\n\n              //first try toNumber\n              let numberDisplay = \"\"\n              try{\n                numberDisplay = \"\"+txnInfo.args[index].toNumber()\n              }catch(e){\n                numberDisplay = \"\"+txnInfo.args[index].toString()\n              }\n\n              return (\n                <p key={element.name}>\n                  {element.name === \"value\" ? (\n                    <>\n                      <b>{element.name} : </b>{\" \"}\n                      <Balance fontSize={16} balance={txnInfo.args[index]} dollarMultiplier={price} />{\" \"}\n                    </>\n                  ) : (\n                    <>\n                      <b>{element.name} : </b> {txnInfo.args[index] && numberDisplay}\n                    </>\n                  )}\n                </p>\n              );\n            } else {\n              return (\n                <p key={element.name}>\n                  {\n                    <>\n                      <b>{element.name} : </b> {txnInfo.args[index]}\n                    </>\n                  }\n                </p>\n              );\n            }\n          })}\n          <p>\n            <b>SigHash : &nbsp;</b>\n            {txnInfo.sighash}\n          </p>\n        </div>\n      )}\n    </Modal>\n  );\n}\n","import { BigNumberish, BytesLike } from \"ethers\";\n\nexport declare const INTERFACE_MESSAGES: {\n  readonly ENV_INFO: \"ENV_INFO\";\n  readonly ON_SAFE_INFO: \"ON_SAFE_INFO\";\n  readonly TRANSACTION_CONFIRMED: \"TRANSACTION_CONFIRMED\";\n  readonly TRANSACTION_REJECTED: \"TRANSACTION_REJECTED\";\n};\nexport type InterfaceMessageIds = keyof typeof INTERFACE_MESSAGES;\n\nexport declare type LowercaseNetworks =\n  | \"mainnet\"\n  | \"morden\"\n  | \"ropsten\"\n  | \"rinkeby\"\n  | \"goerli\"\n  | \"kovan\"\n  | \"xdai\"\n  | \"energy_web_chain\"\n  | \"volta\"\n  | \"unknown\";\nexport interface SafeInfo {\n  safeAddress: string;\n  network: LowercaseNetworks;\n  ethBalance: string;\n}\nexport interface InterfaceMessageToPayload {\n  [INTERFACE_MESSAGES.ON_SAFE_INFO]: SafeInfo;\n  [INTERFACE_MESSAGES.TRANSACTION_CONFIRMED]: {\n    safeTxHash: string;\n  };\n  [INTERFACE_MESSAGES.ENV_INFO]: {\n    txServiceUrl: string;\n  };\n  [INTERFACE_MESSAGES.TRANSACTION_REJECTED]: Record<string, unknown>;\n}\nexport type InterfaceMessageProps<T extends InterfaceMessageIds> = {\n  messageId: T;\n  data: InterfaceMessageToPayload[T];\n};\nexport declare type RequestId = number | string;\n\n// Messaging\nexport enum Methods {\n  sendTransactions = \"sendTransactions\",\n  rpcCall = \"rpcCall\",\n  getChainInfo = \"getChainInfo\",\n  getSafeInfo = \"getSafeInfo\",\n  getTxBySafeTxHash = \"getTxBySafeTxHash\",\n  getSafeBalances = \"getSafeBalances\",\n  signMessage = \"signMessage\",\n  signTypedMessage = \"signTypedMessage\",\n  getEnvironmentInfo = \"getEnvironmentInfo\",\n  requestAddressBook = \"requestAddressBook\",\n  wallet_getPermissions = \"wallet_getPermissions\",\n  wallet_requestPermissions = \"wallet_requestPermissions\",\n}\nexport declare type SDKRequestData<M extends Methods = Methods, P = unknown> = {\n  id: RequestId;\n  params: P;\n  env: {\n    sdkVersion: string;\n  };\n  method: M;\n};\nexport declare type SDKMessageEvent = MessageEvent<SDKRequestData>;\nexport declare type SendTransactionsResponse = {\n  safeTxHash: string;\n};\nexport enum RPC_AUTHENTICATION {\n  API_KEY_PATH = \"API_KEY_PATH\",\n  NO_AUTHENTICATION = \"NO_AUTHENTICATION\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport type RpcUri = {\n  authentication: RPC_AUTHENTICATION;\n  value: string;\n};\nexport type BlockExplorerUriTemplate = {\n  address: string;\n  txHash: string;\n  api: string;\n};\nexport type NativeCurrency = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  logoUri: string;\n};\nexport type Theme = {\n  textColor: string;\n  backgroundColor: string;\n};\nexport enum GAS_PRICE_TYPE {\n  ORACLE = \"ORACLE\",\n  FIXED = \"FIXED\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport type GasPriceOracle = {\n  type: GAS_PRICE_TYPE.ORACLE;\n  uri: string;\n  gasParameter: string;\n  gweiFactor: string;\n};\nexport type GasPriceFixed = {\n  type: GAS_PRICE_TYPE.FIXED;\n  weiValue: string;\n};\nexport type GasPriceUnknown = {\n  type: GAS_PRICE_TYPE.UNKNOWN;\n};\nexport type GasPrice = (GasPriceOracle | GasPriceFixed | GasPriceUnknown)[];\nexport enum FEATURES {\n  ERC721 = \"ERC721\",\n  SAFE_APPS = \"SAFE_APPS\",\n  CONTRACT_INTERACTION = \"CONTRACT_INTERACTION\",\n  DOMAIN_LOOKUP = \"DOMAIN_LOOKUP\",\n  SPENDING_LIMIT = \"SPENDING_LIMIT\",\n  EIP1559 = \"EIP1559\",\n  SAFE_TX_GAS_OPTIONAL = \"SAFE_TX_GAS_OPTIONAL\",\n  TX_SIMULATION = \"TX_SIMULATION\",\n}\nexport type _ChainInfo = {\n  transactionService: string;\n  chainId: string; // Restricted by what is returned by the CGW\n  chainName: string;\n  shortName: string;\n  l2: boolean;\n  description: string;\n  rpcUri: RpcUri;\n  safeAppsRpcUri: RpcUri;\n  publicRpcUri: RpcUri;\n  blockExplorerUriTemplate: BlockExplorerUriTemplate;\n  nativeCurrency: NativeCurrency;\n  theme: Theme;\n  ensRegistryAddress?: string;\n  gasPrice: GasPrice;\n  disabledWallets: string[];\n  features: FEATURES[];\n};\nexport declare type ChainInfo = Pick<\n  _ChainInfo,\n  | \"chainName\"\n  | \"chainId\"\n  | \"shortName\"\n  | \"nativeCurrency\"\n  | \"blockExplorerUriTemplate\"\n>;\nexport enum TransactionStatus {\n  AWAITING_CONFIRMATIONS = \"AWAITING_CONFIRMATIONS\",\n  AWAITING_EXECUTION = \"AWAITING_EXECUTION\",\n  CANCELLED = \"CANCELLED\",\n  FAILED = \"FAILED\",\n  SUCCESS = \"SUCCESS\",\n  PENDING = \"PENDING\",\n  WILL_BE_REPLACED = \"WILL_BE_REPLACED\",\n}\nexport type AddressEx = {\n  value: string;\n  name?: string;\n  logoUri?: string;\n};\nexport enum TransferDirection {\n  INCOMING = \"INCOMING\",\n  OUTGOING = \"OUTGOING\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport enum TransactionTokenType {\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  NATIVE_COIN = \"NATIVE_COIN\",\n}\nexport type Erc20Transfer = {\n  type: TransactionTokenType.ERC20;\n  tokenAddress: string;\n  tokenName?: string;\n  tokenSymbol?: string;\n  logoUri?: string;\n  decimals?: number;\n  value: string;\n};\nexport type Erc721Transfer = {\n  type: TransactionTokenType.ERC721;\n  tokenAddress: string;\n  tokenId: string;\n  tokenName?: string;\n  tokenSymbol?: string;\n  logoUri?: string;\n};\nexport type NativeCoinTransfer = {\n  type: TransactionTokenType.NATIVE_COIN;\n  value: string;\n};\nexport type TransferInfo = Erc20Transfer | Erc721Transfer | NativeCoinTransfer;\nexport interface Transfer {\n  type: \"Transfer\";\n  sender: AddressEx;\n  recipient: AddressEx;\n  direction: TransferDirection;\n  transferInfo: TransferInfo;\n}\nexport type ParamValue = string | ParamValue[];\nexport enum Operation {\n  CALL = 0,\n  DELEGATE = 1,\n}\nexport type InternalTransaction = {\n  operation: Operation;\n  to: string;\n  value?: string;\n  data?: string;\n  dataDecoded?: DataDecoded;\n};\nexport type ValueDecodedType = InternalTransaction[];\nexport type Parameter = {\n  name: string;\n  type: string;\n  value: ParamValue;\n  valueDecoded?: ValueDecodedType;\n};\nexport type DataDecoded = {\n  method: string;\n  parameters?: Parameter[];\n};\nexport enum SettingsInfoType {\n  SET_FALLBACK_HANDLER = \"SET_FALLBACK_HANDLER\",\n  ADD_OWNER = \"ADD_OWNER\",\n  REMOVE_OWNER = \"REMOVE_OWNER\",\n  SWAP_OWNER = \"SWAP_OWNER\",\n  CHANGE_THRESHOLD = \"CHANGE_THRESHOLD\",\n  CHANGE_IMPLEMENTATION = \"CHANGE_IMPLEMENTATION\",\n  ENABLE_MODULE = \"ENABLE_MODULE\",\n  DISABLE_MODULE = \"DISABLE_MODULE\",\n  SET_GUARD = \"SET_GUARD\",\n  DELETE_GUARD = \"DELETE_GUARD\",\n}\nexport type SetFallbackHandler = {\n  type: SettingsInfoType.SET_FALLBACK_HANDLER;\n  handler: AddressEx;\n};\nexport type AddOwner = {\n  type: SettingsInfoType.ADD_OWNER;\n  owner: AddressEx;\n  threshold: number;\n};\nexport type SettingsInfo =\n  | SetFallbackHandler\n  | AddOwner\n  | RemoveOwner\n  | SwapOwner\n  | ChangeThreshold\n  | ChangeImplementation\n  | EnableModule\n  | DisableModule\n  | SetGuard\n  | DeleteGuard;\nexport type RemoveOwner = {\n  type: SettingsInfoType.REMOVE_OWNER;\n  owner: AddressEx;\n  threshold: number;\n};\nexport type SwapOwner = {\n  type: SettingsInfoType.SWAP_OWNER;\n  oldOwner: AddressEx;\n  newOwner: AddressEx;\n};\nexport type ChangeThreshold = {\n  type: SettingsInfoType.CHANGE_THRESHOLD;\n  threshold: number;\n};\nexport type ChangeImplementation = {\n  type: SettingsInfoType.CHANGE_IMPLEMENTATION;\n  implementation: AddressEx;\n};\nexport type EnableModule = {\n  type: SettingsInfoType.ENABLE_MODULE;\n  module: AddressEx;\n};\nexport type DisableModule = {\n  type: SettingsInfoType.DISABLE_MODULE;\n  module: AddressEx;\n};\nexport type SetGuard = {\n  type: SettingsInfoType.SET_GUARD;\n  guard: AddressEx;\n};\nexport type DeleteGuard = {\n  type: SettingsInfoType.DELETE_GUARD;\n};\nexport type SettingsChange = {\n  type: \"SettingsChange\";\n  dataDecoded: DataDecoded;\n  settingsInfo?: SettingsInfo;\n};\nexport interface Custom {\n  type: \"Custom\";\n  to: AddressEx;\n  dataSize: string;\n  value: string;\n  methodName?: string;\n  actionCount?: number;\n  isCancellation: boolean;\n}\nexport type MultiSend = {\n  type: \"Custom\";\n  to: AddressEx;\n  dataSize: string;\n  value: string;\n  methodName: \"multiSend\";\n  actionCount: number;\n  isCancellation: boolean;\n};\nexport type Cancellation = Custom & {\n  isCancellation: true;\n};\nexport type Creation = {\n  type: \"Creation\";\n  creator: AddressEx;\n  transactionHash: string;\n  implementation?: AddressEx;\n  factory?: AddressEx;\n};\nexport type TransactionInfo =\n  | Transfer\n  | SettingsChange\n  | Custom\n  | MultiSend\n  | Cancellation\n  | Creation;\nexport type TransactionData = {\n  hexData?: string;\n  dataDecoded?: DataDecoded;\n  to: AddressEx;\n  value?: string;\n  operation: Operation;\n  addressInfoIndex?: { [key: string]: AddressEx };\n  trustedDelegateCallTarget: boolean;\n};\nexport type ModuleExecutionDetails = {\n  type: \"MODULE\";\n  address: AddressEx;\n};\nexport type MultisigConfirmation = {\n  signer: AddressEx;\n  signature?: string;\n  submittedAt: number;\n};\nexport enum TokenType {\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  NATIVE_TOKEN = \"NATIVE_TOKEN\",\n}\nexport type TokenInfo = {\n  type: TokenType;\n  address: string;\n  decimals: number;\n  symbol: string;\n  name: string;\n  logoUri: string;\n};\nexport type MultisigExecutionDetails = {\n  type: \"MULTISIG\";\n  submittedAt: number;\n  nonce: number;\n  safeTxGas: string;\n  baseGas: string;\n  gasPrice: string;\n  gasToken: string;\n  refundReceiver: AddressEx;\n  safeTxHash: string;\n  executor?: AddressEx;\n  signers: AddressEx[];\n  confirmationsRequired: number;\n  confirmations: MultisigConfirmation[];\n  rejectors?: AddressEx[];\n  gasTokenInfo?: TokenInfo;\n};\nexport type DetailedExecutionInfo =\n  | ModuleExecutionDetails\n  | MultisigExecutionDetails;\nexport type SafeAppInfo = {\n  name: string;\n  url: string;\n  logoUri: string;\n};\nexport type TransactionDetails = {\n  txId: string;\n  executedAt?: number;\n  txStatus: TransactionStatus;\n  txInfo: TransactionInfo;\n  txData?: TransactionData;\n  detailedExecutionInfo?: DetailedExecutionInfo;\n  txHash?: string;\n  safeAppInfo?: SafeAppInfo;\n};\nexport declare type GatewayTransactionDetails = TransactionDetails;\nexport type SafeBalanceResponse = {\n  fiatTotal: string;\n  items: Array<{\n    tokenInfo: TokenInfo;\n    balance: string;\n    fiatBalance: string;\n    fiatConversion: string;\n  }>;\n};\nexport declare type SafeBalances = SafeBalanceResponse;\nexport declare type EnvironmentInfo = {\n  origin: string;\n};\nexport declare type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\nexport declare type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\nexport declare type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\nexport interface MethodToResponse {\n  [Methods.sendTransactions]: SendTransactionsResponse;\n  [Methods.rpcCall]: unknown;\n  [Methods.getSafeInfo]: SafeInfo;\n  [Methods.getChainInfo]: ChainInfo;\n  [Methods.getTxBySafeTxHash]: GatewayTransactionDetails;\n  [Methods.getSafeBalances]: SafeBalances[];\n  [Methods.signMessage]: SendTransactionsResponse;\n  [Methods.signTypedMessage]: SendTransactionsResponse;\n  [Methods.getEnvironmentInfo]: EnvironmentInfo;\n  [Methods.requestAddressBook]: AddressBookItem[];\n  [Methods.wallet_getPermissions]: Permission[];\n  [Methods.wallet_requestPermissions]: Permission[];\n}\nexport declare type ErrorResponse = {\n  id: RequestId;\n  success: false;\n  error: string;\n  version?: string;\n};\nexport type SuccessResponse<T = MethodToResponse[Methods]> = {\n  id: RequestId;\n  data: T;\n  version?: string;\n  success: true;\n};\nexport declare const RPC_CALLS: {\n  readonly eth_call: \"eth_call\";\n  readonly eth_gasPrice: \"eth_gasPrice\";\n  readonly eth_getLogs: \"eth_getLogs\";\n  readonly eth_getBalance: \"eth_getBalance\";\n  readonly eth_getCode: \"eth_getCode\";\n  readonly eth_getBlockByHash: \"eth_getBlockByHash\";\n  readonly eth_getBlockByNumber: \"eth_getBlockByNumber\";\n  readonly eth_getStorageAt: \"eth_getStorageAt\";\n  readonly eth_getTransactionByHash: \"eth_getTransactionByHash\";\n  readonly eth_getTransactionReceipt: \"eth_getTransactionReceipt\";\n  readonly eth_getTransactionCount: \"eth_getTransactionCount\";\n  readonly eth_estimateGas: \"eth_estimateGas\";\n};\n\nexport declare type RpcCallNames = keyof typeof RPC_CALLS;\nexport declare type RPCPayload<P = unknown[]> = {\n  call: RpcCallNames;\n  params: P | unknown[];\n};\nexport interface MethodToResponse {\n  [Methods.sendTransactions]: SendTransactionsResponse;\n  [Methods.rpcCall]: unknown;\n  [Methods.getSafeInfo]: SafeInfo;\n  [Methods.getChainInfo]: ChainInfo;\n  [Methods.getTxBySafeTxHash]: GatewayTransactionDetails;\n  [Methods.getSafeBalances]: SafeBalances[];\n  [Methods.signMessage]: SendTransactionsResponse;\n  [Methods.signTypedMessage]: SendTransactionsResponse;\n  [Methods.getEnvironmentInfo]: EnvironmentInfo;\n  [Methods.requestAddressBook]: AddressBookItem[];\n  [Methods.wallet_getPermissions]: Permission[];\n  [Methods.wallet_requestPermissions]: Permission[];\n}\nexport declare type SignMessageParams = {\n  message: string;\n};\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: BigNumberish;\n  verifyingContract?: string;\n  salt?: BytesLike;\n}\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\nexport declare type TypedMessageTypes = {\n  [key: string]: TypedDataTypes[];\n};\nexport declare type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n};\nexport declare type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\nexport interface Transaction {\n  to: string;\n  value: string;\n  data: string;\n}\n","import { MutableRefObject, useEffect, useState } from \"react\";\nimport { MessageFormatter } from \"./messageFormatter\";\nimport {\n  SDKMessageEvent,\n  MethodToResponse,\n  Methods,\n  ErrorResponse,\n  RequestId,\n} from \"./types\";\nimport { getSDKVersion } from \"./utils\";\n\ntype MessageHandler = (\n  msg: SDKMessageEvent\n) =>\n  | void\n  | MethodToResponse[Methods]\n  | ErrorResponse\n  | Promise<MethodToResponse[Methods] | ErrorResponse | void>;\n\nexport enum LegacyMethods {\n  getEnvInfo = \"getEnvInfo\",\n}\n\ntype SDKMethods = Methods | LegacyMethods;\n\nclass AppCommunicator {\n  private iframeRef: MutableRefObject<HTMLIFrameElement | null>;\n  private handlers = new Map<SDKMethods, MessageHandler>();\n\n  constructor(iframeRef: MutableRefObject<HTMLIFrameElement | null>) {\n    this.iframeRef = iframeRef;\n\n    window.addEventListener(\"message\", this.handleIncomingMessage);\n  }\n\n  on = (method: SDKMethods, handler: MessageHandler): void => {\n    this.handlers.set(method, handler);\n  };\n\n  private isValidMessage = (msg: SDKMessageEvent): boolean => {\n    if (msg.data.hasOwnProperty(\"isCookieEnabled\")) {\n      return true;\n    }\n\n    const sentFromIframe = this.iframeRef.current?.contentWindow === msg.source;\n    const knownMethod = Object.values(Methods).includes(msg.data.method);\n\n    return sentFromIframe && knownMethod;\n  };\n\n  private canHandleMessage = (msg: SDKMessageEvent): boolean => {\n    return Boolean(this.handlers.get(msg.data.method));\n  };\n\n  send = (data: unknown, requestId: RequestId, error = false): void => {\n    const sdkVersion = getSDKVersion();\n    const msg = error\n      ? MessageFormatter.makeErrorResponse(\n          requestId,\n          data as string,\n          sdkVersion\n        )\n      : MessageFormatter.makeResponse(requestId, data, sdkVersion);\n    // console.log(\"send\", { msg });\n    this.iframeRef.current?.contentWindow?.postMessage(msg, \"*\");\n  };\n\n  handleIncomingMessage = async (msg: SDKMessageEvent): Promise<void> => {\n    const validMessage = this.isValidMessage(msg);\n    const hasHandler = this.canHandleMessage(msg);\n\n    if (validMessage && hasHandler) {\n      // console.log(\"incoming\", { msg: msg.data });\n\n      const handler = this.handlers.get(msg.data.method);\n      try {\n        // @ts-expect-error Handler existence is checked in this.canHandleMessage\n        const response = await handler(msg);\n\n        // If response is not returned, it means the response will be send somewhere else\n        if (typeof response !== \"undefined\") {\n          this.send(response, msg.data.id);\n        }\n      } catch (err: any) {\n        this.send(err.message, msg.data.id, true);\n      }\n    }\n  };\n\n  clear = (): void => {\n    window.removeEventListener(\"message\", this.handleIncomingMessage);\n  };\n}\n\nconst useAppCommunicator = (\n  iframeRef: MutableRefObject<HTMLIFrameElement | null>\n): AppCommunicator | undefined => {\n  const [communicator, setCommunicator] = useState<AppCommunicator | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    let communicatorInstance: AppCommunicator;\n    const initCommunicator = (\n      iframeRef: MutableRefObject<HTMLIFrameElement>\n    ) => {\n      communicatorInstance = new AppCommunicator(iframeRef);\n      setCommunicator(communicatorInstance);\n    };\n\n    initCommunicator(iframeRef as MutableRefObject<HTMLIFrameElement>);\n\n    return () => {\n      communicatorInstance?.clear();\n    };\n  }, [iframeRef]);\n\n  return communicator;\n};\n\nexport { useAppCommunicator };\n","import { Button, Input, Badge, Spin } from \"antd\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QrReader from \"react-qr-reader\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage } from \"../hooks\";\nimport { parseExternalContractTransaction } from \"../helpers\";\nimport TransactionDetailsModal from \"./MultiSig/TransactionDetailsModal\";\nimport MultiSigWalletAbi from \"../configs/MultiSigWallet_ABI.json\";\n\nlet CLIENT_META = {\n  description: \"Forkable multisig for prototyping.\",\n  url: \"https://multisig.lol\",\n  icons: [\"https://multisig.lol/multisiglol.png\"],\n  name: \"👛 multisig.lol\",\n};\n\nconst WalletConnectInput = ({ chainId, address, loadTransactionData, mainnetProvider, price }) => {\n  // localstates\n  const [data, setData] = useState();\n  const [to, setTo] = useState();\n  const [value, setValue] = useState();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [parsedTransactionData, setParsedTransactionData] = useState();\n  const [scan, setScan] = useState(false);\n  const [walletConnect_wallet, setWalletConnect_wallet] = useState(undefined);\n  const [walletLoading, setWalletLoading] = useState(false);\n\n  // localstorage states\n  const [walletConnectSession_wallet, setWalletConnectSession_wallet] = useLocalStorage(\n    \"walletConnectSession_wallet\",\n    undefined,\n  );\n  const [walletConnectSession_main, setWalletConnectSession_main] = useLocalStorage(\n    \"walletConnectSession_main\",\n    undefined,\n  );\n\n  const [walletConnectUri, setWalletConnectUri] = useLocalStorage(\"walletConnectUri_wallet\", \"\");\n  const [isConnected, setIsConnected] = useLocalStorage(\"isConnected_wallet\", false);\n  const [peerMeta, setPeerMeta] = useLocalStorage(\"peerMeta\");\n  // let location = useLocation();\n\n  useEffect(() => {\n    if (walletConnectUri && address) {\n      let walletConnect_wallet_cached = localStorage.getItem(\"walletConnectSession_wallet\");\n      // console.log(\"n-walletConnect_wallet_cached: \", walletConnect_wallet_cached);\n      if (Boolean(walletConnect_wallet_cached)) {\n        // set old wallet connect data\n        localStorage.setItem(\"walletconnect\", walletConnect_wallet_cached);\n\n        let walletConnectData = JSON.parse(walletConnect_wallet_cached);\n        const connector = new WalletConnect({\n          bridge: walletConnectData.bridge, // Required\n          clientMeta: CLIENT_META,\n        });\n\n        // if (!connector.connected) {\n        //   // create new session\n        //   connector.createSession();\n        // }\n\n        subscribeToEvents(connector);\n      }\n    }\n  }, [address]);\n\n  //\n  useEffect(() => {\n    // if (!isConnected) {\n    //   let nextSession = localStorage.getItem(\"wallectConnectNextSession\");\n    //   if (nextSession) {\n    //     localStorage.removeItem(\"wallectConnectNextSession\");\n    //     console.log(\"FOUND A NEXT SESSION IN CACHE\");\n    //     console.log(\"this is the\", nextSession);\n    //     setWalletConnectUri(nextSession);\n    //   } else if (walletConnectConnector) {\n    //     console.log(\"NOT CONNECTED AND walletConnectConnector\", walletConnectConnector);\n    //     setupConnector(walletConnectConnector);\n    //     setIsConnected(true);\n    //   } else if (walletConnectUri /*&&!walletConnectUriSaved*/) {\n    //     //CLEAR LOCAL STORAGE?!?\n    //     console.log(\" old uri was\", walletConnectUri);\n    //     console.log(\"clear local storage and connect...\", nextSession);\n    //     localStorage.removeItem(\"walletconnect\"); // lololol\n    //     setupConnector(\n    //       {\n    //         // Required\n    //         uri: walletConnectUri,\n    //         // Required\n    //       } /*,\n    //           {\n    //             // Optional\n    //             url: \"<YOUR_PUSH_SERVER_URL>\",\n    //             type: \"fcm\",\n    //             token: token,\n    //             peerMeta: true,\n    //             language: language,\n    //           }*/,\n    //     );\n    //   }\n    // }\n  }, [walletConnectUri]);\n\n  // useEffect(\n  //   () => {\n  //     if (address && !isConnected) {\n  //       resetConnection();\n  //     }\n  //   },\n  //   [address],\n  //   isConnected,\n  // );\n\n  useEffect(() => {\n    // set main wallet on load\n    // let mainWalletConnect = localStorage.getItem(\"walletconnect\");\n    // if (mainWalletConnect !== null) {\n    //   setWalletConnectSession_main(JSON.parse(mainWalletConnect));\n    // }\n\n    return () => {\n      // let mainWalletConnect = localStorage.getItem(\"mainWalletConnectSession\");\n      // console.log(\"n-mainWalletConnect: \", mainWalletConnect);\n      // // on unount set main WC instance\n      // localStorage.setItem(\"walletconnect\", mainWalletConnect);\n      // killSession(false);\n    };\n  }, []);\n  //\n\n  useEffect(() => {\n    // if (data && to) {\n    if (to) {\n      decodeFunctionData();\n    }\n  }, [data]);\n  //\n\n  const onWalletConnect = walletConnectUri => {\n    setWalletLoading(true);\n    const connector = setupConnector(walletConnectUri);\n    // console.log(\"n-connector: \", connector);\n    if (connector) {\n      setWalletConnectUri(walletConnectUri);\n\n      // create event listeners\n      subscribeToEvents(connector);\n    }\n  };\n\n  // const setupAndSubscribe = () => {\n  //   const connector = setupConnector();\n  //   console.log(\"n-connector: \", connector);\n  //   if (connector) {\n  //     subscribeToEvents(connector);\n  //     setWalletConnectSession_wallet(connector);\n  //   }\n  // };\n\n  const setupConnector = walletConnectUri => {\n    console.log(\" 📡 Connecting to Wallet Connect....\", walletConnectUri);\n    let connector;\n\n    /**----------------------\n     * check and save main wallet connect session\n     * as wallet connect with contract on create proposal is conflicting with main wc instance\n     * ---------------------*/\n    let mainWalletConnect = localStorage.getItem(\"walletconnect\");\n    if (mainWalletConnect !== null) {\n      setWalletConnectSession_main(JSON.parse(mainWalletConnect));\n      // remove  main wallect connect session\n      localStorage.removeItem(\"walletconnect\");\n    }\n\n    try {\n      // load wallet connect dynamically\n      // const WalletConnect = require(\"@walletconnect/client\").default;\n      console.log(\"n-walletConnectUri: LOADED \", walletConnectUri);\n\n      connector = new WalletConnect({ uri: walletConnectUri, clientMeta: CLIENT_META });\n\n      // return connector;\n    } catch (error) {\n      console.log(\"n-error: \", error);\n      console.error(\"setupConnector error:\", error);\n      localStorage.removeItem(\"walletConnectUri\");\n      setWalletConnectUri(\"\");\n      setWalletConnect_wallet(undefined);\n      return;\n    }\n    return connector;\n  };\n\n  const subscribeToEvents = connector => {\n    // console.log(\"n-connector: EVENT LISTENER \", connector);\n    setWalletConnect_wallet(connector);\n\n    connector.on(\"session_request\", (error, payload) => {\n      if (error) {\n        console.log(\"n-error: session request \", error);\n        throw error;\n      }\n\n      console.log(\"Event: session_request\", payload);\n      setPeerMeta(payload.params[0].peerMeta);\n\n      connector.approveSession({\n        accounts: [address],\n        chainId,\n      });\n\n      // console.log(\"n-connector.connected: \", connector.connected);\n      if (connector.connected) {\n        setIsConnected(true);\n        console.log(\"Session successfully connected.\");\n\n        console.log(\"WALLET CONNECTED !!! \", connector.connected);\n\n        let walletConnect = localStorage.getItem(\"walletconnect\");\n        setWalletConnectSession_wallet(JSON.parse(walletConnect));\n        setWalletLoading(false);\n      }\n    });\n    //\n    connector.on(\"call_request\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      console.log(\"Event: call_request\", payload);\n      parseCallRequest(payload);\n    });\n    //\n\n    connector.on(\"disconnect\", (error, payload) => {\n      console.log(\"disconnected \");\n      console.log(\"Event: disconnect\", payload);\n\n      // remove wallet connect instance\n      localStorage.removeItem(\"walletconnect\");\n      setWalletConnectSession_wallet(\"\");\n\n      resetConnection();\n\n      setTimeout(() => {\n        window.location.reload(true);\n      }, 500);\n\n      if (error) {\n        throw error;\n      }\n    });\n  };\n\n  const parseCallRequest = payload => {\n    const callData = payload.params[0];\n\n    setValue(callData.value);\n    setTo(callData.to);\n    setData(callData.data ? callData.data : \"0x\");\n  };\n  //\n\n  const decodeFunctionData = async () => {\n    try {\n      // console.log(\"n-decodeFunctionData: \", to, data);\n      const parsedTransactionData = await parseExternalContractTransaction(to, data);\n      // console.log(\"n-parsedTransactionData: \", parsedTransactionData);\n      setParsedTransactionData(parsedTransactionData);\n      setIsModalVisible(true);\n    } catch (error) {\n      console.log(error);\n      setParsedTransactionData(null);\n    }\n  };\n  //\n\n  const killSession = (isReload = true) => {\n    try {\n      console.log(\"ACTION\", \"killSession\");\n\n      // remove WC of multisig\n      localStorage.removeItem(\"walletConnectUri\");\n      console.log(\"the connection was reset\");\n\n      if (isReload) {\n        if (isConnected) {\n          //note: check disconnect event\n          walletConnect_wallet.killSession();\n        }\n\n        // setIsConnected(false);\n        // localStorage.removeItem(\"walletconnect\");\n\n        // console.log(\"n-walletConnectSession_main: \", walletConnectSession_main);\n        // localStorage.setItem(\"walletconnect\", JSON.stringify(walletConnectSession_main));\n\n        // setTimeout(() => {\n        //   // window.location.reload(true);\n        // }, 500);\n      }\n\n      // resetConnection();\n    } catch (error) {\n      console.log(\"n-error:kill session \", error);\n    }\n  };\n  //\n\n  const hideModal = () => setIsModalVisible(false);\n\n  const handleOk = () => {\n    loadTransactionData({\n      data,\n      to,\n      value,\n    });\n  };\n\n  const resetConnection = () => {\n    console.log(\"n-resetConnection: RESET EVERYTHING \");\n    setWalletConnectUri(\"\");\n    setIsConnected(false);\n    setWalletConnectSession_wallet(\"\");\n    setPeerMeta(\"\");\n    setData();\n    setValue();\n    setTo();\n  };\n\n  return (\n    <>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                setScan(false);\n                setWalletConnectUri(newValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"flex flex-col items-center justify-center \">\n        <div>\n          <img src=\"walletconnect-logo.svg\" alt=\"walletConnect\" style={{ height: 50, width: 50 }} />\n        </div>\n        <div className=\"m-2\">\n          <Input.Group compact>\n            <Input\n              style={{ width: \"calc(100% - 31px)\", marginBottom: 20 }}\n              placeholder=\"Paste WalletConnect URI\"\n              disabled={isConnected}\n              value={walletConnectUri}\n              // onChange={e => setWalletConnectUri(e.target.value)}\n              onChange={e => onWalletConnect(e.target.value)}\n            />\n            <Button\n              disabled={isConnected}\n              onClick={() => setScan(!scan)}\n              icon={\n                <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n                  <QrcodeOutlined style={{ fontSize: 18 }} />\n                </Badge>\n              }\n            />\n          </Input.Group>\n        </div>\n      </div>\n      <div>{walletLoading && <Spin />}</div>\n      <div>\n        {isConnected && (\n          <>\n            {peerMeta !== undefined && (\n              <>\n                <div className=\"flex justify-center items-start w-full \">\n                  <img src={peerMeta.icons[0]} style={{ width: 30, height: 25 }} />\n                  <div>\n                    <p>\n                      <a href={peerMeta.url} target=\"_blank\" rel=\"noreferrer\">\n                        {peerMeta.url}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n                <Button onClick={killSession} type=\"primary\">\n                  Disconnect\n                </Button>\n              </>\n            )}\n          </>\n        )}\n      </div>\n      {/* {!isConnected && (\n        <div\n          style={{ cursor: \"pointer\" }}\n          onClick={() => {\n            // localStorage.removeItem(\"walletconnect\");\n            // setTimeout(() => {\n            //   window.location.reload(true);\n            // }, 500);\n          }}\n        >\n          🗑\n        </div>\n      )} */}\n\n      {isModalVisible && (\n        <TransactionDetailsModal\n          visible={isModalVisible}\n          txnInfo={parsedTransactionData}\n          handleOk={handleOk}\n          handleCancel={hideModal}\n          showFooter={true}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          to={to}\n          value={value}\n          type=\"Wallect Connect\"\n        />\n      )}\n    </>\n  );\n};\nexport default WalletConnectInput;\n","export const getSDKVersion = () => {\n  return \"7.6.0\"; // IMPORTANT: needs to be >= 1.0.0\n};\n\n// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, \"0\");\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join(\"\");\n};\n\nexport const generateRequestId = (): string => {\n  if (typeof window !== \"undefined\") {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n","import {\n  ErrorResponse,\n  SDKRequestData,\n  RequestId,\n  SuccessResponse,\n  MethodToResponse,\n  Methods,\n} from \"./types\";\nimport { getSDKVersion, generateRequestId } from \"./utils\";\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(\n    method: M,\n    params: P\n  ): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (\n    id: RequestId,\n    data: MethodToResponse[Methods],\n    version: string\n  ): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (\n    id: RequestId,\n    error: string,\n    version: string\n  ): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","import React, { createContext, useContext, useState, useEffect, useRef, useCallback } from \"react\";\nimport { providers, utils } from \"ethers\";\nimport { useAppCommunicator } from \"../helpers/communicator\";\nimport {\n  InterfaceMessageIds,\n  InterfaceMessageProps,\n  Methods,\n  MethodToResponse,\n  RequestId,\n  RPCPayload,\n  SignMessageParams,\n  SignTypedMessageParams,\n  Transaction,\n} from \"../helpers/types\";\n\ninterface TransactionWithId extends Transaction {\n  id: number;\n}\n\ntype SafeInjectContextType = {\n  address: string | undefined;\n  appUrl: string | undefined;\n  rpcUrl: string | undefined;\n  iframeRef: React.RefObject<HTMLIFrameElement> | null;\n  newTx: TransactionWithId | undefined;\n  setAddress: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setAppUrl: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setRpcUrl: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setNewTx: React.Dispatch<React.SetStateAction<any>>;\n};\n\nexport const SafeInjectContext = createContext<SafeInjectContextType>({\n  address: undefined,\n  appUrl: undefined,\n  rpcUrl: undefined,\n  iframeRef: null,\n  newTx: undefined,\n  setAddress: () => {},\n  setAppUrl: () => {},\n  setRpcUrl: () => {},\n  setNewTx: () => {},\n});\n\nexport const SafeInjectProvider: React.FunctionComponent<{ children: React.ReactNode }> = ({ children }) => {\n  const [address, setAddress] = useState<string>();\n  const [appUrl, setAppUrl] = useState<string>();\n  const [rpcUrl, setRpcUrl] = useState<string>();\n  const [provider, setProvider] = useState<providers.StaticJsonRpcProvider>();\n  const [newTx, setNewTx] = useState<TransactionWithId>();\n\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const communicator = useAppCommunicator(iframeRef);\n\n  const sendMessageToIframe = useCallback(\n    function <T extends InterfaceMessageIds>(message: InterfaceMessageProps<T>, requestId?: RequestId) {\n      const requestWithMessage = {\n        ...message,\n        requestId: requestId || Math.trunc(window.performance.now()),\n        version: \"0.4.2\",\n      };\n\n      if (iframeRef) {\n        iframeRef.current?.contentWindow?.postMessage(requestWithMessage, appUrl!);\n      }\n    },\n    [iframeRef, appUrl],\n  );\n\n  useEffect(() => {\n    if (!rpcUrl) return;\n\n    setProvider(new providers.StaticJsonRpcProvider(rpcUrl));\n  }, [rpcUrl]);\n\n  useEffect(() => {\n    if (!provider) return;\n\n    communicator?.on(Methods.getSafeInfo, async () => ({\n      safeAddress: address,\n      chainId: (await provider.getNetwork()).chainId,\n      owners: [],\n      threshold: 1,\n      isReadOnly: false,\n    }));\n\n    communicator?.on(Methods.getEnvironmentInfo, async () => ({\n      origin: document.location.origin,\n    }));\n\n    communicator?.on(Methods.rpcCall, async msg => {\n      const params = msg.data.params as RPCPayload;\n\n      try {\n        const response = (await provider.send(params.call, params.params)) as MethodToResponse[\"rpcCall\"];\n        return response;\n      } catch (err) {\n        return err;\n      }\n    });\n\n    communicator?.on(Methods.sendTransactions, msg => {\n      // @ts-expect-error explore ways to fix this\n      const transactions = (msg.data.params.txs as Transaction[]).map(({ to, ...rest }) => ({\n        to: utils.getAddress(to), // checksummed\n        ...rest,\n      }));\n      setNewTx({\n        id: parseInt(msg.data.id.toString()),\n        ...transactions[0],\n      });\n      // openConfirmationModal(transactions, msg.data.params.params, msg.data.id)\n    });\n\n    communicator?.on(Methods.signMessage, async msg => {\n      const { message } = msg.data.params as SignMessageParams;\n\n      // openSignMessageModal(message, msg.data.id, Methods.signMessage)\n    });\n\n    communicator?.on(Methods.signTypedMessage, async msg => {\n      const { typedData } = msg.data.params as SignTypedMessageParams;\n\n      // openSignMessageModal(typedData, msg.data.id, Methods.signTypedMessage)\n    });\n  }, [communicator, address, provider]);\n\n  return (\n    <SafeInjectContext.Provider\n      value={{\n        address,\n        appUrl,\n        rpcUrl,\n        iframeRef,\n        newTx,\n        setNewTx,\n        setAddress,\n        setAppUrl,\n        setRpcUrl,\n      }}\n    >\n      {children}\n    </SafeInjectContext.Provider>\n  );\n};\n\nexport const useSafeInject = () => useContext(SafeInjectContext);\n","import { useState, useEffect } from \"react\";\nimport { Input, Button, Spin, Row, Col, Modal } from \"antd\";\nimport axios from \"axios\";\nimport { useSafeInject } from \"../contexts/SafeInjectContext\";\nimport TransactionDetailsModal from \"./MultiSig/TransactionDetailsModal\";\nimport { NETWORKS } from \"../constants\";\nimport { parseExternalContractTransaction } from \"../helpers\";\n\nexport default function IFrame({ address, loadTransactionData, mainnetProvider, price, isTxLoaded }) {\n  const cachedNetwork = window.localStorage.getItem(\"network\");\n  let targetNetwork = NETWORKS[cachedNetwork || \"mainnet\"];\n\n  const { setAddress, appUrl, setAppUrl, setRpcUrl, iframeRef, newTx, setNewTx } = useSafeInject();\n\n  const [isIFrameLoading, setIsIFrameLoading] = useState(false);\n  const [inputAppUrl, setInputAppUrl] = useState();\n  const [tx, setTx] = useState();\n  const [parsedTransactionData, setParsedTransactionData] = useState();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isSafeDappsOpen, setIsSafeDappsOpen] = useState(false);\n  const [safeDapps, setSafeDapps] = useState({});\n  const [searchSafeDapp, setSearchSafeDapp] = useState();\n  const [filteredSafeDapps, setFilteredSafeDapps] = useState();\n  const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    setAddress(address);\n    setRpcUrl(targetNetwork.rpcUrl);\n  }, []);\n\n  useEffect(() => {\n    const fetchSafeDapps = async chainId => {\n      const response = await axios.get(`https://safe-client.gnosis.io/v1/chains/${chainId}/safe-apps`);\n      setSafeDapps(dapps => ({\n        ...dapps,\n        [chainId]: response.data.filter(d => ![29, 11].includes(d.id)), // Filter out Transaction Builder and WalletConnect\n      }));\n    };\n\n    if (isSafeDappsOpen && !safeDapps[targetNetwork.chainId]) {\n      fetchSafeDapps(targetNetwork.chainId);\n    }\n  }, [isSafeDappsOpen, safeDapps, targetNetwork]);\n\n  useEffect(() => {\n    if (safeDapps[targetNetwork.chainId]) {\n      setFilteredSafeDapps(\n        safeDapps[targetNetwork.chainId].filter(dapp => {\n          if (!searchSafeDapp) return true;\n\n          return (\n            dapp.name.toLowerCase().indexOf(searchSafeDapp.toLocaleLowerCase()) !== -1 ||\n            dapp.url.toLowerCase().indexOf(searchSafeDapp.toLocaleLowerCase()) !== -1\n          );\n        }),\n      );\n    } else {\n      setFilteredSafeDapps(undefined);\n    }\n  }, [safeDapps, targetNetwork, searchSafeDapp]);\n\n  useEffect(() => {\n    if (newTx) {\n      setTx(newTx);\n    }\n  }, [newTx]);\n\n  useEffect(() => {\n    if (tx) {\n      decodeFunctionData();\n    }\n  }, [tx]);\n\n  useEffect(() => {\n    if (tx) {\n      decodeFunctionData();\n    }\n  }, [tx]);\n\n  useEffect(() => {\n    if (isTxLoaded) {\n      hideModal();\n    }\n  }, [isTxLoaded]);\n\n  const decodeFunctionData = async () => {\n    try {\n      const parsedTransactionData = await parseExternalContractTransaction(tx.to, tx.data);\n      setParsedTransactionData(parsedTransactionData);\n      setIsModalVisible(true);\n    } catch (error) {\n      console.log(error);\n      setParsedTransactionData(null);\n    }\n  };\n\n  const hideModal = () => setIsModalVisible(false);\n  const onRefresh = () => setRefresh(!refresh);\n\n  const handleOk = () => {\n    loadTransactionData({\n      to: tx.to,\n      value: tx.value,\n      data: tx.data,\n      isIframe: true,\n    });\n    setNewTx(false);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <Button onClick={() => setIsSafeDappsOpen(true)}>Select from supported dapps</Button>\n      <Modal\n        title=\"Select a dapp\"\n        visible={isSafeDappsOpen}\n        onCancel={() => setIsSafeDappsOpen(false)}\n        footer={null}\n        destroyOnClose\n        closable\n        maskClosable\n      >\n        <div\n          style={{\n            minHeight: \"30rem\",\n            maxHeight: \"30rem\",\n            overflow: \"scroll\",\n            overflowX: \"auto\",\n            overflowY: \"auto\",\n          }}\n        >\n          {!safeDapps ||\n            (!safeDapps[targetNetwork.chainId] && (\n              <div>\n                <Spin />\n              </div>\n            ))}\n          <div\n            style={{\n              paddingBottom: \"2rem\",\n              paddingLeft: \"2rem\",\n              paddingRight: \"2rem\",\n            }}\n          >\n            {safeDapps && safeDapps[targetNetwork.chainId] && (\n              <div\n                style={{\n                  paddingBottom: \"1.5rem\",\n                }}\n              >\n                <Input\n                  placeholder=\"search 🔎\"\n                  style={{ maxWidth: \"30rem\" }}\n                  value={searchSafeDapp}\n                  onChange={e => setSearchSafeDapp(e.target.value)}\n                />\n              </div>\n            )}\n            <Row gutter={[16, 16]}>\n              {filteredSafeDapps &&\n                filteredSafeDapps.map((dapp, i) => (\n                  <Col\n                    key={i}\n                    className=\"gutter-row\"\n                    span={8}\n                    style={{\n                      maxWidth: \"140px\",\n                    }}\n                  >\n                    <Button\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        padding: \"1rem\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        borderRadius: \"10px\",\n                      }}\n                      onClick={() => {\n                        setAppUrl(dapp.url);\n                        setInputAppUrl(dapp.url);\n                        setIsSafeDappsOpen(false);\n                      }}\n                    >\n                      <img\n                        src={dapp.iconUrl}\n                        alt={dapp.name}\n                        style={{\n                          width: \"2rem\",\n                          borderRadius: \"full\",\n                        }}\n                      />\n                      <div\n                        style={{\n                          marginTop: \"0.5rem\",\n                          textAlign: \"center\",\n                          width: \"6rem\",\n                          overflow: \"hidden\",\n                        }}\n                      >\n                        {dapp.name}\n                      </div>\n                    </Button>\n                  </Col>\n                ))}\n            </Row>\n          </div>\n        </div>\n      </Modal>\n      <Input\n        placeholder=\"custom dapp URL\"\n        style={{\n          marginTop: 16,\n          minWidth: \"18rem\",\n          maxWidth: \"20rem\",\n        }}\n        autoFocus={true}\n        value={inputAppUrl}\n        onChange={e => setInputAppUrl(e.target.value)}\n      />\n      <Button\n        type={\"primary\"}\n        style={{\n          marginTop: \"1rem\",\n          maxWidth: \"8rem\",\n        }}\n        onClick={() => {\n          setAppUrl(inputAppUrl);\n          setIsIFrameLoading(true);\n        }}\n      >\n        {isIFrameLoading ? <Spin /> : \"Load\"}\n      </Button>\n      {appUrl && (\n        <div className=\"flex flex-col items-end\">\n          <Button className=\"mt-2\" onClick={onRefresh}>\n            refresh\n          </Button>\n          <iframe\n            key={refresh}\n            title=\"app\"\n            src={appUrl}\n            width=\"1200rem\"\n            height=\"900rem\"\n            style={{\n              marginTop: \"1rem\",\n            }}\n            ref={iframeRef}\n            onLoad={() => setIsIFrameLoading(false)}\n          />\n        </div>\n      )}\n      {isModalVisible && (\n        <TransactionDetailsModal\n          visible={isModalVisible}\n          txnInfo={parsedTransactionData}\n          handleOk={handleOk}\n          handleCancel={hideModal}\n          showFooter={true}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          to={tx.to}\n          value={tx.value}\n          type=\"IFrame\"\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, List } from \"antd\";\n\nimport { Address, Balance, Blockie } from \"..\";\nimport TransactionDetailsModal from \"./TransactionDetailsModal\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { parseExternalContractTransaction } from \"../../helpers\";\n\nconst axios = require(\"axios\");\n\nexport default function TransactionListItem({\n  item,\n  mainnetProvider,\n  blockExplorer,\n  price,\n  readContracts,\n  contractName,\n  children,\n}) {\n  //console.log(\"coming in item:\", item);\n  const transactionHash = item?.transactionHash;\n\n  item = item.args ? item.args : item;\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [txnData, setTxnData] = useState({});\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  useEffect(() => {\n    if (!txnData[item.hash]) {\n      try {\n        const parsedData = item.data != \"0x\" ? readContracts[contractName].interface.parseTransaction(item) : null;\n        //console.log(\"SET\",JSON.stringify(item),JSON.stringify(parsedData))\n        const newData = {};\n        newData[item.hash] = parsedData;\n        setTxnData({ ...txnData, ...newData });\n      } catch (argumentError) {\n        const getParsedTransaction = async () => {\n          const parsedTransaction = await parseExternalContractTransaction(item.to, item.data);\n          const newData = {};\n          newData[item.hash] = parsedTransaction;\n          setTxnData({ ...txnData, ...newData });\n        };\n        getParsedTransaction();\n      }\n    }\n  }, [item]);\n\n  const txDisplay = () => {\n    const toSelf = item?.to == readContracts[contractName].address;\n\n    if (toSelf && txnData[item.hash]?.functionFragment?.name == \"addSigner\") {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Add Signer</span>\n          {ethers.utils.isAddress(txnData[item.hash]?.args[0]) && (\n            <Address\n              address={txnData[item.hash]?.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <span style={{ fontSize: 16 }}>with threshold {txnData[item.hash]?.args[1]?.toNumber()}</span>\n          <>{children}</>\n        </>\n      );\n    } else if (toSelf && txnData[item.hash]?.functionFragment?.name == \"removeSigner\") {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Remove Signer</span>\n          {ethers.utils.isAddress(txnData[item.hash]?.args[0]) && (\n            <Address\n              address={txnData[item.hash]?.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <span style={{ fontSize: 16 }}>with threshold {txnData[item.hash]?.args[1]?.toNumber()}</span>\n          <>{children}</>\n        </>\n      );\n    } else if (!txnData[item.hash]?.functionFragment?.name) {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Transfer</span>\n          <Balance\n            balance={item.value ? item.value : parseEther(\"\" + parseFloat(item.amount).toFixed(12))}\n            dollarMultiplier={price}\n          />\n          to\n          <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={16} />\n          <>{children}</>\n        </>\n      );\n    } else if (txnData[item.hash]?.signature != \"\") {\n      //console.log(\"CALL\",txnData)\n\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Call</span>\n          <span style={{ fontSize: 16 }}>\n            {txnData[item.hash]?.signature}\n            <Button style={{ margin: 4 }} disabled={!txnData[item.hash]} onClick={showModal}>\n              <EllipsisOutlined />\n            </Button>\n          </span>\n          <span style={{ fontSize: 16 }}>on</span>\n          <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={16} />\n          <>{children}</>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <div>\n            <i>Unknown transaction type...If you are reading this please screenshot and send to @austingriffith</i>\n          </div>\n          {ethers.utils.isAddress(txnData?.args[0]) && (\n            <Address\n              address={txnData.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <Balance\n            balance={item.value ? item.value : parseEther(\"\" + parseFloat(item.amount).toFixed(12))}\n            dollarMultiplier={price}\n          />\n          <>{children}</>\n          <Button disabled={!txnData[item.hash]} onClick={showModal}>\n            <EllipsisOutlined />\n          </Button>\n          <div\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              display: \"flex\",\n              justifyContent: \"space-evenly\",\n              width: \"100%\",\n            }}\n          >\n            <p>\n              <b>Event Name :&nbsp;</b>\n              {txnData ? txnData[item.hash].functionFragment?.name : \"Transfer Funds\"}&nbsp;\n            </p>\n            <p>\n              <b>To:&nbsp;</b>\n              <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={12} />\n            </p>\n          </div>\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      <TransactionDetailsModal\n        visible={isModalVisible}\n        txnInfo={txnData[item.hash]}\n        handleOk={() => setIsModalVisible(false)}\n        handleCancel={() => setIsModalVisible(false)}\n        mainnetProvider={mainnetProvider}\n        price={price}\n      />\n      {\n        <List.Item style={{ border: 0 }} key={transactionHash && transactionHash} className=\"m-5 \">\n          <>\n            <a\n              href={blockExplorer + \"tx/\" + transactionHash}\n              disabled={transactionHash === undefined}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <b style={{ padding: 16 }}>#{typeof item.nonce === \"number\" ? item.nonce : item.nonce.toNumber()}</b>\n            </a>\n            {txDisplay()}\n            <Blockie size={4} scale={8} address={transactionHash === undefined ? item.hash : transactionHash} />\n          </>\n        </List.Item>\n      }\n    </>\n  );\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nconst useEventListener = (contract, contractName, eventName, provider) => {\n  const [eventData, setEventData] = useState([]);\n\n  const loadEvents = async () => {\n    const filter = contract[contractName].filters[eventName]();\n    const queryEvents = await contract[contractName].queryFilter(filter);\n    setEventData(queryEvents);\n  };\n\n  // watch events and load recursively (we can use in future to update tx list)\n  //   const loadEvents = () => {\n  //     contract[contractName].on(eventName, function () {\n  //       if (arguments.length > 0) {\n  //         const event = arguments[arguments.length - 1];\n  //         console.log(`n-🔴 => event`, event);\n  //         setEventData(preData => [...preData, event]);\n  //       }\n  //     });\n  //   };\n\n  useEffect(() => {\n    if (contract && contract[contractName] !== undefined) {\n      loadEvents();\n    }\n  }, [contractName, contract, eventName]);\n  return eventData;\n};\n\nexport default useEventListener;\n","import React, { useCallback, useEffect } from \"react\";\nimport { Select, List, Spin, Collapse } from \"antd\";\nimport axios from \"axios\";\n\n// import { useEventListener } from \"eth-hooks/events/\";\n\nimport { Address } from \"..\";\nimport { useState } from \"react\";\nimport useEventListener from \"../../hooks/useEventListener\";\n\nconst { Panel } = Collapse;\n\nfunction Owners({\n  // ownerEvents,\n  signaturesRequired,\n  mainnetProvider,\n  blockExplorer,\n  // address,\n  // poolServerUrl,\n  // contractAddress,\n  contractName,\n  localProvider,\n  currentMultiSigAddress,\n  reDeployWallet,\n  contractNameForEvent,\n  readContracts,\n}) {\n  const [ownerEvents, setOwnerEvents] = useState([]);\n\n  // const allOwnerEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"Owner\",\n  //   localProvider,\n  //   1,\n  // );\n\n  const allOwnerEvents = useEventListener(\n    currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n    contractNameForEvent,\n    \"Owner\",\n    localProvider,\n  );\n\n  const owners = new Set();\n  const prevOwners = new Set();\n  ownerEvents.forEach(ownerEvent => {\n    if (ownerEvent.args.added) {\n      owners.add(ownerEvent.args.owner);\n      prevOwners.delete(ownerEvent.args.owner);\n    } else {\n      prevOwners.add(ownerEvent.args.owner);\n      owners.delete(ownerEvent.args.owner);\n    }\n  });\n  // const updateOwners = async owners => {\n  //   let reqData = {\n  //     owners: [...owners],\n  //   };\n  //   const res = await axios.post(poolServerUrl + `updateOwners/${address}/${contractAddress}`, reqData);\n  //   console.log(\"update owner response\", res.data);\n  // };\n\n  // useEffect(() => {\n  //   if (signaturesRequired && owners.size > 0) {\n  //     //  disabled for updating owners at backend as it is automatically updated\n  //     // updateOwners(owners);\n  //   }\n  // }, [owners.size, signaturesRequired]);\n\n  const loadOwnersEvents = async () => {\n    setOwnerEvents(allOwnerEvents.filter(contractEvent => contractEvent.address === currentMultiSigAddress));\n  };\n\n  useEffect(() => {\n    if (allOwnerEvents.length > 0) {\n      loadOwnersEvents();\n    }\n  }, [allOwnerEvents.length]);\n\n  return (\n    <div>\n      <h2 style={{ marginTop: 32 }}>\n        Signatures Required:{\" \"}\n        {/* {signaturesRequired && ownerEvents.length !== 0 ? signaturesRequired.toNumber() : <Spin></Spin>} */}\n        {signaturesRequired ? signaturesRequired.toNumber() : <Spin></Spin>}\n      </h2>\n      <List\n        header={<h2>Owners</h2>}\n        style={{ maxWidth: 400, margin: \"auto\", marginTop: 32 }}\n        bordered\n        dataSource={[...owners]}\n        loading={ownerEvents.length === 0}\n        renderItem={ownerAddress => {\n          return (\n            <List.Item key={\"owner_\" + ownerAddress}>\n              <Address\n                address={ownerAddress}\n                ensProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                fontSize={20}\n              />\n            </List.Item>\n          );\n        }}\n      />\n\n      <Collapse\n        collapsible={prevOwners.size == 0 ? \"disabled\" : \"\"}\n        style={{ maxWidth: 400, margin: \"auto\", marginTop: 10 }}\n      >\n        <Panel header=\"Previous Owners\" key=\"1\">\n          <List\n            dataSource={[...prevOwners]}\n            renderItem={prevOwnerAddress => {\n              return (\n                <List.Item key={\"owner_\" + prevOwnerAddress}>\n                  <Address\n                    address={prevOwnerAddress}\n                    ensProvider={mainnetProvider}\n                    blockExplorer={blockExplorer}\n                    fontSize={20}\n                  />\n                </List.Item>\n              );\n            }}\n          />\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\nexport default Owners;\n","import React from \"react\";\nimport { Spin } from 'antd';\nimport { CheckCircleOutlined, StopOutlined } from '@ant-design/icons';\n\nexport default function CreateModalSentOverlay(props) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        zIndex: 10,\n        top: 55,\n        bottom: 53,\n        left: 0,\n        width: '100%',\n        pointerEvents: 'none',\n        backdropFilter: 'blur(4px)',\n\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: '2rem',\n      }}>\n      {props.txError && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.errorText}</div>\n          <StopOutlined style={{ color: 'red', fontSize: '4rem' }} />\n        </>\n      )}\n      {props.txSuccess && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.successText}</div>\n          <CheckCircleOutlined style={{ color: 'green', fontSize: '4rem' }} />\n        </>\n      )}\n      {!props.txError && !props.txSuccess && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.pendingText}</div>\n          <div style={{ height: '4rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <Spin size=\"large\" style={{ transform: 'scale(1.5)' }} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};","import React, { useState, useEffect, useMemo } from \"react\";\nimport { Button, Modal, InputNumber, Alert } from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { ethers } from \"ethers\";\nimport { Input } from \"antd\";\nimport axios from \"axios\";\n\nimport { AddressInput, EtherInput, Address } from \"..\";\nimport CreateModalSentOverlay from \"./CreateModalSentOverlay\";\nimport { useLocalStorage } from \"../../hooks\";\n\nfunction CreateMultiSigModal({\n  price,\n  selectedChainId,\n  mainnetProvider,\n  address,\n  tx,\n  writeContracts,\n  contractName,\n  isCreateModalVisible,\n  setIsCreateModalVisible,\n  poolServerUrl,\n  reDeployWallet,\n  getUserWallets,\n  setReDeployWallet,\n  currentNetworkName,\n  isFactoryDeployed,\n}) {\n  const [deployType, setDeployType] = useState(\"CREATE\");\n  const [pendingCreate, setPendingCreate] = useState(false);\n  const [txSent, setTxSent] = useState(false);\n  const [txError, setTxError] = useState(false);\n  const [txSuccess, setTxSuccess] = useState(false);\n\n  // const [signaturesRequired, setSignaturesRequired] = useState(undefined);\n  const [signaturesRequired, setSignaturesRequired] = useLocalStorage(\"signaturesRequired\", undefined);\n  const [amount, setAmount] = useState(\"0\");\n  // const [owners, setOwners] = useState([\"\"]);\n  const [owners, setOwners] = useLocalStorage(\"owners\", []);\n  // const [walletName, setWalletName] = useState(\"\");\n  const [walletName, setWalletName] = useLocalStorage(\"walletName\");\n  const [preComputedAddress, setPreComputedAddress] = useState(\"\");\n  const [isWalletExist, setIsWalletExist] = useState(false);\n\n  useEffect(() => {\n    if (isCreateModalVisible === false) {\n      return;\n    }\n    if (isCreateModalVisible && address && owners && owners.length > 0) {\n      owners[0] = address;\n      setOwners([...new Set([...owners])]);\n      return;\n    }\n\n    if (isCreateModalVisible && address && owners && owners.length === 0) {\n      setOwners([...new Set([address])]);\n      return;\n    }\n  }, [address, isCreateModalVisible]);\n\n  const showCreateModal = async deployType => {\n    if (deployType === \"CREATE\") {\n      setDeployType(\"CREATE\");\n      setTimeout(() => {\n        setIsCreateModalVisible(true);\n      }, 100);\n    }\n\n    if (deployType === \"RE_DEPLOY\") {\n      // on redploy get previous data in states\n      let prevSignaturesRequired = reDeployWallet ? reDeployWallet[\"signaturesRequired\"] : 0;\n      let prevOwners = reDeployWallet ? reDeployWallet[\"owners\"] : [];\n\n      let prevWalletName = reDeployWallet[\"walletName\"];\n\n      let computed_wallet_address = await writeContracts[contractName].computedAddress(prevWalletName);\n\n      setDeployType(\"RE_DEPLOY\");\n      setSignaturesRequired(prevSignaturesRequired);\n      setOwners([...new Set([...prevOwners, address])]);\n      setPreComputedAddress(computed_wallet_address);\n\n      setTimeout(() => {\n        setIsCreateModalVisible(true);\n      }, 100);\n    }\n  };\n\n  const handleCancel = () => {\n    // setWalletName(\"\");\n    setIsCreateModalVisible(false);\n    // getUserWallets();\n    // setIsWalletExist(false);\n  };\n\n  const addOwnerField = () => {\n    const newOwners = [...owners, \"\"];\n    setOwners(newOwners);\n  };\n\n  const removeOwnerField = index => {\n    const newOwners = [...owners];\n    newOwners.splice(index, 1);\n    setOwners(newOwners);\n  };\n\n  const updateOwner = (value, index) => {\n    // for a single addresss\n    if (value.length <= 42) {\n      const newOwners = [...owners];\n      newOwners[index] = value;\n      setOwners(newOwners);\n    }\n\n    // if value is multiple addresses with comma\n    if (value.length > 42) {\n      addMultipleAddress(value);\n    }\n  };\n\n  const addMultipleAddress = value => {\n    // add basic validation a address should contains 0x with length of 42 chars\n    const validateAddress = address => address.includes(\"0x\") && address.length === 42;\n\n    const addresses = value.trim().split(\",\");\n    let uniqueAddresses = [...new Set([...addresses])];\n\n    uniqueAddresses = uniqueAddresses.filter(validateAddress);\n\n    let finalUniqueAddresses = [...new Set([...owners.filter(validateAddress), ...uniqueAddresses])];\n    setOwners(finalUniqueAddresses);\n  };\n\n  const validateFields = () => {\n    let valid = true;\n\n    if (signaturesRequired > owners.length) {\n      console.log(\"Validation error: signaturesRequired is greather than number of owners.\");\n      valid = false;\n    }\n\n    owners.forEach((owner, index) => {\n      let err;\n      if (!owner) {\n        err = \"Required Input\";\n      } else if (owners.slice(0, index).some(o => o === owner)) {\n        err = \"Duplicate Owner\";\n      } else if (!ethers.utils.isAddress(owner)) {\n        err = \"Bad format\";\n      }\n\n      if (err) {\n        console.log(\"Owners field error: \", err);\n        valid = false;\n      }\n    });\n\n    return valid;\n  };\n\n  const resetState = () => {\n    setWalletName(\"\");\n    setPendingCreate(false);\n    setTxSent(false);\n    setTxError(false);\n    setTxSuccess(false);\n    setOwners([\"\"]);\n    setAmount(\"0\");\n    setSignaturesRequired(false);\n    setIsWalletExist(false);\n    setPreComputedAddress(\"\");\n  };\n\n  const handleSubmit = () => {\n    try {\n      setPendingCreate(true);\n\n      if (!validateFields()) {\n        setPendingCreate(false);\n        throw \"Field validation failed.\";\n      }\n      let currentWalletName = deployType === \"CREATE\" ? walletName : reDeployWallet[\"walletName\"];\n\n      tx(\n        // create 2\n        writeContracts[contractName].create2(owners, signaturesRequired, currentWalletName, {\n          value: ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(12)),\n        }),\n        async update => {\n          if (update && (update.error || update.reason)) {\n            console.log(\"tx update error!\");\n            setPendingCreate(false);\n            setTxError(true);\n          }\n\n          if (update && update.code) {\n            setPendingCreate(false);\n            setTxSent(false);\n          }\n\n          if (update && (update.status === \"confirmed\" || update.status === 1)) {\n            console.log(\"tx update confirmed!\");\n\n            let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n\n            let walletAddress = deployType === \"CREATE\" ? computed_wallet_address : reDeployWallet[\"walletAddress\"];\n\n            if (deployType === \"CREATE\") {\n              let reqData = {\n                owners,\n                signaturesRequired,\n              };\n\n              console.log(\"n-reqData: \", reqData);\n              const res = await axios.post(\n                poolServerUrl + `createWallet/${address}/${walletName}/${walletAddress}/${selectedChainId}`,\n                reqData,\n              );\n\n              let data = res.data;\n              console.log(\"create wallet res data: \", data);\n\n              setPendingCreate(false);\n              setTxSuccess(true);\n              resetState();\n            }\n\n            if (deployType === \"RE_DEPLOY\") {\n              const res = await axios.get(\n                poolServerUrl + `updateChainId/${address}/${walletAddress}/${selectedChainId}`,\n              );\n              let data = res.data;\n\n              console.log(\"update chain res data: \", data);\n              setReDeployWallet(undefined);\n              window.location.reload();\n            }\n\n            resetState();\n            await getUserWallets(true);\n          }\n        },\n      ).catch(err => {\n        setPendingCreate(false);\n        throw err;\n      });\n\n      setTxSent(true);\n    } catch (e) {\n      console.log(\"CREATE MUTLI-SIG SUBMIT FAILED: \", e);\n    }\n  };\n\n  const checkWalletExist = async () => {\n    let currentWalletName = deployType === \"CREATE\" ? walletName : reDeployWallet[\"walletName\"];\n\n    let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n\n    let isContractExists = await writeContracts[contractName].provider.getCode(computed_wallet_address);\n\n    if (isContractExists !== \"0x\") {\n      setIsWalletExist(true);\n    }\n\n    if (isContractExists === \"0x\") {\n      setIsWalletExist(false);\n    }\n  };\n\n  const onInputWalletName = async walletName => {\n    setWalletName(walletName);\n    let currentWalletName = walletName;\n\n    let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n    setPreComputedAddress(computed_wallet_address);\n  };\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={() => showCreateModal(\"CREATE\")}\n        className=\"mx-2\"\n        disabled={isFactoryDeployed === undefined}\n      >\n        Create\n      </Button>\n\n      {reDeployWallet !== undefined && (\n        <Button type=\"primary\" onClick={() => showCreateModal(\"RE_DEPLOY\")} ghost className=\"mx-2\">\n          Deploy {reDeployWallet[\"walletName\"]} to {currentNetworkName}\n        </Button>\n      )}\n\n      <Modal\n        key={address}\n        title=\"Create Multi-Sig Wallet\"\n        visible={isCreateModalVisible}\n        onCancel={handleCancel}\n        destroyOnClose\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n\n          // on create\n          deployType === \"CREATE\" && (\n            <Button\n              key=\"submit\"\n              type=\"primary\"\n              loading={pendingCreate}\n              onClick={handleSubmit}\n              disabled={isWalletExist || Boolean(walletName) === false || Boolean(signaturesRequired) === false}\n            >\n              Create\n            </Button>\n          ),\n\n          // on redeploy on new network\n          deployType === \"RE_DEPLOY\" && (\n            <Button\n              key=\"submit\"\n              type=\"primary\"\n              loading={pendingCreate}\n              onClick={handleSubmit}\n              disabled={Boolean(signaturesRequired) === false}\n            >\n              Deploy\n            </Button>\n          ),\n        ]}\n      >\n        {txSent && (\n          <CreateModalSentOverlay\n            txError={txError}\n            txSuccess={txSuccess}\n            pendingText=\"Creating Multi-Sig\"\n            successText=\"Multi-Sig Created\"\n            errorText=\"Transaction Failed\"\n          />\n        )}\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n          <Input\n            placeholder=\"Enter wallet name\"\n            // onChange={event => setWalletName(event.target.value)}\n            onChange={event => onInputWalletName(event.target.value)}\n            // value={reDeployWallet !== undefined ? reDeployWallet[\"walletName\"] : walletName}\n            value={deployType === \"RE_DEPLOY\" ? (reDeployWallet ? reDeployWallet[\"walletName\"] : \"\") : walletName}\n            disabled={deployType === \"RE_DEPLOY\"}\n            key={address}\n            onBlur={checkWalletExist}\n          />\n          {isWalletExist && <Alert message=\"Wallet name already exist choose another name !!\" type=\"error\" showIcon />}\n\n          {preComputedAddress && (\n            <>\n              <div className=\"text-xs text-gray-500\">Wallet address should be </div>\n              <Address address={preComputedAddress} />\n            </>\n          )}\n          {owners.map((owner, index) => (\n            <div key={index} style={{ display: \"flex\", gap: \"1rem\" }}>\n              <div style={{ width: \"90%\" }}>\n                <AddressInput\n                  autoFocus\n                  ensProvider={mainnetProvider}\n                  placeholder={\"Owner address\"}\n                  value={owner}\n                  onChange={val => updateOwner(val, index)}\n                />\n              </div>\n              {index > 0 && (\n                <Button style={{ padding: \"0 0.5rem\" }} danger onClick={() => removeOwnerField(index)}>\n                  <DeleteOutlined />\n                </Button>\n              )}\n            </div>\n          ))}\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\", width: \"90%\" }}>\n            <Button onClick={addOwnerField}>\n              <PlusOutlined />\n            </Button>\n          </div>\n          <div style={{ width: \"90%\" }}>\n            <InputNumber\n              style={{ width: \"100%\" }}\n              placeholder=\"Number of signatures required\"\n              value={signaturesRequired}\n              // value={\n              //   deployType === \"RE_DEPLOY\"\n              //     ? reDeployWallet\n              //       ? reDeployWallet[\"signaturesRequired\"]\n              //       : \"\"\n              //     : signaturesRequired\n              // }\n              onChange={setSignaturesRequired}\n            />\n          </div>\n          <div style={{ width: \"90%\" }}>\n            <EtherInput\n              placeholder=\"Fund your multi-sig (optional)\"\n              price={price}\n              mode=\"USD\"\n              value={amount}\n              onChange={setAmount}\n            />\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nconst checkProps = (prePorps, nextProps) => {\n  return nextProps?.address !== prePorps?.address;\n};\nexport default React.memo(CreateMultiSigModal, checkProps);\n","import React, { createContext, useEffect, useReducer } from \"react\";\n\nexport const StoreContext = createContext();\n\n// global reducer state that can override the properties with payload\nconst Reducer = (state, action) => {\n  return { ...state, ...action.payload };\n};\n\nconst StoreProvider = ({ children, store }) => {\n  const [state, dispatch] = useReducer(Reducer, store);\n\n  useEffect(() => {\n    if (store) {\n      dispatch({ payload: { ...store } });\n    }\n  }, [...Object.values(store)]);\n\n  return <StoreContext.Provider value={[state, dispatch]}>{children}</StoreContext.Provider>;\n};\n\nexport default StoreProvider;\n","import { useContext } from \"react\";\nimport { StoreContext } from \"./StoreProvider\";\n\nexport const useStore = () => useContext(StoreContext);\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, Select, Alert, Input, Spin } from \"antd\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage } from \"../../hooks\";\n\nimport { AddressInput } from \"..\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport useStore from \"../../store/useStore\";\n\nexport default function ImportMultiSigModal({\n  mainnetProvider,\n  targetNetwork,\n  networkOptions,\n  // multiSigs,\n  // setMultiSigs,\n  // setCurrentMultiSigAddress,\n  multiSigWalletABI,\n  localProvider,\n  // poolServerUrl,\n  userWallets,\n  getUserWallets,\n  isFactoryDeployed,\n  setSelectedWalletAddress,\n  walletParams,\n}) {\n  const [importedMultiSigs, setImportedMultiSigs] = useLocalStorage(\"importedMultiSigs\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [pendingImport, setPendingImport] = useState(false);\n  const [error, setError] = useState(false);\n  const [duplicateError, setDuplicateError] = useState(false);\n  const [address, setAddress] = useState();\n  const [walletName, setWalletName] = useState(\"\");\n  const [loadingWalletName, setLoadingWalletName] = useState(false);\n  const [factoryVersion, setFactoryVersion] = useState(undefined);\n  const [network, setNetwork] = useState(targetNetwork.name);\n\n  const walletAddressDebounce = useDebounce(address, 700);\n\n  const resetState = () => {\n    setError(false);\n    setAddress(\"\");\n    setNetwork(targetNetwork.name);\n    setPendingImport(false);\n    setWalletName(\"\");\n  };\n\n  const handleCancel = () => {\n    resetState();\n    setIsModalVisible(false);\n  };\n  const getFactoryVersion = async contract => {\n    try {\n      // get the factory version\n      const factoryVersion = await contract.factoryVersion();\n      return Number(factoryVersion.toString());\n    } catch (error) {\n      // console.log(\"n-error: \", error);\n      // if no factory version variable that mean its version zero\n      console.log(\"its older factory version !!\");\n      return 0;\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setPendingImport(true);\n\n      const contract = new ethers.Contract(address, multiSigWalletABI, localProvider);\n\n      let signaturesRequired = await contract.signaturesRequired();\n      signaturesRequired = signaturesRequired.toString();\n\n      let owners = [];\n\n      if (factoryVersion === 1) {\n        let ownnersCount = await contract.numberOfOwners();\n        ownnersCount = ownnersCount.toString();\n        for (let index = 0; index < +ownnersCount; index++) {\n          let owner = await contract.owners(index);\n          owners.push(owner);\n        }\n      }\n\n      let walletAddress = contract.address;\n\n      let importWalletData = {\n        walletName,\n        walletAddress,\n        chainIds: [targetNetwork.chainId],\n        signaturesRequired: +signaturesRequired,\n        owners,\n      };\n\n      let newImportedMultiSigs = importedMultiSigs || {};\n      (newImportedMultiSigs[network] = newImportedMultiSigs[network] || []).push(importWalletData);\n      newImportedMultiSigs[network] = [...new Set(newImportedMultiSigs[network])];\n      setImportedMultiSigs(newImportedMultiSigs);\n\n      await getUserWallets(true);\n\n      resetState();\n      setIsModalVisible(false);\n      setSelectedWalletAddress(walletAddress);\n      window.location.reload();\n    } catch (e) {\n      console.log(\"n-Import error:\", e);\n      setError(true);\n      setPendingImport(false);\n    }\n  };\n\n  const checkDuplicateWallet = address => {\n    let isExists = userWallets.find(data => data.walletAddress === address);\n    if (isExists) {\n      setDuplicateError(true);\n    }\n  };\n\n  const onEnterWalletAddress = async address => {\n    try {\n      if (ethers.utils.isAddress(address)) {\n        setError(false);\n        setLoadingWalletName(true);\n        const contract = new ethers.Contract(address, multiSigWalletABI, localProvider);\n\n        let factoryVersion = await getFactoryVersion(contract);\n        setFactoryVersion(factoryVersion);\n\n        if (factoryVersion === 1) {\n          const walletName = await contract.name();\n          setWalletName(walletName);\n        }\n\n        setLoadingWalletName(false);\n        checkDuplicateWallet(address);\n      } else {\n        setWalletName(\"\");\n        setError(true);\n      }\n    } catch (error) {\n      setWalletName(\"\");\n      setLoadingWalletName(false);\n      setError(true);\n    }\n  };\n\n  const onEnterWalletName = async event => {\n    setWalletName(event.target.value);\n  };\n\n  const importURLWallet = async () => {\n    if (walletParams && userWallets) {\n      let isExists = userWallets.find(data => data.walletAddress === address);\n\n      setIsModalVisible(isExists === undefined);\n      setAddress(walletParams.walletAddress);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddressDebounce) {\n      onEnterWalletAddress(walletAddressDebounce);\n    }\n  }, [walletAddressDebounce]);\n\n  useEffect(() => {\n    importURLWallet();\n  }, [walletParams, userWallets]);\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        ghost\n        onClick={() => setIsModalVisible(true)}\n        disabled={isFactoryDeployed === undefined || walletParams !== undefined}\n      >\n        Import\n      </Button>\n      <Modal\n        title=\"Import Multisig\"\n        visible={isModalVisible}\n        closable={walletParams === undefined}\n        // onCancel={handleCancel}\n\n        destroyOnClose\n        footer={[\n          <Button key=\"back\" onClick={handleCancel} disabled={walletParams !== undefined}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!address || !network || error || walletName === \"\" || duplicateError}\n            loading={pendingImport}\n            onClick={handleSubmit}\n          >\n            Import\n          </Button>,\n        ]}\n      >\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n          <AddressInput\n            autoFocus\n            ensProvider={mainnetProvider}\n            placeholder={\"Multisig address\"}\n            value={address}\n            onChange={setAddress}\n          />\n          <Input\n            placeholder=\"Enter wallet name\"\n            value={walletName}\n            onChange={onEnterWalletName}\n            suffix={loadingWalletName && <Spin spinning />}\n            disabled={error || duplicateError}\n          />\n          <Select defaultValue={targetNetwork.name} onChange={value => setNetwork(value)}>\n            {networkOptions}\n          </Select>\n          {error && <Alert message=\"Unable to import: this doesn't seem like a multisig.\" type=\"error\" showIcon />}\n          {duplicateError && <Alert message=\"Wallet already present ! \" type=\"error\" showIcon />}\n        </div>\n      </Modal>\n    </>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import \"antd/dist/antd.css\";\nimport \"graphiql/graphiql.min.css\";\n\nimport React, { useState } from \"react\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport GraphiQL from \"graphiql\";\nimport fetch from \"isomorphic-fetch\";\n\n\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ShareAltOutlined } from \"@ant-design/icons\";\n\nimport { Balance, Address, TransactionListItem, Owners } from \"../components\";\nimport QR from \"qrcode.react\";\nimport { List, Button, Alert, Typography, message } from \"antd\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n// import { useEventListener } from \"eth-hooks/events/\";\nimport { getFactoryVersion, Sleep } from \"../constants\";\nimport useEventListener from \"../hooks/useEventListener\";\nimport { useStore } from \"../store/useStore\";\n\nconst { Text } = Typography;\n\nfunction Home({\n  targetNetwork,\n  address,\n  contractAddress,\n  localProvider,\n  price,\n  mainnetProvider,\n  blockExplorer,\n  contractName,\n  readContracts,\n  signaturesRequired,\n  reDeployWallet,\n  currentMultiSigAddress,\n  contractNameForEvent,\n}) {\n  // const allExecuteTransactionEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"ExecuteTransaction\",\n  //   localProvider,\n  //   1,\n  // );\n  const [state, dispatch] = useStore();\n\n  const walletParams = useParams();\n\n  const allExecuteTransactionEvents = useEventListener(\n    currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n    contractNameForEvent,\n    \"ExecuteTransaction\",\n    localProvider,\n  );\n\n  const [executeTransactionEvents, setExecuteTransactionEvents] = useState(undefined);\n  const [walletName, setWalletName] = useState();\n  const [txListLoading, setTxListLoading] = useState(true);\n\n  const updateExecutedEvents = async () => {\n    // old event listner logic\n    const filteredEvents = allExecuteTransactionEvents.filter(\n      contractEvent => contractEvent.address === currentMultiSigAddress,\n    );\n    setExecuteTransactionEvents(filteredEvents.reverse());\n    setTxListLoading(false);\n  };\n\n  const getWalletName = async () => {\n    // wait for 1 sec to get proper contract instance\n    await Sleep(1000);\n    let factoryVersion = await getFactoryVersion(readContracts[contractName]);\n    if (factoryVersion === 1) {\n      if (readContracts[contractName] && reDeployWallet === undefined) {\n        let walletName = await readContracts[contractName].name();\n        setWalletName(walletName);\n      }\n    } else {\n      setWalletName(\"\");\n    }\n  };\n  useEffect(() => {\n    void getWalletName();\n  }, [readContracts[contractName]].address);\n\n  useEffect(() => {\n    if (readContracts[contractName]) {\n      updateExecutedEvents();\n    }\n  }, [allExecuteTransactionEvents, currentMultiSigAddress, readContracts, contractName, readContracts[contractName]]);\n\n  useEffect(() => {\n    if (\"walletAddress\" in walletParams && \"networkName\" in walletParams) {\n      dispatch({ payload: { walletParams } });\n    } else {\n      dispatch({ payload: { walletParams: undefined } });\n    }\n  }, [walletParams]);\n\n  return (\n    <>\n      <div\n        //  style={{ padding: 32, maxWidth: 850, margin: \"auto\" }}\n        className=\" flex flex-col justify-center items-center  m-2 \"\n      >\n        {reDeployWallet !== undefined && (\n          <>\n            <div className=\"text-left my-2 w-1/2 \">\n              <Alert message=\"Alert\" description=\"Please deploy this wallet !!\" type=\"warning\" showIcon />\n            </div>\n          </>\n        )}\n        {/* main contract info */}\n        <div className=\"flex  justify-around  flex-wrap  w-full border-2 p-4 md:w-auto md:rounded-3xl md:shadow-md\">\n          {/* contract balanace qr */}\n          <div\n            // style={{ paddingBottom: 32 }}\n            className=\"flex flex-col  items-center w-full p-5 border-2  rounded-3xl shadow-md  md:flex-1 md:p-0 md:shadow-none md:rounded-none md:w-auto md:border-none\"\n          >\n            <div>\n              <Balance\n                address={contractAddress ? contractAddress : \"\"}\n                provider={localProvider}\n                dollarMultiplier={price}\n                size={40}\n              />\n            </div>\n            <div className=\"px-20\">\n              <QR\n                value={contractAddress ? contractAddress.toString() : \"\"}\n                size={180}\n                level=\"H\"\n                includeMargin\n                renderAs=\"svg\"\n                imageSettings={{ excavate: false, src: \"\", height: 0, width: 0 }}\n              />\n            </div>\n\n            <div className=\"text-2xl\">{walletName}</div>\n            <div\n              // style={{ display: \"flex\", justifyContent: \"center\" }}\n              className=\"\"\n            >\n              <Address\n                address={contractAddress ? contractAddress : \"\"}\n                ensProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                fontSize={25}\n              />\n            </div>\n          </div>\n\n          {/* contract owner signature */}\n          <div className=\"w-full px-2 mt-4  md:mt-0 md:flex-1 md:w-96 \">\n            <Owners\n              key={walletParams && JSON.stringify(walletParams)}\n              // ownerEvents={ownerEvents}\n              signaturesRequired={signaturesRequired}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              // address={address}\n              // poolServerUrl={poolServerUrl}\n              // contractAddress={contractAddress}\n              contractName={contractName}\n              localProvider={localProvider}\n              currentMultiSigAddress={currentMultiSigAddress}\n              reDeployWallet={reDeployWallet}\n              contractNameForEvent={contractNameForEvent}\n              readContracts={readContracts}\n            />\n          </div>\n\n          {/* share wallet url */}\n          <div className=\"\">\n            <Text\n              copyable={{\n                icon: [\n                  <ShareAltOutlined className=\"text-xl cursor-pointer\" style={{ color: \"#1890FF\" }} />,\n                  <ShareAltOutlined className=\"text-xl cursor-pointer\" style={{ color: \"greenyellow\" }} />,\n                ],\n                text: `${window.location.origin}/${contractAddress}/${targetNetwork?.name}`,\n                tooltips: [\"Copy wallet share url\", \"Copied\"],\n              }}\n            />\n          </div>\n        </div>\n\n        {/* proposal create button */}\n        <div className=\"my-5\">\n          {reDeployWallet === undefined && (\n            <Button\n              type={\"primary\"}\n              onClick={() => {\n                window.location = \"/create\";\n              }}\n            >\n              Propose Transaction\n            </Button>\n          )}\n        </div>\n        <div className=\"flex justify-center items-center w-screen   \">\n          {reDeployWallet === undefined && (\n            <div className=\" w-full md:w-1/2  py-5 \">\n              <List\n                // bordered\n\n                dataSource={executeTransactionEvents}\n                loading={txListLoading}\n                renderItem={item => {\n                  return (\n                    <div className=\"border-2 rounded-3xl shadow-md mt-4 \">\n                      {\"MultiSigWallet\" in readContracts && (\n                        <>\n                          <TransactionListItem\n                            item={Object.create(item)}\n                            mainnetProvider={mainnetProvider}\n                            blockExplorer={blockExplorer}\n                            price={price}\n                            readContracts={readContracts}\n                            contractName={contractName}\n                          />\n                        </>\n                      )}\n                    </div>\n                  );\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\nconst checkProps = (preProps, nextProps) => {\n  // let ownerEvents = nextProps.ownerEvents.filter(contractEvent => contractEvent.address === nextProps.contractAddress);\n  return preProps.contractAddress === nextProps.contractAddress && preProps.reDeployWallet && nextProps.reDeployWallet;\n};\n\nexport default React.memo(Home, checkProps);\n","import React, { useEffect, useLayoutEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, Select, InputNumber, Space, Tooltip, Alert } from \"antd\";\nimport { CodeOutlined } from \"@ant-design/icons\";\nimport { AddressInput, EtherInput, WalletConnectInput, IFrame } from \"../components\";\nimport TransactionDetailsModal from \"../components/MultiSig/TransactionDetailsModal\";\nimport { parseExternalContractTransaction } from \"../helpers\";\nimport { useLocalStorage } from \"../hooks\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nconst { Option } = Select;\n\nconst axios = require(\"axios\");\n\nexport default function CreateTransaction({\n  poolServerUrl,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired,\n}) {\n  const history = useHistory();\n  const [methodName, setMethodName] = useLocalStorage(\"methodName\", \"transferFunds\");\n  const [newSignaturesRequired, setNewSignaturesRequired] = useState(signaturesRequired);\n  const [amount, setAmount] = useState(\"0\");\n  const [to, setTo] = useLocalStorage(\"to\");\n  const [customCallData, setCustomCallData] = useState(\"\");\n  const [parsedCustomCallData, setParsedCustomCallData] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [shouldCreateTransaction, setShouldCreateTransaction] = useState(false);\n  const [isOwner, setIsOwner] = useState();\n  const [isIframe, setIsIframe] = useState(false);\n  const [isTxLoaded, setIsTxLoaded] = useState(false);\n\n  const [hasEdited, setHasEdited] = useState(); //we want the signaturesRequired to update from the contract _until_ they edit it\n  const [customNonce, setCustomNonce] = useState(nonce);\n\n  useEffect(() => {\n    if (!hasEdited) {\n      setNewSignaturesRequired(signaturesRequired);\n    }\n  }, [signaturesRequired]);\n\n  useLayoutEffect(() => {\n    setCustomNonce(nonce);\n  }, [nonce]);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const inputStyle = {\n    padding: 10,\n  };\n\n  useEffect(() => {\n    const getParsedTransaction = async () => {\n      const parsedTransaction = await parseExternalContractTransaction(to, customCallData);\n      setParsedCustomCallData(parsedTransaction);\n    };\n\n    getParsedTransaction();\n  }, [customCallData]);\n\n  const loadTransactionData = ({ to, value, data, isIframe = false }) => {\n    setTo(to);\n    value ? setAmount(ethers.utils.formatEther(value)) : setAmount(\"0\");\n    setCustomCallData(data);\n    setShouldCreateTransaction(true);\n    if (isIframe) {\n      setIsIframe(true);\n    }\n  };\n\n  useEffect(() => {\n    shouldCreateTransaction && createTransaction();\n    setShouldCreateTransaction(false);\n  }, [shouldCreateTransaction]);\n\n  const createTransaction = async () => {\n    try {\n      //a little security in the frontend just because\n      if (newSignaturesRequired < 1) {\n        alert(\"signatures required must be >= 1\");\n      } else {\n        setLoading(true);\n\n        let callData;\n        let executeToAddress;\n        if (\n          methodName === \"transferFunds\" ||\n          methodName === \"customCallData\" ||\n          methodName === \"wcCallData\" ||\n          methodName === \"iframeCallData\"\n        ) {\n          callData = methodName == \"transferFunds\" ? \"0x\" : customCallData;\n          executeToAddress = to;\n        } else {\n          callData = readContracts[contractName]?.interface?.encodeFunctionData(methodName, [\n            to,\n            newSignaturesRequired,\n          ]);\n          executeToAddress = contractAddress;\n        }\n        const newHash = await readContracts[contractName].getTransactionHash(\n          customNonce,\n          executeToAddress,\n          parseEther(\"\" + parseFloat(amount).toFixed(12)),\n          callData,\n        );\n\n        const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n\n        const recover = await readContracts[contractName].recover(newHash, signature);\n\n        const isOwner = await readContracts[contractName].isOwner(recover);\n        setIsOwner(isOwner);\n\n        if (isOwner) {\n          const res = await axios.post(poolServerUrl, {\n            chainId: localProvider._network.chainId,\n            address: readContracts[contractName]?.address,\n            nonce: customNonce,\n            to: executeToAddress,\n            amount,\n            data: callData,\n            hash: newHash,\n            signatures: [signature],\n            signers: [recover],\n          });\n\n          if (isIframe) {\n            setLoading(prev => false);\n            setIsTxLoaded(prev => true);\n            setTimeout(() => {\n              let hostURL = window.location.origin;\n              window.open(`${hostURL}/pool`, \"_blank\");\n\n              setIsTxLoaded(prev => false);\n              return;\n            }, 1000);\n          }\n\n          if (isIframe === false) {\n            setTimeout(() => {\n              history.push(\"/pool\");\n              setLoading(false);\n            }, 1000);\n          }\n        } else {\n          console.log(\"ERROR, NOT OWNER.\");\n          setLoading(false);\n        }\n      }\n    } catch (error) {\n      console.log(\"n-Error: \", error);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center flex-col items-center\">\n      <div\n        // style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}\n        className=\"flex justify-center border-2 m-5 rounded-2xl shadow-md\"\n        style={{\n          minWidth: \"24rem\",\n        }}\n      >\n        <div className=\"flex flex-col items-center\" style={{ margin: 8 }}>\n          <div style={{ margin: 8, padding: 8, width: \"10rem\", maxWidth: \"15rem\" }}>\n            <Select value={methodName} style={{ width: \"100%\" }} onChange={setMethodName}>\n              <Option key=\"transferFunds\">Send ETH</Option>\n              <Option key=\"addSigner\">Add Signer</Option>\n              <Option key=\"removeSigner\">Remove Signer</Option>\n              <Option key=\"customCallData\">Custom Call Data</Option>\n              <Option key=\"wcCallData\">\n                {/* <img src=\"walletconnect-logo.svg\" style={{ height: 20, width: 20 }} /> WalletConnect */}\n                WalletConnect\n              </Option>\n              <Option key=\"iframeCallData\">IFrame</Option>\n            </Select>\n          </div>\n          {methodName === \"wcCallData\" ? (\n            <div style={inputStyle}>\n              <WalletConnectInput\n                chainId={localProvider?._network.chainId}\n                address={contractAddress}\n                loadTransactionData={loadTransactionData}\n                mainnetProvider={mainnetProvider}\n                price={price}\n              />\n            </div>\n          ) : methodName === \"iframeCallData\" ? (\n            <IFrame\n              address={contractAddress}\n              loadTransactionData={loadTransactionData}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              isTxLoaded={isTxLoaded}\n            />\n          ) : (\n            <>\n              <div style={inputStyle}>\n                <AddressInput\n                  autoFocus\n                  ensProvider={mainnetProvider}\n                  placeholder={methodName == \"transferFunds\" ? \"Recepient address\" : \"Owner address\"}\n                  value={to}\n                  onChange={setTo}\n                />\n              </div>\n              <div style={inputStyle}>\n                {(methodName == \"addSigner\" || methodName == \"removeSigner\") && (\n                  <InputNumber\n                    style={{ width: \"100%\" }}\n                    placeholder=\"New # of signatures required\"\n                    value={newSignaturesRequired}\n                    onChange={value => {\n                      setNewSignaturesRequired(value);\n                      setHasEdited(true);\n                    }}\n                  />\n                )}\n                {methodName == \"customCallData\" && (\n                  <>\n                    <Input.Group compact>\n                      <Input\n                        style={{ width: \"calc(100% - 31px)\", marginBottom: 20 }}\n                        placeholder=\"Custom call data\"\n                        value={customCallData}\n                        onChange={e => {\n                          setCustomCallData(e.target.value);\n                        }}\n                      />\n                      <Tooltip title=\"Parse transaction data\">\n                        <Button onClick={showModal} icon={<CodeOutlined />} />\n                      </Tooltip>\n                    </Input.Group>\n                    <TransactionDetailsModal\n                      visible={isModalVisible}\n                      txnInfo={parsedCustomCallData}\n                      handleOk={() => setIsModalVisible(false)}\n                      handleCancel={() => setIsModalVisible(false)}\n                      mainnetProvider={mainnetProvider}\n                      price={price}\n                    />\n                  </>\n                )}\n                {(methodName == \"transferFunds\" || methodName == \"customCallData\") && (\n                  <EtherInput\n                  price={price}\n                  mode=\"USD\"\n                  value={amount}\n                  contractAddress={contractAddress}\n                  onChange={setAmount}\n                  provider={localProvider}\n                />\n                )}\n              </div>\n              <InputNumber\n                style={{ width: \"100%\" }}\n                placeholder=\"Leave blank for current nonce\"\n                defaultValue={nonce}\n                onChange={value => {\n                  if (value == null) {\n                    value = nonce;\n                  }\n                  setCustomNonce(value);\n                }}\n              />\n              <Space style={{ marginTop: 32 }}>\n                <Button loading={loading} onClick={createTransaction} type=\"primary\">\n                  Propose\n                </Button>\n              </Space>\n            </>\n          )}\n        </div>\n      </div>\n\n      {isOwner === false && <Alert message=\"you are not the owner ! \" type=\"error\" showIcon />}\n    </div>\n  );\n}\n","import { parseEther } from \"@ethersproject/units\";\nimport { Button, List, Spin, Checkbox } from \"antd\";\nimport { usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport { TransactionListItem, TenderlySimulation } from \"../components\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nconst axios = require(\"axios\");\n\nconst DEBUG = false;\n\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userSigner,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer,\n}) {\n  const [transactions, setTransactions] = useState();\n  const [selectedTx, setSelectedTx] = useState(new Map());\n  const { currentTheme } = useThemeSwitcher();\n\n  usePoller(() => {\n    const getTransactions = async () => {\n      const res = await axios.get(\n        poolServerUrl + readContracts[contractName].address + \"_\" + localProvider._network.chainId,\n      );\n\n      console.log(\"backend stuff res\", res.data);\n\n      const newTransactions = [];\n      for (const i in res.data) {\n        console.log(\"backend stuff res.data[i]\", res.data[i]);\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n          for (const sig in res.data[i].signatures) {\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[sig]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n            if (signer && isOwner) {\n              validSignatures.push({ signer, signature: res.data[i].signatures[sig] });\n            }\n          }\n\n          res.data[i].nonce = thisNonce;\n\n          const update = { ...res.data[i], validSignatures };\n          newTransactions.push(update);\n        }\n      }\n\n      console.log(\"backend stuff newTransactions\", newTransactions);\n\n      setTransactions(newTransactions);\n    };\n    if (readContracts[contractName]) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    const sigList = [];\n    for (const sig in allSigs) {\n      const recover = await readContracts[contractName].recover(newHash, allSigs[sig]);\n      sigList.push({ signature: allSigs[sig], signer: recover });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n    for (const sig in sigList) {\n      if (!used[sigList[sig].signature]) {\n        finalSigList.push(sigList[sig].signature);\n        finalSigners.push(sigList[sig].signer);\n      }\n      used[sigList[sig].signature] = true;\n    }\n\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return <Spin />;\n  }\n\n  return (\n    <div\n      //  style={{ maxWidth: 850, margin: \"auto\", marginTop: 32, marginBottom: 32 }}\n      className=\"flex flex-col justify-center items-center w-full   \"\n    >\n      <h1\n        className={`p-2 mt-1 w-1/12   ${\n          currentTheme === \"light\" ? \"bg-gray-100 border-2\" : \"border border-gray-300\"\n        } rounded-xl text-md`}\n      >\n        #{nonce ? nonce.toNumber() : <Spin />}\n      </h1>\n      <div className=\"lg:w-screen lg:p-x-52    txListWidth\">\n        <List\n          // bordered\n          dataSource={transactions}\n          renderItem={(item, index) => {\n            const hasSigned = item.signers.indexOf(address) >= 0;\n            const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n\n            return (\n              <div className=\"border-2 rounded-2xl shadow-md mt-4\">\n                <TransactionListItem\n                  item={item}\n                  mainnetProvider={mainnetProvider}\n                  blockExplorer={blockExplorer}\n                  price={price}\n                  readContracts={readContracts}\n                  contractName={contractName}\n                >\n                  <div\n                    // style={{ padding: 16 }}\n                    className={`${\n                      currentTheme === \"light\" ? \"bg-gray-100\" : \"\"\n                    } border-2 rounded-2xl flex justify-center items-center `}\n                  >\n                    <div\n                      // style={{ padding: 4 }}\n                      className=\"w-14 \"\n                    >\n                      {item.signatures.length}/{signaturesRequired.toNumber()} {hasSigned ? \"✅\" : \"\"}\n                    </div>\n                    <div\n                      // style={{ padding: 4 }}\n                      className=\"b--red w-full flex justify-between p-2\"\n                    >\n                      <Button\n                        type=\"secondary\"\n                        onClick={async () => {\n                          const newHash = await readContracts[contractName].getTransactionHash(\n                            item.nonce,\n                            item.to,\n                            parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                            item.data,\n                          );\n\n                          const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n                          const recover = await readContracts[contractName].recover(newHash, signature);\n                          const isOwner = await readContracts[contractName].isOwner(recover);\n                          if (isOwner) {\n                            const [finalSigList, finalSigners] = await getSortedSigList(\n                              [...item.signatures, signature],\n                              newHash,\n                            );\n\n                            let obj = selectedTx.get(index);\n                            obj.finalSigList = finalSigList;\n                            selectedTx.set(index, obj);\n                            setSelectedTx(selectedTx);\n\n                            const res = await axios.post(poolServerUrl, {\n                              ...item,\n                              signatures: finalSigList,\n                              signers: finalSigners,\n                            });\n                          }\n                        }}\n                      >\n                        Sign\n                      </Button>\n                      <Button\n                        key={item.hash}\n                        type={hasEnoughSignatures ? \"primary\" : \"secondary\"}\n                        onClick={async () => {\n\n                          console.log(\"EXEC\")\n\n                          const newHash = await readContracts[contractName].getTransactionHash(\n                            item.nonce,\n                            item.to,\n                            parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                            item.data,\n                          );\n\n                          const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n\n                          let finalGaslimit = 250000\n\n                          try{\n                            // get estimate gas for a execute tx\n                            let estimateGasLimit = await writeContracts[contractName].estimateGas.executeTransaction(\n                              item.to,\n                              parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              item.data,\n                              finalSigList,\n                            );\n                            estimateGasLimit = await estimateGasLimit.toNumber();\n\n                            console.log(\"estimateGasLimit\",estimateGasLimit)\n\n                            // add extra 50k gas\n                            finalGaslimit =  estimateGasLimit + 50000;\n\n                          }catch(e){\n                            console.log(\"Failed to estimate gas\")\n\n                          }\n\n                          tx(\n                            writeContracts[contractName].executeTransaction(\n                              item.to,\n                              parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              item.data,\n                              finalSigList,\n                              { gasLimit: finalGaslimit },\n                            ),\n                            async update => {\n                              if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                                try {\n                                  const parsedData =\n                                    item.data !== \"0x\"\n                                      ? readContracts[contractName].interface.parseTransaction(item)\n                                      : null;\n                                  // get all existing owner list\n                                  let ownnersCount = await readContracts[contractName].numberOfOwners();\n                                  /**----------------------\n                                   * update owners on api at add signer\n                                   * ---------------------*/\n                                  if (parsedData && [\"addSigner\", \"removeSigner\"].includes(parsedData.name)) {\n                                    // let finalOwnerList = [parsedData.args.newSigner, ...item.signers];\n                                    let ownerAddress = address;\n                                    let contractAddress = readContracts[contractName].address;\n                                    let owners = [];\n                                    ownnersCount = ownnersCount.toString();\n                                    for (let index = 0; index < +ownnersCount; index++) {\n                                      let owner = await readContracts[contractName].owners(index);\n                                      owners.push(owner);\n                                    }\n                                    let reqData = { owners: owners };\n                                    const res = await axios.post(\n                                      poolServerUrl + `updateOwners/${ownerAddress}/${contractAddress}`,\n                                      reqData,\n                                    );\n                                    console.log(\"update owner response\", res.data);\n                                  }\n                                } catch (error) {\n                                  console.log(`🔴 Error`, error);\n                                }\n                              }\n                            },\n                          );\n                        }}\n                      >\n                        Exec\n                      </Button>\n                      <Checkbox\n                        onChange={\n                          async (e) => {\n                            if (e.target.checked) {\n                              const newHash = await readContracts[contractName].getTransactionHash(\n                                item.nonce,\n                                item.to,\n                                parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                                item.data,\n                              );\n\n                              const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n                              selectedTx.set(index, {\n                                  to: item.to,\n                                  value: parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                                  data: item.data,\n                                  finalSigList: finalSigList\n                                });\n                              setSelectedTx(selectedTx);\n                            } else {\n                              selectedTx.delete(index);\n                              setSelectedTx(selectedTx);\n                            }\n                          }\n                        }\n                      />\n                    </div>\n                  </div>\n                  <TenderlySimulation\n                    params={item}\n                    address={address}\n                    multiSigWallet={readContracts[\"MultiSigWallet\"]}\n                    signaturesRequired={signaturesRequired}\n                  />\n                </TransactionListItem>\n              </div>\n            );\n          }}\n        />\n      <Button\n        type=\"secondary\"\n        onClick={async () => {\n          var tos = [];\n          var values = [];\n          var data = [];\n          var sigs = [];\n\n          for (let i=0; i<selectedTx.size; i++) {\n            if (selectedTx.has(i)) {\n              tos.push(selectedTx.get(i).to);\n              values.push(selectedTx.get(i).value);\n              data.push(selectedTx.get(i).data);\n              sigs.push(selectedTx.get(i).finalSigList);\n            }\n          }\n          tx(\n            writeContracts[contractName].executeBatch(\n              tos,\n              values,\n              data,\n              sigs,\n            )\n          )\n        }}\n      >\n      Exec selected\n      </Button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Alert, Button, Col, Row } from \"antd\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { Contract } from \"./components\";\nimport { CreateTransaction, Hints, Home, Subgraph, Transactions } from \"./views\";\n\n/**----------------------\n * TODO:we can create a global context state and fetch all this props on individual components\n * ---------------------*/\n\nconst Routes = ({\n  targetNetwork,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired,\n  blockExplorer,\n  // executeTransactionEvents,\n  // ownerEvents,\n  address,\n  yourLocalBalance,\n  tx,\n  writeContracts,\n  contractConfig,\n  userHasMultiSigs,\n  currentMultiSigAddress,\n  DEBUG,\n  setIsCreateModalVisible,\n  BACKEND_URL,\n  mainnetContracts,\n  subgraphUri,\n  reDeployWallet,\n  isFactoryDeployed,\n  // allOwnerEvents,\n  contractNameForEvent,\n}) => {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\">\n          {!userHasMultiSigs ? (\n            <>\n              {isFactoryDeployed !== undefined && (\n                <Row style={{ marginTop: 40 }}>\n                  <Col span={12} offset={6}>\n                    <Alert\n                      message={\n                        <>\n                          ✨{\" \"}\n                          <Button onClick={() => setIsCreateModalVisible(true)} type=\"link\" style={{ padding: 0 }}>\n                            Create\n                          </Button>{\" \"}\n                          or select your Multi-Sig ✨\n                        </>\n                      }\n                      type=\"info\"\n                    />\n                  </Col>\n                </Row>\n              )}\n\n              {isFactoryDeployed === undefined && (\n                <Row style={{ marginTop: 40 }}>\n                  <Col span={12} offset={6}>\n                    <Alert\n                      message={<> Sorry multisig not awailable on this network 😥 ( please change the network) </>}\n                      type=\"error\"\n                    />\n                  </Col>\n                </Row>\n              )}\n            </>\n          ) : (\n            <>\n              <Home\n                key={currentMultiSigAddress}\n                targetNetwork={targetNetwork}\n                address={address}\n                contractAddress={currentMultiSigAddress}\n                localProvider={localProvider}\n                price={price}\n                mainnetProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                // executeTransactionEvents={executeTransactionEvents}\n                contractName={contractName}\n                readContracts={readContracts}\n                // ownerEvents={ownerEvents}\n                signaturesRequired={signaturesRequired}\n                // poolServerUrl={BACKEND_URL}\n                reDeployWallet={reDeployWallet}\n                isFactoryDeployed={isFactoryDeployed}\n                currentMultiSigAddress={currentMultiSigAddress}\n                contractNameForEvent={contractNameForEvent}\n              />\n            </>\n          )}\n        </Route>\n        <Route exact path=\"/:walletAddress/:networkName\">\n          <Home\n            key={currentMultiSigAddress}\n            address={address}\n            contractAddress={currentMultiSigAddress}\n            localProvider={localProvider}\n            price={price}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            // executeTransactionEvents={executeTransactionEvents}\n            contractName={contractName}\n            readContracts={readContracts}\n            // ownerEvents={ownerEvents}\n            signaturesRequired={signaturesRequired}\n            // poolServerUrl={BACKEND_URL}\n            reDeployWallet={reDeployWallet}\n            isFactoryDeployed={isFactoryDeployed}\n            currentMultiSigAddress={currentMultiSigAddress}\n            contractNameForEvent={contractNameForEvent}\n          />\n        </Route>\n\n        <Route path=\"/create\">\n          <CreateTransaction\n            poolServerUrl={BACKEND_URL}\n            contractName={contractName}\n            contractAddress={contractAddress}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            price={price}\n            tx={tx}\n            readContracts={readContracts}\n            userSigner={userSigner}\n            DEBUG={DEBUG}\n            nonce={nonce}\n            blockExplorer={blockExplorer}\n            signaturesRequired={signaturesRequired}\n          />\n        </Route>\n        <Route path=\"/pool\">\n          <Transactions\n            poolServerUrl={BACKEND_URL}\n            contractName={contractName}\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            blockExplorer={blockExplorer}\n            nonce={nonce}\n            signaturesRequired={signaturesRequired}\n          />\n        </Route>\n        <Route exact path=\"/debug\">\n          <Contract\n            name={\"MultiSigFactory\"}\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n    </>\n  );\n};\nexport default Routes;\n","import { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { Select } from \"antd\";\n\nimport { NETWORKS, Sleep } from \"../../constants\";\n\nimport { CreateMultiSigModal, ImportMultiSigModal } from \"../index\";\n\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../store/useStore\";\n\nconst { Option } = Select;\n\nconst WalletActions = () => {\n  const selectNetworkOptions = [];\n  for (const id in NETWORKS) {\n    selectNetworkOptions.push(\n      <Select.Option key={id} value={NETWORKS[id].name}>\n        <span style={{ color: NETWORKS[id].color }}>{NETWORKS[id].name}</span>\n      </Select.Option>,\n    );\n  }\n\n  const [state, dispatch] = useStore();\n  const {\n    address,\n    reDeployWallet,\n    price,\n    selectedChainId,\n    mainnetProvider,\n    setReDeployWallet,\n    BACKEND_URL,\n    tx,\n    writeContracts,\n    isCreateModalVisible,\n    setIsCreateModalVisible,\n    getUserWallets,\n    targetNetwork,\n    isFactoryDeployed,\n    multiSigWalletABI,\n    localProvider,\n    userWallets,\n    setSelectedWalletAddress,\n    onChangeNetwork,\n    currentMultiSigAddress,\n    handleMultiSigChange,\n    hideWalletItem,\n    walletParams,\n  } = state;\n\n  const loadWallet = async () => {\n    if (walletParams && walletParams.networkName in NETWORKS) {\n      onChangeNetwork(walletParams.networkName);\n      await Sleep(1000);\n      handleMultiSigChange(walletParams.walletAddress);\n    }\n  };\n\n  useEffect(() => {\n    loadWallet();\n  }, [walletParams]);\n\n  return (\n    <>\n      <div key={address} className=\"flex justify-start items-center p-2 my-2  flex-wrap \">\n        <div>\n          <CreateMultiSigModal\n            key={address}\n            reDeployWallet={reDeployWallet}\n            setReDeployWallet={setReDeployWallet}\n            poolServerUrl={BACKEND_URL}\n            price={price}\n            selectedChainId={selectedChainId}\n            mainnetProvider={mainnetProvider}\n            address={address}\n            tx={tx}\n            writeContracts={writeContracts}\n            contractName={\"MultiSigFactory\"}\n            isCreateModalVisible={isCreateModalVisible}\n            setIsCreateModalVisible={setIsCreateModalVisible}\n            getUserWallets={getUserWallets}\n            currentNetworkName={targetNetwork.name}\n            isFactoryDeployed={isFactoryDeployed}\n          />\n        </div>\n\n        <div className=\"m-2  w-16\">\n          <ImportMultiSigModal\n            mainnetProvider={mainnetProvider}\n            targetNetwork={targetNetwork}\n            networkOptions={selectNetworkOptions}\n            // multiSigs={multiSigs}\n            // setMultiSigs={setMultiSigs}\n            // setCurrentMultiSigAddress={setCurrentMultiSigAddress}\n            multiSigWalletABI={multiSigWalletABI}\n            localProvider={localProvider}\n            // poolServerUrl={BACKEND_URL}\n            userWallets={userWallets}\n            getUserWallets={getUserWallets}\n            isFactoryDeployed={isFactoryDeployed}\n            setSelectedWalletAddress={setSelectedWalletAddress}\n            walletParams={walletParams}\n          />\n        </div>\n        <div className=\"m-2  w-32\">\n          <Select\n            className=\"w-full\"\n            value={currentMultiSigAddress}\n            onChange={handleMultiSigChange}\n            key={userWallets && userWallets.length}\n            disabled={walletParams !== undefined}\n          >\n            {userWallets &&\n              userWallets.length > 0 &&\n              userWallets.map((data, index) => {\n                return (\n                  <Option key={index} value={data.walletAddress}>\n                    <div className=\"flex justify-between items-center\">\n                      <div>{data.walletName}</div>\n                      {walletParams === undefined && (\n                        <>\n                          <MinusCircleOutlined\n                            onClick={e => hideWalletItem(e, data.walletAddress)}\n                            style={{ color: \"red\" }}\n                          />\n                        </>\n                      )}\n                    </div>\n                  </Option>\n                );\n              })}\n          </Select>\n        </div>\n        <div className=\"m-2  w-28 \">\n          {/* {networkSelect} */}\n\n          <Select\n            className=\"w-full text-left\"\n            // defaultValue={targetNetwork.name}\n            value={targetNetwork.name}\n            // style={{ textAlign: \"left\", width: 170 }}\n            onChange={onChangeNetwork}\n          >\n            {selectNetworkOptions}\n          </Select>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default WalletActions;\n","import { Button, Col, Menu, Row, Select } from \"antd\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\n\nimport Routes from \"./Routes\";\nimport StoreProvider from \"./store/StoreProvider\";\nimport WalletActions from \"./components/MultiSig/WalletActions\";\n\n// import CreateMultiSigModal from \"./components/MultiSig/CreateMultiSigModal\";\n\nimport \"antd/dist/antd.css\";\nimport { useOnBlock } from \"eth-hooks\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  CreateMultiSigModal,\n  Faucet,\n  FaucetHint,\n  GasGauge,\n  Header,\n  ImportMultiSigModal,\n  NetworkDisplay,\n  NetworkSwitch,\n  Ramp,\n  ThemeSwitch,\n} from \"./components\";\nimport { ALCHEMY_KEY, NETWORKS, Sleep } from \"./constants\";\n//import multiSigWalletABI from \"./contracts/multi_sig_wallet\";\n// contracts\nimport axios from \"axios\";\nimport MultiSigWalletAbi from \"./configs/MultiSigWallet_ABI.json\";\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\n\nimport { Web3ModalSetup } from \"./helpers\";\nimport { useLocalStorage } from \"./hooks\";\nimport useApp from \"./hooks/useApp\";\nimport { useStore } from \"./store/useStore\";\n\nconst { Option } = Select;\nconst { ethers } = require(\"ethers\");\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.mainnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n// const initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n/**----------------------\n * taking hardcoded multi sig wallet abi from MultiSigWallet_ABI.json file\n * note: if you update MultiSigWallet.sol file then you need to update this file from hardhat artifacts wallet\n * ---------------------*/\nconst multiSigWalletABI = MultiSigWalletAbi[\"abi\"];\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const cachedNetwork = window.localStorage.getItem(\"network\");\n  let targetNetwork = NETWORKS[cachedNetwork || \"mainnet\"];\n\n  /**----------------------\n   * local states\n   * ---------------------*/\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const [userWallets, setUserWallets] = useState(undefined);\n  const [reDeployWallet, setReDeployWallet] = useState(undefined);\n  const [updateServerWallets, setUpdateServerWallets] = useState(false);\n  const location = useLocation();\n  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);\n  const [multiSigs, setMultiSigs] = useState([]);\n  const [currentMultiSigAddress, setCurrentMultiSigAddress] = useState();\n  const [signaturesRequired, setSignaturesRequired] = useState();\n  const [nonce, setNonce] = useState(0);\n  const [contractNameForEvent, setContractNameForEvent] = useState();\n  // const [ownerEvents, setOwnerEvents] = useState();\n  // const [executeTransactionEvents, setExecuteTransactionEvents] = useState();\n\n  const [importedMultiSigs] = useLocalStorage(\"importedMultiSigs\");\n  const [hiddenWallets, setHiddenWallets] = useLocalStorage(\"hiddenWallets\", []);\n  const [multiSigFactoryData, setMultiSigFactoryData] = useLocalStorage(\"multiSigFactoryData\");\n\n  const [mainWalletConnectSession, setMainWalletConnectSession] = useLocalStorage(\"walletConnectSession_main\");\n  const [selectedWalletAddress, setSelectedWalletAddress] = useLocalStorage(\"selectedWalletAddress\");\n\n  /**----------------------\n   * initial configs\n   * ---------------------*/\n\n  // backend transaction handler:\n  let BACKEND_URL = \"http://localhost:49899/\";\n  if (targetNetwork && targetNetwork.name && targetNetwork.name != \"localhost\") {\n    BACKEND_URL = \"https://backend.multisig.lol:49899/\";\n  }\n\n  if (!targetNetwork) targetNetwork = NETWORKS[\"mainnet\"];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  let isFactoryDeployed = deployedContracts[targetNetwork.chainId];\n  const contractName = \"MultiSigWallet\";\n\n  /**----------------------\n   * apps root providers and setup configs\n   * ---------------------*/\n  const {\n    localProvider,\n    mainnetProvider,\n    price,\n    gasPrice,\n    userProviderAndSigner,\n    userSigner,\n    localChainId,\n    selectedChainId,\n    tx,\n    yourLocalBalance,\n    contractConfig,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    contractAddress,\n    // ownersMultiSigEvents,\n    walletCreate2Events,\n    // allExecuteTransactionEvents,\n    // allOwnerEvents,\n    signaturesRequiredContract,\n    nonceContract,\n  } = useApp({\n    targetNetwork,\n    providers,\n    injectedProvider,\n    USE_BURNER_WALLET,\n    address,\n    deployedContracts,\n    DEBUG,\n    currentMultiSigAddress,\n    contractNameForEvent,\n    reDeployWallet,\n    contractName,\n  });\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  /**----------------------\n   * methods\n   * ---------------------*/\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n\n    // ON LOGOUT REMOVING ALL WALLET CONNECT SESSIONS\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"walletConnectSession_wallet\");\n    localStorage.removeItem(\"walletConnectSession_main\");\n    localStorage.removeItem(\"walletConnectUri_wallet\");\n    localStorage.removeItem(\"isConnected_wallet\");\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  const handleMultiSigChange = async value => {\n    setContractNameForEvent(null);\n    setCurrentMultiSigAddress(value);\n    setSelectedWalletAddress(value);\n  };\n\n  async function getAddress() {\n    if (userSigner) {\n      const newAddress = await userSigner.getAddress();\n      setAddress(newAddress);\n    }\n  }\n\n  const updateUserWallets = () => {\n    let multiSigsForUser = userWallets && [...userWallets.map(data => data.walletAddress)];\n\n    const recentMultiSigAddress = multiSigsForUser && multiSigsForUser[multiSigsForUser.length - 1];\n    setCurrentMultiSigAddress(recentMultiSigAddress);\n    // setMultiSigs(multiSigsForUser);\n  };\n\n  const createEthersContractWallet = () => {\n    async function getContractValues() {\n      const latestSignaturesRequired = await readContracts.MultiSigWallet.signaturesRequired();\n      setSignaturesRequired(latestSignaturesRequired);\n\n      const nonce = await readContracts.MultiSigWallet.nonce();\n      setNonce(nonce);\n    }\n\n    let currentMultiSig = userWallets && userWallets.find(data => data.walletAddress === currentMultiSigAddress);\n    let currentMultiSigChainIds = currentMultiSig?.chainIds;\n\n    // on load contracts if current sig on  same chain id\n    if (\n      currentMultiSigAddress &&\n      currentMultiSigChainIds &&\n      currentMultiSigChainIds.map(id => Number(id))?.includes(Number(selectedChainId))\n    ) {\n      readContracts.MultiSigWallet = new ethers.Contract(currentMultiSigAddress, multiSigWalletABI, localProvider);\n      writeContracts.MultiSigWallet = new ethers.Contract(currentMultiSigAddress, multiSigWalletABI, userSigner);\n      setContractNameForEvent(\"MultiSigWallet\");\n      getContractValues();\n      setReDeployWallet(undefined);\n    } else {\n      setReDeployWallet(currentMultiSig);\n    }\n  };\n\n  const syncWalletsWithServer = async () => {\n    // let factoryVersion = await getFactoryVersion();\n    let totalWalletCount = await readContracts[\"MultiSigFactory\"]?.numberOfMultiSigs();\n    totalWalletCount = totalWalletCount ? totalWalletCount.toNumber() : 0;\n\n    if (totalWalletCount !== 0 && totalWalletCount === walletCreate2Events.length && updateServerWallets === false) {\n      // if (userWallets !== undefined && totalWalletCount !== userWallets.length) {\n      let walletsData = walletCreate2Events.map(data => data.args);\n      /**----------------------\n       * iterating over create even data and send it to backend api to update\n       * ---------------------*/\n      for (let index = 0; index < walletsData.length; index++) {\n        let wallet = walletsData[index];\n        let walletName = wallet.name;\n        let walletAddress = wallet.contractAddress;\n        let creator = wallet.creator;\n        let owners = wallet.owners;\n        let signaturesRequired = wallet.signaturesRequired.toNumber();\n        let reqData = {\n          owners,\n          signaturesRequired,\n        };\n        const res = await axios.post(\n          BACKEND_URL + `createWallet/${creator}/${walletName}/${walletAddress}/${selectedChainId}`,\n          reqData,\n        );\n        let data = res.data;\n        // console.log(\"update wallets on api res data: \", data);\n      }\n      setUpdateServerWallets(true);\n      // }\n    }\n  };\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  const getUserWallets = async isUpdate => {\n    if (isFactoryDeployed !== undefined) {\n      let res = await axios.get(BACKEND_URL + `getWallets/${address}`);\n      let data = res.data;\n\n      let localWallets =\n        importedMultiSigs && targetNetwork.name in importedMultiSigs ? [...importedMultiSigs[targetNetwork.name]] : [];\n\n      let allWallets = [...localWallets, ...data[\"userWallets\"]]\n        .flat()\n        .filter(data => hiddenWallets.includes(data.walletAddress) === false);\n\n      // setUserWallets(data[\"userWallets\"]);\n      setUserWallets(allWallets);\n\n      // set and reset  ContractNameForEvent to load the ownerevents\n      setContractNameForEvent(null);\n      setTimeout(() => {\n        setContractNameForEvent(\"MultiSigWallet\");\n      }, 100);\n\n      if (isUpdate) {\n        // const lastMultiSigAddress = data[\"userWallets\"][data[\"userWallets\"].length - 1]?.walletAddress;\n        const lastMultiSigAddress = allWallets[allWallets.length - 1]?.walletAddress;\n        setCurrentMultiSigAddress(lastMultiSigAddress);\n        setContractNameForEvent(null);\n        setIsCreateModalVisible(false);\n\n        setTimeout(() => {\n          setContractNameForEvent(\"MultiSigWallet\");\n        }, 100);\n      }\n    }\n  };\n\n  const onChangeNetwork = async value => {\n    if (targetNetwork.chainId !== NETWORKS[value].chainId) {\n      // window.localStorage.setItem(\"network\", value);\n      // setTimeout(() => {\n      //   window.location.reload();\n      // }, 1);\n      let targetNetwork = NETWORKS[value];\n\n      const ethereum = window.ethereum;\n      const data = [\n        {\n          chainId: \"0x\" + targetNetwork.chainId.toString(16),\n          chainName: targetNetwork.name,\n          nativeCurrency: targetNetwork.nativeCurrency,\n          rpcUrls: [targetNetwork.rpcUrl],\n          blockExplorerUrls: [targetNetwork.blockExplorer],\n        },\n      ];\n      console.log(\"data\", data);\n\n      let switchTx;\n      // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n      try {\n        switchTx = await ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: data[0].chainId }],\n        });\n      } catch (switchError) {\n        // not checking specific error code, because maybe we're not using MetaMask\n        try {\n          switchTx = await ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: data,\n          });\n        } catch (addError) {\n          // handle \"add\" error\n        }\n      }\n\n      window.localStorage.setItem(\"network\", value);\n      // setTimeout(() => {\n      // window.location.reload();\n      // }, 1);\n\n      if (switchTx) {\n      }\n    }\n  };\n\n  /**----------------------\n   * useEffect hooks\n   * ---------------------*/\n\n  /**----------------------\n   * load the main wallet connect configs if they are available\n   * ---------------------*/\n\n  useEffect(() => {\n    /**----------------------\n     * load default main WC session if it exists\n     * ---------------------*/\n    // let oldWalletConnect = localStorage.getItem(\"walletconnect\");\n\n    if (mainWalletConnectSession !== undefined) {\n      localStorage.setItem(\"walletconnect\", JSON.stringify(mainWalletConnectSession));\n    }\n    // return () => {\n    // };\n  }, []);\n\n  // -----------------\n  //   page reload on metamask account and network change\n  // -----------------\n  useEffect(() => {\n    window.ethereum?.on(\"accountsChanged\", function () {\n      window.location.reload();\n    });\n    // detect Network account change\n    window.ethereum?.on(\"networkChanged\", function () {\n      if (deployedContracts[targetNetwork.chainId] === undefined) {\n        console.log(\"NO FACTORY FOUND LOGING OUT !!!\");\n        logoutOfWeb3Modal();\n      } else {\n        window.location.reload();\n      }\n    });\n  }, []);\n\n  /**----------------------\n   * on factory address change remove imported wallets from localstorage\n   * ---------------------*/\n\n  useEffect(() => {\n    if (deployedContracts[targetNetwork.chainId] && deployedContracts[targetNetwork.chainId][targetNetwork.name]) {\n      let currentFactoryContractAddres =\n        deployedContracts[targetNetwork.chainId][targetNetwork.name][\"contracts\"][\"MultiSigFactory\"].address;\n\n      if (multiSigFactoryData === undefined) {\n        localStorage.removeItem(\"importedMultiSigs\");\n        setMultiSigFactoryData({ ...multiSigFactoryData, [`${targetNetwork.name}`]: currentFactoryContractAddres });\n\n        return;\n      }\n\n      if (multiSigFactoryData !== undefined) {\n        let oldFactoryAddress = multiSigFactoryData[`${targetNetwork.name}`];\n        let isNewFactoryDeployed = currentFactoryContractAddres !== oldFactoryAddress;\n        if (isNewFactoryDeployed) {\n          localStorage.removeItem(\"importedMultiSigs\");\n          setMultiSigFactoryData({ ...multiSigFactoryData, [`${targetNetwork.name}`]: currentFactoryContractAddres });\n        }\n      }\n    }\n  }, [userSigner]);\n\n  /**----------------------\n   * set main account address once provider and signer loads\n   * ---------------------*/\n  useEffect(() => {\n    getAddress();\n  }, [userSigner]);\n\n  /**----------------------\n   * load user sig wallets data from api\n   * ---------------------*/\n\n  useEffect(() => {\n    if (address && userWallets) {\n      updateUserWallets();\n    }\n  }, [userWallets && userWallets.length, address]);\n\n  /**----------------------\n   * set nounce and signatures required\n   * ---------------------*/\n  useEffect(() => {\n    setSignaturesRequired(signaturesRequiredContract);\n    setNonce(nonceContract);\n  }, [signaturesRequiredContract, nonceContract]);\n\n  /**----------------------\n   * load selected wallet contract to read and write\n   * ---------------------*/\n\n  useEffect(() => {\n    if (currentMultiSigAddress) {\n      createEthersContractWallet();\n    }\n  }, [currentMultiSigAddress, readContracts, writeContracts, selectedChainId]);\n\n  /**----------------------\n   * sync wallets with server on load\n   * ---------------------*/\n  useEffect(() => {\n    void syncWalletsWithServer();\n  }, [walletCreate2Events.length, userWallets && userWallets.length]);\n\n  /**----------------------\n   * load web3 modal\n   * ---------------------*/\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  /**----------------------\n   * LOAD THE USER WALLETS DATA\n   * ---------------------*/\n\n  useEffect(() => {\n    if (address !== undefined) {\n      getUserWallets(false);\n    }\n  }, [address, updateServerWallets, hiddenWallets.length]);\n\n  /**----------------------\n   * set current selected sig address from localstorage\n   * ---------------------*/\n\n  useEffect(() => {\n    if (selectedWalletAddress && userWallets && userWallets.length > 0 && address) {\n      setCurrentMultiSigAddress(selectedWalletAddress);\n    }\n  }, [selectedWalletAddress, userWallets, address]);\n\n  /**----------------------\n   * --------- DYANAMIC VALUES\n   * ---------------------*/\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const userHasMultiSigs = currentMultiSigAddress ? true : false;\n\n  const selectNetworkOptions = [];\n  for (const id in NETWORKS) {\n    selectNetworkOptions.push(\n      <Select.Option key={id} value={NETWORKS[id].name}>\n        <span style={{ color: NETWORKS[id].color }}>{NETWORKS[id].name}</span>\n      </Select.Option>,\n    );\n  }\n\n  const networkSelect = (\n    <Select\n      className=\"w-full text-left\"\n      defaultValue={targetNetwork.name}\n      // style={{ textAlign: \"left\", width: 170 }}\n      onChange={onChangeNetwork}\n    >\n      {selectNetworkOptions}\n    </Select>\n  );\n\n  // top header bar\n  const HeaderBar = (\n    <>\n      <Header>\n        <div className=\"relative \" key={address}>\n          <div className=\"flex flex-1 items-center p-1\">\n            {USE_NETWORK_SELECTOR && (\n              // <div style={{ marginRight: 20 }}>\n              <div className=\"mr-20\">\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n              isFactoryDeployed={isFactoryDeployed}\n              gasPrice={gasPrice}\n            />\n          </div>\n          {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n            <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n          )}\n        </div>\n      </Header>\n\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n    </>\n  );\n\n  const hideWalletItem = async (e, walletAddress) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    setHiddenWallets([...hiddenWallets, walletAddress]);\n    // await getUserWallets(false);\n  };\n\n  const MainMenu = (\n    <div className=\"flex justify-center mt-5\" key={address}>\n      <Menu disabled={!userHasMultiSigs} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item\n          key=\"/\"\n          onClick={() => {\n            // to reload wallet contract on homepage\n            createEthersContractWallet();\n          }}\n        >\n          <Link to=\"/\">MultiSig</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/create\" disabled={reDeployWallet !== undefined}>\n          <Link to=\"/create\">Propose Transaction</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/pool\" disabled={reDeployWallet !== undefined}>\n          <Link to=\"/pool\">Pool</Link>\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n\n  const BurnerWallet = (\n    <>\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n\n  const store = {\n    address,\n    reDeployWallet,\n    price,\n    selectedChainId,\n    mainnetProvider,\n    setReDeployWallet,\n    BACKEND_URL,\n    tx,\n    writeContracts,\n    isCreateModalVisible,\n    setIsCreateModalVisible,\n    getUserWallets,\n    targetNetwork,\n    isFactoryDeployed,\n    contractName,\n    networkOptions,\n    multiSigWalletABI,\n    localProvider,\n    userWallets,\n    setSelectedWalletAddress,\n    onChangeNetwork,\n    currentMultiSigAddress,\n    handleMultiSigChange,\n    hideWalletItem,\n  };\n\n  return (\n    <div className=\"App\">\n      <StoreProvider store={{ ...store }}>\n        {HeaderBar}\n        <WalletActions />\n        {MainMenu}\n\n        {Object.keys(writeContracts).length > 0 && Object.keys(readContracts).length > 0 && (\n          <>\n            <Routes\n              // key={currentMultiSigAddress}\n              // allOwnerEvents={allOwnerEvents}\n              BACKEND_URL={BACKEND_URL}\n              DEBUG={DEBUG}\n              targetNetwork={targetNetwork}\n              account={address}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractAddress={contractAddress}\n              contractConfig={contractConfig}\n              contractName={contractName}\n              currentMultiSigAddress={currentMultiSigAddress}\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n              // executeTransactionEvents={executeTransactionEvents}\n              gasPrice={gasPrice}\n              localProvider={localProvider}\n              mainnetContracts={mainnetContracts}\n              mainnetProvider={mainnetProvider}\n              nonce={nonce}\n              // ownerEvents={ownerEvents}\n              poolServerUrl={BACKEND_URL}\n              price={price}\n              readContracts={readContracts}\n              setIsCreateModalVisible={setIsCreateModalVisible}\n              signaturesRequired={signaturesRequired}\n              subgraphUri={props.subgraphUri}\n              tx={tx}\n              userHasMultiSigs={userHasMultiSigs}\n              userSigner={userSigner}\n              writeContracts={writeContracts}\n              yourLocalBalance={yourLocalBalance}\n              reDeployWallet={reDeployWallet}\n              isFactoryDeployed={isFactoryDeployed}\n              contractNameForEvent={contractNameForEvent}\n            />\n          </>\n        )}\n        <ThemeSwitch />\n\n        {BurnerWallet}\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage, useStaticJsonRPC } from \".\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\n\n// import { useEventListener } from \"eth-hooks/events/\";\n\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\n\nimport { Transactor, Web3ModalSetup } from \"../helpers\";\nimport useEventListener from \"./useEventListener\";\n\nexport default function useApp({\n  targetNetwork,\n  providers,\n  injectedProvider,\n  USE_BURNER_WALLET,\n  address,\n  deployedContracts,\n  DEBUG,\n  currentMultiSigAddress,\n  contractNameForEvent,\n  reDeployWallet,\n  contractName,\n}) {\n  // // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n\n  const userSigner = userProviderAndSigner.signer;\n\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // disabled externalContracts as it is taking old factory address or abi\n  // const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n  const contractConfig = { deployedContracts: deployedContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  const contractAddress = readContracts?.MultiSigWallet?.address;\n\n  //📟 Listen for broadcast events\n  // MultiSigFactory Events:\n  // const ownersMultiSigEvents = useEventListener(readContracts, \"MultiSigFactory\", \"Owners\", localProvider, 1);\n  // const walletCreateEvents = useEventListener(readContracts, \"MultiSigFactory\", \"Create\", localProvider, 1);\n  const walletCreate2Events = useEventListener(readContracts, \"MultiSigFactory\", \"Create2Event\", localProvider, 1);\n  // if (DEBUG) console.log(\"📟 ownersMultiSigEvents:\", ownersMultiSigEvents);\n\n  // MultiSigWallet Events:\n  // const allExecuteTransactionEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"ExecuteTransaction\",\n  //   localProvider,\n  //   1,\n  // );\n  // if (DEBUG) console.log(\"📟 executeTransactionEvents:\", allExecuteTransactionEvents);\n\n  // const allOwnerEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"Owner\",\n  //   localProvider,\n  //   1,\n  // );\n\n  /**----------------------\n   * readers hooks\n   * ---------------------*/\n  const signaturesRequiredContract = useContractReader(\n    reDeployWallet === undefined ? readContracts : null,\n    contractName,\n    \"signaturesRequired\",\n  );\n\n  const nonceContract = useContractReader(reDeployWallet === undefined ? readContracts : null, contractName, \"nonce\");\n\n  return {\n    localProvider,\n    mainnetProvider,\n    price,\n    gasPrice,\n    userProviderAndSigner,\n    userSigner,\n    localChainId,\n    selectedChainId,\n    tx,\n    yourLocalBalance,\n    contractConfig,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    contractAddress,\n    // ownersMultiSigEvents,\n    walletCreate2Events,\n    // allExecuteTransactionEvents,\n    // allOwnerEvents,\n    signaturesRequiredContract,\n    nonceContract,\n  };\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { SafeInjectProvider } from \"./contexts/SafeInjectContext\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <SafeInjectProvider>\n          <App subgraphUri={subgraphUri} />\n        </SafeInjectProvider>\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\n// export const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\nexport const INFURA_ID = \"5ce0898319eb4f5c9d4c982c8f78392a\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: \"https://eth-mainnet.g.alchemy.com/v2/o-vVF_-DyzQ4jc8vyIfpcLnWrNZTdkF1\", //\"https://rpc.scaffoldeth.io:48544\",//`https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  gnosis: {\n    name: \"gnosis\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 4000000000,\n    rpcUrl: \"https://rpc.gnosischain.com\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://opt-mainnet.g.alchemy.com/v2/rSAw45vZLgSbuRcykizMmDj4IO4AVohn`,\n    //rpcUrl: `https://mainnet.optimism.io`,\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 61000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#50a0ea\",\n    price: \"uniswap\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: `https://arb-mainnet.g.alchemy.com/v2/tYM-Tr8c9dHV5a8AgvXnVmS9e-xvoxeM`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  sepolia: {\n    name: \"sepolia\",\n    color: \"#87ff65\",\n    chainId: 11155111,\n    rpcUrl: \"https://rpc.sepolia.org\",\n    faucet: \"https://faucet.sepolia.dev/\",\n    blockExplorer: \"https://sepolia.etherscan.io\",\n  },\n  canto: {\n    name: \"canto\",\n    color: \"#00ff9b\",\n    chainId: 7700,\n    gasPrice: 420000000000,\n    rpcUrl: \"https://canto.slingshot.finance\",\n    faucet: \"https://cantofaucet.com/\",\n    blockExplorer: \"https://evm.explorer.canto.io/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n\nexport const getFactoryVersion = async contract => {\n  try {\n    // get the factory version\n    const factoryVersion = await contract.factoryVersion();\n    return Number(factoryVersion.toString());\n  } catch (error) {\n    // console.log(\"n-error: \", error);\n    // if no factory version variable that mean its version zero\n    console.log(\"its older factory version !!\");\n    return 0;\n  }\n};\nexport const Sleep = time =>\n  new Promise((resolve, reject) =>\n    setTimeout(() => {\n      resolve(true);\n    }, time),\n  );\n"],"sourceRoot":""}