{"version":3,"sources":["store/StoreProvider.jsx","store/useStore.jsx","components/MultiSig/EmptyWalletAlert.jsx","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/parseExternalContractTransaction.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useDebounce.js","hooks/useLocalStorage.js","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/TenderlySimulation.jsx","components/MultiSig/TransactionDetailsModal.jsx","helpers/types.ts","helpers/communicator.ts","components/WalletConnectInput.jsx","helpers/utils.ts","helpers/messageFormatter.ts","contexts/SafeInjectContext.tsx","components/IFrame.jsx","components/MultiSig/TransactionListItem.jsx","hooks/useEventListener.js","components/MultiSig/Owners.jsx","components/MultiSig/CreateModalSentOverlay.jsx","components/MultiSig/CreateMultiSigModal.jsx","components/MultiSig/ImportMultiSigModal.jsx","views/Hints.jsx","views/Subgraph.jsx","views/Home.jsx","views/CreateTransaction.jsx","views/Transactions.jsx","Routes.jsx","components/MultiSig/WalletActions.jsx","App.jsx","hooks/useApp.js","index.jsx","constants.js"],"names":["StoreContext","createContext","Reducer","state","action","payload","StoreProvider","children","store","useReducer","dispatch","useEffect","Object","values","Provider","value","useStore","useContext","EmptyWalletAlert","isFactoryDeployed","setIsCreateModalVisible","walletParams","useParams","undefined","style","marginTop","span","offset","message","onClick","type","padding","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","verticalAlign","color","target","href","rel","seed","toLowerCase","blockieSize","scale","display","alignItems","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","zero","BigNumber","from","Balance","useState","dollarMode","setDollarMode","balance","setBalance","provider","balanceContract","useBalance","getBalance","newBalance","eq","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","cursor","ethers","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","axios","isJsonString","str","parseExternalContractTransaction","contractAddress","txData","get","params","module","apikey","response","getParsedTransaction","abi","iface","Interface","parseTransaction","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","displayMax","setDisplayMax","gasCost","parseInt","_mode","float","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","calculatePK","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculateAddress","officialEthersWallet","Wallet","opacity","Password","disabled","height","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","location","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","justifyContent","onOk","onCancel","footer","loading","parseEther","to","SendOutlined","Account","useBurner","accountButton","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","className","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","textAlign","paddingRight","icon","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","margin","event","suffix","txValueInput","floatValue","toHexString","payable","handleForm","returned","buttonIcon","marginLeft","defaultValue","bordered","args","baseType","stateMutability","overrides","noContractDisplay","borderRadius","fontWeight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","listAccounts","_faucetAddress","GasGauge","Title","Header","Ramp","modalUp","setModalUp","allFaucets","n","networks","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","useDebounce","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useLocalStorage","initialValue","ttl","item","parsedItem","getTime","expiry","removeItem","storedValue","setStoredValue","valueToStore","Function","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","networkDisplay","USE_NETWORK_SELECTOR","networkSelected","NETWORK","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","TENDERLY_USER","process","TENDERLY_PROJECT","SIMULATE_URL","OPTS","headers","TenderlySimulation","multiSigWallet","signaturesRequired","simulated","setSimulated","simulationFailed","setSimulationFailed","simulationUnexpectedError","setSimulationUnexpectedError","simulationId","setSimulationId","simulateTransaction","encodeFunctionData","signatures","multiSigWalletAddressLowerCase","currentSignaturesCount","encodedStateOverrides","populateTransaction","unsignedTransactionToSimulate","network_id","state_objects","storage","stateOverrides","save","post","simResponse","transaction_info","call_trace","output","simulation","status","TransactionDetailsModal","handleOk","handleCancel","txnInfo","showFooter","destroyOnClose","maskClosable","functionFragment","signature","element","index","flexDirection","numberDisplay","sighash","Methods","RPC_AUTHENTICATION","GAS_PRICE_TYPE","FEATURES","TransactionStatus","TransferDirection","TransactionTokenType","Operation","SettingsInfoType","TokenType","LegacyMethods","CLIENT_META","icons","WalletConnectInput","loadTransactionData","setData","setTo","isModalVisible","setIsModalVisible","parsedTransactionData","setParsedTransactionData","walletConnect_wallet","setWalletConnect_wallet","walletLoading","setWalletLoading","setWalletConnectSession_wallet","setWalletConnectSession_main","walletConnectUri","setWalletConnectUri","isConnected","setIsConnected","peerMeta","setPeerMeta","walletConnect_wallet_cached","Boolean","walletConnectData","WalletConnect","clientMeta","subscribeToEvents","decodeFunctionData","setupConnector","mainWalletConnect","uri","approveSession","accounts","connected","walletConnect","parseCallRequest","resetConnection","callData","src","alt","Group","compact","marginBottom","onWalletConnect","isReload","killSession","dec2hex","dec","padStart","generateRequestId","len","arr","Uint8Array","crypto","getRandomValues","Array","join","generateId","MessageFormatter","makeRequest","env","sdkVersion","makeResponse","version","makeErrorResponse","AppCommunicator","iframeRef","handlers","Map","set","isValidMessage","msg","hasOwnProperty","sentFromIframe","current","contentWindow","source","knownMethod","canHandleMessage","send","requestId","postMessage","handleIncomingMessage","validMessage","hasHandler","clear","removeEventListener","this","addEventListener","SafeInjectContext","appUrl","newTx","setAppUrl","setRpcUrl","setNewTx","SafeInjectProvider","useRef","communicator","setCommunicator","communicatorInstance","initCommunicator","useAppCommunicator","requestWithMessage","Math","trunc","performance","getSafeInfo","safeAddress","owners","threshold","isReadOnly","getEnvironmentInfo","origin","rpcCall","call","sendTransactions","transactions","txs","rest","signMessage","signTypedMessage","typedData","IFrame","isTxLoaded","cachedNetwork","NETWORKS","isIFrameLoading","setIsIFrameLoading","inputAppUrl","setInputAppUrl","setTx","isSafeDappsOpen","setIsSafeDappsOpen","safeDapps","setSafeDapps","searchSafeDapp","setSearchSafeDapp","filteredSafeDapps","setFilteredSafeDapps","setRefresh","fetchSafeDapps","dapps","d","dapp","toLocaleLowerCase","hideModal","minHeight","maxHeight","overflow","overflowX","overflowY","paddingBottom","maxWidth","gutter","i","iconUrl","minWidth","ref","onLoad","isIframe","TransactionListItem","readContracts","contractName","transactionHash","txnData","setTxnData","showModal","parsedData","newData","argumentError","parsedTransaction","Item","border","nonce","toSelf","EllipsisOutlined","txDisplay","useEventListener","eventName","eventData","setEventData","loadEvents","filters","queryFilter","queryEvents","Panel","Collapse","Owners","currentMultiSigAddress","reDeployWallet","contractNameForEvent","ownerEvents","setOwnerEvents","allOwnerEvents","Set","prevOwners","forEach","ownerEvent","added","add","owner","delete","loadOwnersEvents","contractEvent","header","dataSource","renderItem","ownerAddress","collapsible","prevOwnerAddress","CreateModalSentOverlay","pointerEvents","backdropFilter","gap","txError","errorText","StopOutlined","txSuccess","successText","CheckCircleOutlined","pendingText","transform","CreateMultiSigModal","writeContracts","isCreateModalVisible","poolServerUrl","getUserWallets","setReDeployWallet","currentNetworkName","deployType","setDeployType","pendingCreate","setPendingCreate","txSent","setTxSent","setTxError","setTxSuccess","setSignaturesRequired","setOwners","walletName","setWalletName","preComputedAddress","setPreComputedAddress","isWalletExist","setIsWalletExist","showCreateModal","prevSignaturesRequired","prevWalletName","computedAddress","computed_wallet_address","addMultipleAddress","validateAddress","addresses","uniqueAddresses","finalUniqueAddresses","resetState","handleSubmit","valid","err","slice","some","o","validateFields","currentWalletName","create2","update","reason","code","walletAddress","reqData","res","catch","checkWalletExist","getCode","isContractExists","onInputWalletName","ghost","onBlur","showIcon","val","newOwners","updateOwner","danger","splice","removeOwnerField","DeleteOutlined","PlusOutlined","checkProps","prePorps","nextProps","React","memo","ImportMultiSigModal","networkOptions","multiSigWalletABI","userWallets","setSelectedWalletAddress","importedMultiSigs","setImportedMultiSigs","pendingImport","setPendingImport","setError","duplicateError","setDuplicateError","loadingWalletName","setLoadingWalletName","factoryVersion","setFactoryVersion","setNetwork","walletAddressDebounce","getFactoryVersion","Number","numberOfOwners","ownnersCount","importWalletData","chainIds","newImportedMultiSigs","checkDuplicateWallet","find","onEnterWalletAddress","onEnterWalletName","importURLWallet","isExists","spinning","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","toISOString","newPurpose","setNewPurpose","deployWarning","YourContract","setPurpose","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","then","json","docExplorerOpen","query","Home","allExecuteTransactionEvents","executeTransactionEvents","setExecuteTransactionEvents","txListLoading","setTxListLoading","updateExecutedEvents","filteredEvents","reverse","getWalletName","Sleep","ShareAltOutlined","tooltips","preProps","CreateTransaction","history","useHistory","methodName","setMethodName","newSignaturesRequired","setNewSignaturesRequired","customCallData","setCustomCallData","parsedCustomCallData","setParsedCustomCallData","setLoading","shouldCreateTransaction","setShouldCreateTransaction","isOwner","setIsOwner","setIsIframe","setIsTxLoaded","hasEdited","setHasEdited","customNonce","setCustomNonce","useLayoutEffect","createTransaction","alert","executeToAddress","getTransactionHash","newHash","arrayify","recover","signers","prev","hostURL","CodeOutlined","Transactions","setTransactions","selectedTx","setSelectedTx","usePoller","getTransactions","newTransactions","thisNonce","gte","validSignatures","sig","getSortedSigList","allSigs","sigList","sort","a","b","sub","finalSigList","finalSigners","used","hasSigned","hasEnoughSignatures","finalGaslimit","estimateGas","executeTransaction","estimateGasLimit","tos","sigs","has","executeBatch","Routes","userHasMultiSigs","DEBUG","BACKEND_URL","mainnetContracts","exact","path","DAI","WalletActions","selectNetworkOptions","onChangeNetwork","handleMultiSigChange","hideWalletItem","loadWallet","networkName","MinusCircleOutlined","initialNetwork","mainnet","Web3ModalSetup","MultiSigWalletAbi","App","injectedProvider","setInjectedProvider","setUserWallets","updateServerWallets","setUpdateServerWallets","useLocation","setCurrentMultiSigAddress","setNonce","setContractNameForEvent","hiddenWallets","setHiddenWallets","multiSigFactoryData","setMultiSigFactoryData","mainWalletConnectSession","selectedWalletAddress","deployedContracts","USE_BURNER_WALLET","REACT_APP_PROVIDER","useExchangeEthPrice","userProviderAndSigner","useUserProviderAndSigner","MultiSigWallet","walletCreate2Events","signaturesRequiredContract","useContractReader","nonceContract","useApp","useOnBlock","_lastBlockNumber","clearCachedProvider","disconnect","createEthersContractWallet","latestSignaturesRequired","currentMultiSig","currentMultiSigChainIds","getContractValues","syncWalletsWithServer","numberOfMultiSigs","totalWalletCount","walletsData","creator","Web3Provider","isUpdate","localWallets","allWallets","flat","lastMultiSigAddress","currentFactoryContractAddres","multiSigsForUser","recentMultiSigAddress","updateUserWallets","faucetAvailable","connection","HeaderBar","lte","stopPropagation","preventDefault","MainMenu","selectedKeys","pathname","BurnerWallet","align","prevTheme","client","ApolloClient","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","localhost","global","hostname","gnosis","optimism","polygon","arbitrum","goerli","sepolia","canto","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","localOptimismL1","localOptimism","kovanOptimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","time","resolve","reject"],"mappings":"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","file":"static/js/main.69e2397a.chunk.js","sourcesContent":["import React, { createContext, useEffect, useReducer } from \"react\";\n\nexport const StoreContext = createContext();\n\n// global reducer state that can override the properties with payload\nconst Reducer = (state, action) => {\n  return { ...state, ...action.payload };\n};\n\nconst StoreProvider = ({ children, store }) => {\n  const [state, dispatch] = useReducer(Reducer, store);\n\n  useEffect(() => {\n    if (store) {\n      dispatch({ payload: { ...store } });\n    }\n  }, [...Object.values(store)]);\n\n  return <StoreContext.Provider value={[state, dispatch]}>{children}</StoreContext.Provider>;\n};\n\nexport default StoreProvider;\n","import { useContext } from \"react\";\nimport { StoreContext } from \"./StoreProvider\";\n\nexport const useStore = () => useContext(StoreContext);\n","import React, { useEffect } from \"react\";\n\nimport { Alert, Button, Col, Row } from \"antd\";\nimport { useStore } from \"../../store/useStore\";\nimport { useParams } from \"react-router-dom\";\n\nconst EmptyWalletAlert = ({ isFactoryDeployed, setIsCreateModalVisible }) => {\n  const [_state, dispatch] = useStore();\n\n  const walletParams = useParams();\n\n  useEffect(() => {\n    if (\"walletAddress\" in walletParams && \"networkName\" in walletParams) {\n      dispatch({ payload: { walletParams } });\n    } else {\n      dispatch({ payload: { walletParams: undefined } });\n    }\n  }, [walletParams]);\n\n  return (\n    <>\n      {isFactoryDeployed !== undefined && (\n        <Row style={{ marginTop: 40 }}>\n          <Col span={12} offset={6}>\n            <Alert\n              message={\n                <>\n                  ✨{\" \"}\n                  <Button onClick={() => setIsCreateModalVisible(true)} type=\"link\" style={{ padding: 0 }}>\n                    Create\n                  </Button>{\" \"}\n                  or select your Multi-Sig ✨\n                </>\n              }\n              type=\"info\"\n            />\n          </Col>\n        </Row>\n      )}\n\n      {isFactoryDeployed === undefined && (\n        <Row style={{ marginTop: 40 }}>\n          <Col span={12} offset={6}>\n            <Alert\n              message={<> Sorry multisig not awailable on this network 😥 ( please change the network) </>}\n              type=\"error\"\n            />\n          </Col>\n        </Row>\n      )}\n    </>\n  );\n};\n\nexport default EmptyWalletAlert;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={props.blockieSize ? props.blockieSize : 8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <Blockies seed={address.toLowerCase()} size={props.blockieSize ? props.blockieSize : 8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      <span style={{paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { BigNumber } from \"ethers\";\n\nconst { utils } = require(\"ethers\");\nconst zero = BigNumber.from(0);\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n  const { provider, address } = props;\n\n  const balanceContract = useBalance(props.provider, props.address);\n  useEffect(() => {\n    setBalance(balanceContract);\n  }, [balanceContract]);\n\n  useEffect(() => {\n    async function getBalance() {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (!newBalance.eq(balance ?? zero)) {\n          setBalance(newBalance);\n        }\n      }\n    }\n    getBalance();\n  }, [address, provider]);\n\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: \"0 0.5rem\",\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"54.4444444\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\"\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { ethers } from \"ethers\";\n\nconst axios = require(\"axios\");\n\nfunction isJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\nexport default async function parseExternalContractTransaction(contractAddress, txData) {\n  // console.log(\"n-PARSE\", contractAddress, txData);\n  try {\n    let response = await axios.get(\"https://api.etherscan.io/api\", {\n      params: {\n        module: \"contract\",\n        action: \"getabi\",\n        address: contractAddress,\n        apikey: \"PJPKDC3BEBJQJVDEPCU5KAIA7WIV8IWQ51\",\n      },\n    });\n\n    const getParsedTransaction = async () => {\n      const abi = response?.data?.result;\n\n      if (abi && txData && txData !== \"\" && isJsonString(abi)) {\n        const iface = new ethers.utils.Interface(JSON.parse(abi));\n        return iface.parseTransaction({ data: txData });\n      }\n    };\n\n    return await getParsedTransaction(response);\n  } catch (error) {\n    console.log(\"parseExternalContractTransaction error:\", error);\n  }\n}\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n  const [displayMax, setDisplayMax] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const balance = useBalance(props.provider, props.contractAddress);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  let gasCost = 0;\n\n  if (usingBalance) {\n    if(props.gasPrice){\n      gasCost =  parseInt(props.gasPrice, 10) * 150000 / 10 ** 18;\n    }\n\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance - gasCost);\n    if (floatBalance < 0) {\n      floatBalance = 0;\n    }\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price;\n\n  function getBalance(_mode) {\n    setValue(floatBalance);\n    if (_mode === \"USD\") {\n      displayBalance = (floatBalance * price).toFixed(2);\n    } else {\n      displayBalance = floatBalance.toFixed(4);\n    }\n    return displayBalance;\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <div>\n    <span\n      style={{ cursor: \"pointer\", color: \"red\", float: \"right\", marginTop: \"-5px\" }}\n      onClick={() => {\n        setDisplay(getBalance(mode));\n        setDisplayMax(true);\n        if (typeof props.onChange === \"function\") {\n          props.onChange(floatBalance);\n        }\n      }}\n    >\n      max\n    </span>\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                displayMax ? setDisplay(getBalance(\"ETH\")) : setDisplay(currentValue);\n              } else if (mode === \"ETH\") {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  displayMax ? setDisplay(getBalance(\"USD\")) : setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        setDisplayMax(false);\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n        </div>\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            contractAddress={selectedAddress}\n            provider={props.provider}\n            gasPrice={props.gasPrice}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-around\" }}>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/**\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n  isFactoryDeployed,\n  gasPrice\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  let accountButton;\n  if (web3Modal?.cachedProvider) {\n    accountButton = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButton = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  return (\n    <div\n      className=\"flex\"\n      // style={{ display: \"flex\" }}\n    >\n      <div\n        // style={\n        //   {\n        // border: \"1px solid #d9d9d9\",\n        // borderRadius: \"9999px\",\n        // paddingLeft: \"0.875rem\",\n        // display: \"flex\",\n        // alignItems: \"center\",\n        //   }\n        // }\n        className=\"border border-gray-300  flex items-center rounded-3xl \"\n      >\n        <Balance address={address} provider={localProvider} price={price} size={\"1.125rem\"} />\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={\"1.4rem\"}\n          padding={\"0px\"}\n          gasPrice={gasPrice}\n        />\n        <div\n          // style={\n          //   {\n          // border: \"1px solid transparent\",\n          // borderRadius: \"9999px\",\n          // backgroundColor: currentTheme === \"light\" ? \"#f1f5f9\" : \"#262626\",\n          // marginLeft: \"0.5rem\",\n          // padding: \"0.375rem 0.875rem\",\n          //   }\n          // }\n          className={`border-2  rounded-3xl  ml-2 p-1 ${\n            currentTheme === \"light\" ? \"border-gray-200 bg-gray-100\" : \"border-gray-500 bg-gray-800\"\n          }`}\n        >\n          {address && (\n            <Address\n              address={address}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              // fontSize={\"1.125rem\"}\n              blockieSize={8}\n              fontSize={16}\n            />\n          )}\n        </div>\n      </div>\n      <Button\n        // style={{ verticalAlign: \"top\", marginLeft: 8, height: \"auto\" }}\n        className=\"ml-2\"\n        shape=\"round\"\n        size=\"large\"\n        onClick={accountButton.action}\n        disabled={isFactoryDeployed === undefined}\n      >\n        {accountButton.name}\n      </Button>\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\n\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{fontSize:24}}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address}/>\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n**/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\n// displays a page header\n\nexport default function Header(props) {\n  return (\n    <div className=\"flex justify-between items-center p-2  shadow-sm \">\n      <div className=\" flex flex-1 items-center\">\n        <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\n          👛 multisig.lol\n        </Title>\n        <a href=\"https://github.com/austintgriffith/maas\" target=\"_blank\">\n          warning: prototype for testnet use (view code)\n        </a>\n      </div>\n      {props.children}\n    </div>\n  );\n}\n","import { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\n\n// added display of 0 if price={price} is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n**/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price && props.price.toFixed && props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useState } from \"react\";\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue, ttl) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n        return parsedItem.value;\n      }\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (ttl) {\n        const now = new Date();\n\n        // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl,\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [JSON.stringify(urlArray)]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  }\n\n  // console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ position: \"absolute\", left: 0, bottom: \"-45px\", padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { useEffect, useState } from \"react\";\nimport { Spin } from \"antd\";\nimport axios from \"axios\";\n\nconst { BigNumber, ethers } = require(\"ethers\");\n\n// set up your access-key, if you don't have one or you want to generate new one follow next link\n// https://dashboard.tenderly.co/account/authorization\n\n// Create a .env file in the react-app folder with the credentials\n//REACT_APP_TENDERLY_USER = \"\"\n//REACT_APP_TENDERLY_PROJECT = \"\"\n//REACT_APP_TENDERLY_ACCESS_KEY = \"\"\n\nconst TENDERLY_USER = process.env.REACT_APP_TENDERLY_USER;\nconst TENDERLY_PROJECT = process.env.REACT_APP_TENDERLY_PROJECT;\nconst TENDERLY_ACCESS_KEY = process.env.REACT_APP_TENDERLY_ACCESS_KEY;\n\nconst SIMULATE_URL = `https://api.tenderly.co/api/v1/account/${TENDERLY_USER}/project/${TENDERLY_PROJECT}/simulate`;\nconst OPTS = {\n  headers: {\n    'X-Access-Key': TENDERLY_ACCESS_KEY\n  }\n}\n\nexport default function TenderlySimulation({ params, address, multiSigWallet, signaturesRequired}) {\n  const [simulated, setSimulated] = useState(false);\n  const [simulationFailed, setSimulationFailed] = useState(false);\n  const [simulationUnexpectedError, setSimulationUnexpectedError] = useState(false);\n  const [simulationId, setSimulationId] = useState();\n\n  useEffect(()=> {\n    const simulateTransaction = async () => {\n      try {\n        if (!params || !address || !multiSigWallet || !signaturesRequired) {\n          return;\n        }\n\n        const value = params.amount ? ethers.utils.parseEther(\"\" + parseFloat(params.amount).toFixed(12)) : \"0x00\";\n        const txData = (params.data && params.data != \"0x\") ? params.data : \"0x\";\n        const data = multiSigWallet.interface.encodeFunctionData(\"executeTransaction\", [params.to, value, txData, params.signatures]);\n\n        const multiSigWalletAddressLowerCase = multiSigWallet.address.toLowerCase(); // Tenderly does a lowerCase on the contract address\n\n        let body; // Tenderly simulation transaction params\n\n        const currentSignaturesCount = params.signatures.length;\n\n        if (currentSignaturesCount < signaturesRequired.toNumber()) {\n          // If there are not enough signatures, we need to do state overrides for the simulation\n          // We override signaturesRequired with the currentSignaturesCount, \n          // so we can simulate the transaction even though we don't have all the signatures yet\n\n          // Tenderly docs\n          // https://tenderlydev.notion.site/Sim-API-With-State-Overrides-83d80213689b43de8f3d45e121689b42#0a87b56e05af47ffb2304777f9229843\n          // https://tenderlydev.notion.site/Sim-API-With-State-Overrides-83d80213689b43de8f3d45e121689b42#e00e8c2a9183421a9495fb78742d9c58\n\n/*\n          I'm leaving step 1 and 2 here, even though it is not used right now\n          In order to use state overrides, we need to verify the contract on Tenderly\n          I did it once, so I could use the ENCODE_STATE_API and save the response,\n          which can be reused for not verified contracts as well:\n\n          \"stateOverrides\": {\n              [multiSigWalletAddressLowerCase]: {\n                  \"value\": {\n                      \"0x0000000000000000000000000000000000000000000000000000000000000003\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n                  }\n              }\n            }\n          };\n\n          // 1: prepare state overrides. This is where you specify all the contracts you need to override for the simulation.\n          const stateOverridesSpecification = {\n            networkID: `${params.chainId}`, // a STRING: network ID as \"3\"\n            // stateOverrides is a specification of assignments: Map<ContractAddress, AssignmentsSpecification>\n            //    - The key is the contract's address (so you can override state in multiple contracts)\n            //    - AssignmentsSpecification: The value is an object specifying overrides of state variables' values.\n            //      To achieve kvStore[1] = 99 add \"kvStore[1]\": \"99\" to as an entry of the value map.\n            //      Left hand side is the key in this JSON (\"kvStore[1]\") and right hand side of the assignment is the value (\"99\").\n            //\n            stateOverrides: {\n                [multiSigWallet.address]: {\n                    value: {\n                        // overrides of contract state override (fields come from contract's state vars)\n                        \"signaturesRequired\": \"1\",\n                    }\n                }\n            }\n          }\n\n          // 2: Encode state overrides (intermediary step)\n          const ENCODE_STATE_API = `https://api.tenderly.co/api/v1/account/${TENDERLY_USER}/project/${TENDERLY_PROJECT}/contracts/encode-states`;\n          const encodedSatateResponse = await axios.post(ENCODE_STATE_API, stateOverridesSpecification, OPTS);\n          const encodedStateOverrides = encodedSatateResponse.data;\n */         \n          const encodedStateOverrides = {\n            \"stateOverrides\": {\n              [multiSigWalletAddressLowerCase]: {\n                  \"value\": {\n                      //\"0x0000000000000000000000000000000000000000000000000000000000000003\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n                      \"0x0000000000000000000000000000000000000000000000000000000000000003\": ethers.utils.hexlify(currentSignaturesCount)\n                  }\n              }\n            }\n          };\n\n          // 3: Prepare transaction\n          const unsignedTransactionToSimulate = await multiSigWallet.populateTransaction.signaturesRequired();\n\n          // 4: Create a transaction and pass encodedStateOverrides under state_objects\n          body = {\n            ...unsignedTransactionToSimulate, // \n            input: data, // input is necessary\n            network_id: `${params.chainId}`, //network ID: a string\n            \"from\": address, // any address\n            to: multiSigWalletAddressLowerCase,\n\n            /* \n                This is again a mapping; Map<ContractAddress, {storage: encodedStorageOverrides }> \n                populate storage with the value in encodedStateOverrides which corresponds  \n            */\n            state_objects: {\n                [multiSigWalletAddressLowerCase]: {\n                    storage: encodedStateOverrides.stateOverrides[multiSigWalletAddressLowerCase].value\n                }\n            },\n            save: true // saves to dashboard\n          }\n\n          console.log(\"Simulating with state overrides\")\n        }\n        else {\n          body = {\n            // standard TX fields\n            \"network_id\": params.chainId,\n            \"from\": address,\n            \"to\": multiSigWalletAddressLowerCase,\n            \"input\": data,\n            //\"gas\": 61606000,\n            //\"gas_price\": \"0\",\n            //\"value\": params.amount ? ethers.utils.parseEther(params.amount.toString()).toString() : \"0\", Let's keep this here to remember the hours long debugging\n            \"value\": \"0\",\n            // simulation config (tenderly specific)\n            \"save_if_fails\": true,\n            \"save\": true,\n            //\"simulation_type\": \"quick\"\n          }\n\n          console.log(\"Simulating with all the signatures, without state overrides\")\n        }\n\n        const simResponse = await axios.post(SIMULATE_URL, body, OPTS);\n        console.log(\"Returned value: \", simResponse.data.transaction.transaction_info.call_trace.output);\n\n        if (simResponse.data.simulation.status === false) {\n          setSimulationFailed(true);\n        }\n\n        setSimulationId(simResponse.data.simulation.id);\n        setSimulated(true);\n      }\n      catch(error) {\n        setSimulationUnexpectedError(true);\n        console.error(\"simulateTransaction\", error)\n      }\n    }\n\n    simulateTransaction();\n  },[]);\n\n  return (\n    <div>\n       <div style={{ textAlign: \"center\"}}>\n          {!simulated && !simulationUnexpectedError && <>Simulating on Tenderly... <Spin/></>}\n          {simulated && simulationId && <>Simulating on <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://dashboard.tenderly.co/public/${TENDERLY_USER}/${TENDERLY_PROJECT}/simulator/${simulationId}`}>Tenderly</a> {!simulationFailed ? \"was successful!\" : \"has failed!\"}</>}\n          {simulationUnexpectedError && <>Couldn't simulate on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tenderly.co/\">Tenderly</a> because of an unexpected error.</>}\n       </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { Address, Balance } from \"..\";\nimport { ethers } from \"ethers\";\n\nexport default function TransactionDetailsModal({\n  visible,\n  handleOk,\n  handleCancel,\n  mainnetProvider,\n  price,\n  txnInfo = null,\n  showFooter = false,\n  to = false,\n  value = false,\n  type = \"\",\n}) {\n  return (\n    <Modal\n      title={`${ type } Transaction Details`}\n      visible={visible}\n      onCancel={handleCancel}\n      destroyOnClose\n      onOk={handleOk}\n      closable\n      maskClosable\n      footer={\n        showFooter\n          ? [\n            <Button key=\"cancel\" onClick={handleCancel}>\n              Cancel\n            </Button>,\n            <Button key=\"ok\" type=\"primary\" onClick={handleOk}>\n              Propose\n            </Button>,\n          ]\n          : null\n      }\n    >\n      {/* wallet connect tx details  */}\n      {to && value && (\n        <>\n          <div>\n            <div className=\"m-2\">\n              to: <span className=\"bg-gray-300 p-1 rounded-md\">{to}</span>{\" \"}\n            </div>\n            <div className=\"m-2\">\n              value: <span className=\"bg-gray-300 p-1 rounded-md\">{value}</span>{\" \"}\n            </div>\n            <div className=\"m-2\">{!txnInfo && <span className=\"text-blue-500\">can't parse tx data !</span>}</div>\n          </div>\n        </>\n      )}\n\n      {txnInfo && (\n        <div>\n          <p>\n            <b>Event Name :</b> {txnInfo.functionFragment.name}\n          </p>\n          <p>\n            <b>Function Signature :</b> {txnInfo.signature}\n          </p>\n          <h4>Arguments :&nbsp;</h4>\n          {txnInfo.functionFragment.inputs.map((element, index) => {\n            if (element.type === \"address\") {\n              return (\n                <div\n                  key={element.name}\n                  style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"left\" }}\n                >\n                  <b>{element.name} :&nbsp;</b>\n                  <Address fontSize={16} address={txnInfo.args[index]} ensProvider={mainnetProvider} />\n                </div>\n              );\n            } else if (element.type === \"uint256\") {\n\n              //first try toNumber\n              let numberDisplay = \"\"\n              try{\n                numberDisplay = \"\"+txnInfo.args[index].toNumber()\n              }catch(e){\n                numberDisplay = \"\"+txnInfo.args[index].toString()\n              }\n\n              return (\n                <p key={element.name}>\n                  {element.name === \"value\" ? (\n                    <>\n                      <b>{element.name} : </b>{\" \"}\n                      <Balance fontSize={16} balance={txnInfo.args[index]} dollarMultiplier={price} />{\" \"}\n                    </>\n                  ) : (\n                    <>\n                      <b>{element.name} : </b> {txnInfo.args[index] && numberDisplay}\n                    </>\n                  )}\n                </p>\n              );\n            } else {\n              return (\n                <p key={element.name}>\n                  {\n                    <>\n                      <b>{element.name} : </b> {txnInfo.args[index]}\n                    </>\n                  }\n                </p>\n              );\n            }\n          })}\n          <p>\n            <b>SigHash : &nbsp;</b>\n            {txnInfo.sighash}\n          </p>\n        </div>\n      )}\n    </Modal>\n  );\n}\n","import { BigNumberish, BytesLike } from \"ethers\";\n\nexport declare const INTERFACE_MESSAGES: {\n  readonly ENV_INFO: \"ENV_INFO\";\n  readonly ON_SAFE_INFO: \"ON_SAFE_INFO\";\n  readonly TRANSACTION_CONFIRMED: \"TRANSACTION_CONFIRMED\";\n  readonly TRANSACTION_REJECTED: \"TRANSACTION_REJECTED\";\n};\nexport type InterfaceMessageIds = keyof typeof INTERFACE_MESSAGES;\n\nexport declare type LowercaseNetworks =\n  | \"mainnet\"\n  | \"morden\"\n  | \"ropsten\"\n  | \"rinkeby\"\n  | \"goerli\"\n  | \"kovan\"\n  | \"xdai\"\n  | \"energy_web_chain\"\n  | \"volta\"\n  | \"unknown\";\nexport interface SafeInfo {\n  safeAddress: string;\n  network: LowercaseNetworks;\n  ethBalance: string;\n}\nexport interface InterfaceMessageToPayload {\n  [INTERFACE_MESSAGES.ON_SAFE_INFO]: SafeInfo;\n  [INTERFACE_MESSAGES.TRANSACTION_CONFIRMED]: {\n    safeTxHash: string;\n  };\n  [INTERFACE_MESSAGES.ENV_INFO]: {\n    txServiceUrl: string;\n  };\n  [INTERFACE_MESSAGES.TRANSACTION_REJECTED]: Record<string, unknown>;\n}\nexport type InterfaceMessageProps<T extends InterfaceMessageIds> = {\n  messageId: T;\n  data: InterfaceMessageToPayload[T];\n};\nexport declare type RequestId = number | string;\n\n// Messaging\nexport enum Methods {\n  sendTransactions = \"sendTransactions\",\n  rpcCall = \"rpcCall\",\n  getChainInfo = \"getChainInfo\",\n  getSafeInfo = \"getSafeInfo\",\n  getTxBySafeTxHash = \"getTxBySafeTxHash\",\n  getSafeBalances = \"getSafeBalances\",\n  signMessage = \"signMessage\",\n  signTypedMessage = \"signTypedMessage\",\n  getEnvironmentInfo = \"getEnvironmentInfo\",\n  requestAddressBook = \"requestAddressBook\",\n  wallet_getPermissions = \"wallet_getPermissions\",\n  wallet_requestPermissions = \"wallet_requestPermissions\",\n}\nexport declare type SDKRequestData<M extends Methods = Methods, P = unknown> = {\n  id: RequestId;\n  params: P;\n  env: {\n    sdkVersion: string;\n  };\n  method: M;\n};\nexport declare type SDKMessageEvent = MessageEvent<SDKRequestData>;\nexport declare type SendTransactionsResponse = {\n  safeTxHash: string;\n};\nexport enum RPC_AUTHENTICATION {\n  API_KEY_PATH = \"API_KEY_PATH\",\n  NO_AUTHENTICATION = \"NO_AUTHENTICATION\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport type RpcUri = {\n  authentication: RPC_AUTHENTICATION;\n  value: string;\n};\nexport type BlockExplorerUriTemplate = {\n  address: string;\n  txHash: string;\n  api: string;\n};\nexport type NativeCurrency = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  logoUri: string;\n};\nexport type Theme = {\n  textColor: string;\n  backgroundColor: string;\n};\nexport enum GAS_PRICE_TYPE {\n  ORACLE = \"ORACLE\",\n  FIXED = \"FIXED\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport type GasPriceOracle = {\n  type: GAS_PRICE_TYPE.ORACLE;\n  uri: string;\n  gasParameter: string;\n  gweiFactor: string;\n};\nexport type GasPriceFixed = {\n  type: GAS_PRICE_TYPE.FIXED;\n  weiValue: string;\n};\nexport type GasPriceUnknown = {\n  type: GAS_PRICE_TYPE.UNKNOWN;\n};\nexport type GasPrice = (GasPriceOracle | GasPriceFixed | GasPriceUnknown)[];\nexport enum FEATURES {\n  ERC721 = \"ERC721\",\n  SAFE_APPS = \"SAFE_APPS\",\n  CONTRACT_INTERACTION = \"CONTRACT_INTERACTION\",\n  DOMAIN_LOOKUP = \"DOMAIN_LOOKUP\",\n  SPENDING_LIMIT = \"SPENDING_LIMIT\",\n  EIP1559 = \"EIP1559\",\n  SAFE_TX_GAS_OPTIONAL = \"SAFE_TX_GAS_OPTIONAL\",\n  TX_SIMULATION = \"TX_SIMULATION\",\n}\nexport type _ChainInfo = {\n  transactionService: string;\n  chainId: string; // Restricted by what is returned by the CGW\n  chainName: string;\n  shortName: string;\n  l2: boolean;\n  description: string;\n  rpcUri: RpcUri;\n  safeAppsRpcUri: RpcUri;\n  publicRpcUri: RpcUri;\n  blockExplorerUriTemplate: BlockExplorerUriTemplate;\n  nativeCurrency: NativeCurrency;\n  theme: Theme;\n  ensRegistryAddress?: string;\n  gasPrice: GasPrice;\n  disabledWallets: string[];\n  features: FEATURES[];\n};\nexport declare type ChainInfo = Pick<\n  _ChainInfo,\n  | \"chainName\"\n  | \"chainId\"\n  | \"shortName\"\n  | \"nativeCurrency\"\n  | \"blockExplorerUriTemplate\"\n>;\nexport enum TransactionStatus {\n  AWAITING_CONFIRMATIONS = \"AWAITING_CONFIRMATIONS\",\n  AWAITING_EXECUTION = \"AWAITING_EXECUTION\",\n  CANCELLED = \"CANCELLED\",\n  FAILED = \"FAILED\",\n  SUCCESS = \"SUCCESS\",\n  PENDING = \"PENDING\",\n  WILL_BE_REPLACED = \"WILL_BE_REPLACED\",\n}\nexport type AddressEx = {\n  value: string;\n  name?: string;\n  logoUri?: string;\n};\nexport enum TransferDirection {\n  INCOMING = \"INCOMING\",\n  OUTGOING = \"OUTGOING\",\n  UNKNOWN = \"UNKNOWN\",\n}\nexport enum TransactionTokenType {\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  NATIVE_COIN = \"NATIVE_COIN\",\n}\nexport type Erc20Transfer = {\n  type: TransactionTokenType.ERC20;\n  tokenAddress: string;\n  tokenName?: string;\n  tokenSymbol?: string;\n  logoUri?: string;\n  decimals?: number;\n  value: string;\n};\nexport type Erc721Transfer = {\n  type: TransactionTokenType.ERC721;\n  tokenAddress: string;\n  tokenId: string;\n  tokenName?: string;\n  tokenSymbol?: string;\n  logoUri?: string;\n};\nexport type NativeCoinTransfer = {\n  type: TransactionTokenType.NATIVE_COIN;\n  value: string;\n};\nexport type TransferInfo = Erc20Transfer | Erc721Transfer | NativeCoinTransfer;\nexport interface Transfer {\n  type: \"Transfer\";\n  sender: AddressEx;\n  recipient: AddressEx;\n  direction: TransferDirection;\n  transferInfo: TransferInfo;\n}\nexport type ParamValue = string | ParamValue[];\nexport enum Operation {\n  CALL = 0,\n  DELEGATE = 1,\n}\nexport type InternalTransaction = {\n  operation: Operation;\n  to: string;\n  value?: string;\n  data?: string;\n  dataDecoded?: DataDecoded;\n};\nexport type ValueDecodedType = InternalTransaction[];\nexport type Parameter = {\n  name: string;\n  type: string;\n  value: ParamValue;\n  valueDecoded?: ValueDecodedType;\n};\nexport type DataDecoded = {\n  method: string;\n  parameters?: Parameter[];\n};\nexport enum SettingsInfoType {\n  SET_FALLBACK_HANDLER = \"SET_FALLBACK_HANDLER\",\n  ADD_OWNER = \"ADD_OWNER\",\n  REMOVE_OWNER = \"REMOVE_OWNER\",\n  SWAP_OWNER = \"SWAP_OWNER\",\n  CHANGE_THRESHOLD = \"CHANGE_THRESHOLD\",\n  CHANGE_IMPLEMENTATION = \"CHANGE_IMPLEMENTATION\",\n  ENABLE_MODULE = \"ENABLE_MODULE\",\n  DISABLE_MODULE = \"DISABLE_MODULE\",\n  SET_GUARD = \"SET_GUARD\",\n  DELETE_GUARD = \"DELETE_GUARD\",\n}\nexport type SetFallbackHandler = {\n  type: SettingsInfoType.SET_FALLBACK_HANDLER;\n  handler: AddressEx;\n};\nexport type AddOwner = {\n  type: SettingsInfoType.ADD_OWNER;\n  owner: AddressEx;\n  threshold: number;\n};\nexport type SettingsInfo =\n  | SetFallbackHandler\n  | AddOwner\n  | RemoveOwner\n  | SwapOwner\n  | ChangeThreshold\n  | ChangeImplementation\n  | EnableModule\n  | DisableModule\n  | SetGuard\n  | DeleteGuard;\nexport type RemoveOwner = {\n  type: SettingsInfoType.REMOVE_OWNER;\n  owner: AddressEx;\n  threshold: number;\n};\nexport type SwapOwner = {\n  type: SettingsInfoType.SWAP_OWNER;\n  oldOwner: AddressEx;\n  newOwner: AddressEx;\n};\nexport type ChangeThreshold = {\n  type: SettingsInfoType.CHANGE_THRESHOLD;\n  threshold: number;\n};\nexport type ChangeImplementation = {\n  type: SettingsInfoType.CHANGE_IMPLEMENTATION;\n  implementation: AddressEx;\n};\nexport type EnableModule = {\n  type: SettingsInfoType.ENABLE_MODULE;\n  module: AddressEx;\n};\nexport type DisableModule = {\n  type: SettingsInfoType.DISABLE_MODULE;\n  module: AddressEx;\n};\nexport type SetGuard = {\n  type: SettingsInfoType.SET_GUARD;\n  guard: AddressEx;\n};\nexport type DeleteGuard = {\n  type: SettingsInfoType.DELETE_GUARD;\n};\nexport type SettingsChange = {\n  type: \"SettingsChange\";\n  dataDecoded: DataDecoded;\n  settingsInfo?: SettingsInfo;\n};\nexport interface Custom {\n  type: \"Custom\";\n  to: AddressEx;\n  dataSize: string;\n  value: string;\n  methodName?: string;\n  actionCount?: number;\n  isCancellation: boolean;\n}\nexport type MultiSend = {\n  type: \"Custom\";\n  to: AddressEx;\n  dataSize: string;\n  value: string;\n  methodName: \"multiSend\";\n  actionCount: number;\n  isCancellation: boolean;\n};\nexport type Cancellation = Custom & {\n  isCancellation: true;\n};\nexport type Creation = {\n  type: \"Creation\";\n  creator: AddressEx;\n  transactionHash: string;\n  implementation?: AddressEx;\n  factory?: AddressEx;\n};\nexport type TransactionInfo =\n  | Transfer\n  | SettingsChange\n  | Custom\n  | MultiSend\n  | Cancellation\n  | Creation;\nexport type TransactionData = {\n  hexData?: string;\n  dataDecoded?: DataDecoded;\n  to: AddressEx;\n  value?: string;\n  operation: Operation;\n  addressInfoIndex?: { [key: string]: AddressEx };\n  trustedDelegateCallTarget: boolean;\n};\nexport type ModuleExecutionDetails = {\n  type: \"MODULE\";\n  address: AddressEx;\n};\nexport type MultisigConfirmation = {\n  signer: AddressEx;\n  signature?: string;\n  submittedAt: number;\n};\nexport enum TokenType {\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  NATIVE_TOKEN = \"NATIVE_TOKEN\",\n}\nexport type TokenInfo = {\n  type: TokenType;\n  address: string;\n  decimals: number;\n  symbol: string;\n  name: string;\n  logoUri: string;\n};\nexport type MultisigExecutionDetails = {\n  type: \"MULTISIG\";\n  submittedAt: number;\n  nonce: number;\n  safeTxGas: string;\n  baseGas: string;\n  gasPrice: string;\n  gasToken: string;\n  refundReceiver: AddressEx;\n  safeTxHash: string;\n  executor?: AddressEx;\n  signers: AddressEx[];\n  confirmationsRequired: number;\n  confirmations: MultisigConfirmation[];\n  rejectors?: AddressEx[];\n  gasTokenInfo?: TokenInfo;\n};\nexport type DetailedExecutionInfo =\n  | ModuleExecutionDetails\n  | MultisigExecutionDetails;\nexport type SafeAppInfo = {\n  name: string;\n  url: string;\n  logoUri: string;\n};\nexport type TransactionDetails = {\n  txId: string;\n  executedAt?: number;\n  txStatus: TransactionStatus;\n  txInfo: TransactionInfo;\n  txData?: TransactionData;\n  detailedExecutionInfo?: DetailedExecutionInfo;\n  txHash?: string;\n  safeAppInfo?: SafeAppInfo;\n};\nexport declare type GatewayTransactionDetails = TransactionDetails;\nexport type SafeBalanceResponse = {\n  fiatTotal: string;\n  items: Array<{\n    tokenInfo: TokenInfo;\n    balance: string;\n    fiatBalance: string;\n    fiatConversion: string;\n  }>;\n};\nexport declare type SafeBalances = SafeBalanceResponse;\nexport declare type EnvironmentInfo = {\n  origin: string;\n};\nexport declare type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\nexport declare type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\nexport declare type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\nexport interface MethodToResponse {\n  [Methods.sendTransactions]: SendTransactionsResponse;\n  [Methods.rpcCall]: unknown;\n  [Methods.getSafeInfo]: SafeInfo;\n  [Methods.getChainInfo]: ChainInfo;\n  [Methods.getTxBySafeTxHash]: GatewayTransactionDetails;\n  [Methods.getSafeBalances]: SafeBalances[];\n  [Methods.signMessage]: SendTransactionsResponse;\n  [Methods.signTypedMessage]: SendTransactionsResponse;\n  [Methods.getEnvironmentInfo]: EnvironmentInfo;\n  [Methods.requestAddressBook]: AddressBookItem[];\n  [Methods.wallet_getPermissions]: Permission[];\n  [Methods.wallet_requestPermissions]: Permission[];\n}\nexport declare type ErrorResponse = {\n  id: RequestId;\n  success: false;\n  error: string;\n  version?: string;\n};\nexport type SuccessResponse<T = MethodToResponse[Methods]> = {\n  id: RequestId;\n  data: T;\n  version?: string;\n  success: true;\n};\nexport declare const RPC_CALLS: {\n  readonly eth_call: \"eth_call\";\n  readonly eth_gasPrice: \"eth_gasPrice\";\n  readonly eth_getLogs: \"eth_getLogs\";\n  readonly eth_getBalance: \"eth_getBalance\";\n  readonly eth_getCode: \"eth_getCode\";\n  readonly eth_getBlockByHash: \"eth_getBlockByHash\";\n  readonly eth_getBlockByNumber: \"eth_getBlockByNumber\";\n  readonly eth_getStorageAt: \"eth_getStorageAt\";\n  readonly eth_getTransactionByHash: \"eth_getTransactionByHash\";\n  readonly eth_getTransactionReceipt: \"eth_getTransactionReceipt\";\n  readonly eth_getTransactionCount: \"eth_getTransactionCount\";\n  readonly eth_estimateGas: \"eth_estimateGas\";\n};\n\nexport declare type RpcCallNames = keyof typeof RPC_CALLS;\nexport declare type RPCPayload<P = unknown[]> = {\n  call: RpcCallNames;\n  params: P | unknown[];\n};\nexport interface MethodToResponse {\n  [Methods.sendTransactions]: SendTransactionsResponse;\n  [Methods.rpcCall]: unknown;\n  [Methods.getSafeInfo]: SafeInfo;\n  [Methods.getChainInfo]: ChainInfo;\n  [Methods.getTxBySafeTxHash]: GatewayTransactionDetails;\n  [Methods.getSafeBalances]: SafeBalances[];\n  [Methods.signMessage]: SendTransactionsResponse;\n  [Methods.signTypedMessage]: SendTransactionsResponse;\n  [Methods.getEnvironmentInfo]: EnvironmentInfo;\n  [Methods.requestAddressBook]: AddressBookItem[];\n  [Methods.wallet_getPermissions]: Permission[];\n  [Methods.wallet_requestPermissions]: Permission[];\n}\nexport declare type SignMessageParams = {\n  message: string;\n};\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: BigNumberish;\n  verifyingContract?: string;\n  salt?: BytesLike;\n}\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\nexport declare type TypedMessageTypes = {\n  [key: string]: TypedDataTypes[];\n};\nexport declare type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n};\nexport declare type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\nexport interface Transaction {\n  to: string;\n  value: string;\n  data: string;\n}\n","import { MutableRefObject, useEffect, useState } from \"react\";\nimport { MessageFormatter } from \"./messageFormatter\";\nimport {\n  SDKMessageEvent,\n  MethodToResponse,\n  Methods,\n  ErrorResponse,\n  RequestId,\n} from \"./types\";\nimport { getSDKVersion } from \"./utils\";\n\ntype MessageHandler = (\n  msg: SDKMessageEvent\n) =>\n  | void\n  | MethodToResponse[Methods]\n  | ErrorResponse\n  | Promise<MethodToResponse[Methods] | ErrorResponse | void>;\n\nexport enum LegacyMethods {\n  getEnvInfo = \"getEnvInfo\",\n}\n\ntype SDKMethods = Methods | LegacyMethods;\n\nclass AppCommunicator {\n  private iframeRef: MutableRefObject<HTMLIFrameElement | null>;\n  private handlers = new Map<SDKMethods, MessageHandler>();\n\n  constructor(iframeRef: MutableRefObject<HTMLIFrameElement | null>) {\n    this.iframeRef = iframeRef;\n\n    window.addEventListener(\"message\", this.handleIncomingMessage);\n  }\n\n  on = (method: SDKMethods, handler: MessageHandler): void => {\n    this.handlers.set(method, handler);\n  };\n\n  private isValidMessage = (msg: SDKMessageEvent): boolean => {\n    if (msg.data.hasOwnProperty(\"isCookieEnabled\")) {\n      return true;\n    }\n\n    const sentFromIframe = this.iframeRef.current?.contentWindow === msg.source;\n    const knownMethod = Object.values(Methods).includes(msg.data.method);\n\n    return sentFromIframe && knownMethod;\n  };\n\n  private canHandleMessage = (msg: SDKMessageEvent): boolean => {\n    return Boolean(this.handlers.get(msg.data.method));\n  };\n\n  send = (data: unknown, requestId: RequestId, error = false): void => {\n    const sdkVersion = getSDKVersion();\n    const msg = error\n      ? MessageFormatter.makeErrorResponse(\n          requestId,\n          data as string,\n          sdkVersion\n        )\n      : MessageFormatter.makeResponse(requestId, data, sdkVersion);\n    // console.log(\"send\", { msg });\n    this.iframeRef.current?.contentWindow?.postMessage(msg, \"*\");\n  };\n\n  handleIncomingMessage = async (msg: SDKMessageEvent): Promise<void> => {\n    const validMessage = this.isValidMessage(msg);\n    const hasHandler = this.canHandleMessage(msg);\n\n    if (validMessage && hasHandler) {\n      // console.log(\"incoming\", { msg: msg.data });\n\n      const handler = this.handlers.get(msg.data.method);\n      try {\n        // @ts-expect-error Handler existence is checked in this.canHandleMessage\n        const response = await handler(msg);\n\n        // If response is not returned, it means the response will be send somewhere else\n        if (typeof response !== \"undefined\") {\n          this.send(response, msg.data.id);\n        }\n      } catch (err: any) {\n        this.send(err.message, msg.data.id, true);\n      }\n    }\n  };\n\n  clear = (): void => {\n    window.removeEventListener(\"message\", this.handleIncomingMessage);\n  };\n}\n\nconst useAppCommunicator = (\n  iframeRef: MutableRefObject<HTMLIFrameElement | null>\n): AppCommunicator | undefined => {\n  const [communicator, setCommunicator] = useState<AppCommunicator | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    let communicatorInstance: AppCommunicator;\n    const initCommunicator = (\n      iframeRef: MutableRefObject<HTMLIFrameElement>\n    ) => {\n      communicatorInstance = new AppCommunicator(iframeRef);\n      setCommunicator(communicatorInstance);\n    };\n\n    initCommunicator(iframeRef as MutableRefObject<HTMLIFrameElement>);\n\n    return () => {\n      communicatorInstance?.clear();\n    };\n  }, [iframeRef]);\n\n  return communicator;\n};\n\nexport { useAppCommunicator };\n","import { Button, Input, Badge, Spin } from \"antd\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QrReader from \"react-qr-reader\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage } from \"../hooks\";\nimport { parseExternalContractTransaction } from \"../helpers\";\nimport TransactionDetailsModal from \"./MultiSig/TransactionDetailsModal\";\nimport MultiSigWalletAbi from \"../configs/MultiSigWallet_ABI.json\";\n\nlet CLIENT_META = {\n  description: \"Forkable multisig for prototyping.\",\n  url: \"https://multisig.lol\",\n  icons: [\"https://multisig.lol/multisiglol.png\"],\n  name: \"👛 multisig.lol\",\n};\n\nconst WalletConnectInput = ({ chainId, address, loadTransactionData, mainnetProvider, price }) => {\n  // localstates\n  const [data, setData] = useState();\n  const [to, setTo] = useState();\n  const [value, setValue] = useState();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [parsedTransactionData, setParsedTransactionData] = useState();\n  const [scan, setScan] = useState(false);\n  const [walletConnect_wallet, setWalletConnect_wallet] = useState(undefined);\n  const [walletLoading, setWalletLoading] = useState(false);\n\n  // localstorage states\n  const [walletConnectSession_wallet, setWalletConnectSession_wallet] = useLocalStorage(\n    \"walletConnectSession_wallet\",\n    undefined,\n  );\n  const [walletConnectSession_main, setWalletConnectSession_main] = useLocalStorage(\n    \"walletConnectSession_main\",\n    undefined,\n  );\n\n  const [walletConnectUri, setWalletConnectUri] = useLocalStorage(\"walletConnectUri_wallet\", \"\");\n  const [isConnected, setIsConnected] = useLocalStorage(\"isConnected_wallet\", false);\n  const [peerMeta, setPeerMeta] = useLocalStorage(\"peerMeta\");\n  // let location = useLocation();\n\n  useEffect(() => {\n    if (walletConnectUri && address) {\n      let walletConnect_wallet_cached = localStorage.getItem(\"walletConnectSession_wallet\");\n      // console.log(\"n-walletConnect_wallet_cached: \", walletConnect_wallet_cached);\n      if (Boolean(walletConnect_wallet_cached)) {\n        // set old wallet connect data\n        localStorage.setItem(\"walletconnect\", walletConnect_wallet_cached);\n\n        let walletConnectData = JSON.parse(walletConnect_wallet_cached);\n        const connector = new WalletConnect({\n          bridge: walletConnectData.bridge, // Required\n          clientMeta: CLIENT_META,\n        });\n\n        // if (!connector.connected) {\n        //   // create new session\n        //   connector.createSession();\n        // }\n\n        subscribeToEvents(connector);\n      }\n    }\n  }, [address]);\n\n  //\n  useEffect(() => {\n    // if (!isConnected) {\n    //   let nextSession = localStorage.getItem(\"wallectConnectNextSession\");\n    //   if (nextSession) {\n    //     localStorage.removeItem(\"wallectConnectNextSession\");\n    //     console.log(\"FOUND A NEXT SESSION IN CACHE\");\n    //     console.log(\"this is the\", nextSession);\n    //     setWalletConnectUri(nextSession);\n    //   } else if (walletConnectConnector) {\n    //     console.log(\"NOT CONNECTED AND walletConnectConnector\", walletConnectConnector);\n    //     setupConnector(walletConnectConnector);\n    //     setIsConnected(true);\n    //   } else if (walletConnectUri /*&&!walletConnectUriSaved*/) {\n    //     //CLEAR LOCAL STORAGE?!?\n    //     console.log(\" old uri was\", walletConnectUri);\n    //     console.log(\"clear local storage and connect...\", nextSession);\n    //     localStorage.removeItem(\"walletconnect\"); // lololol\n    //     setupConnector(\n    //       {\n    //         // Required\n    //         uri: walletConnectUri,\n    //         // Required\n    //       } /*,\n    //           {\n    //             // Optional\n    //             url: \"<YOUR_PUSH_SERVER_URL>\",\n    //             type: \"fcm\",\n    //             token: token,\n    //             peerMeta: true,\n    //             language: language,\n    //           }*/,\n    //     );\n    //   }\n    // }\n  }, [walletConnectUri]);\n\n  // useEffect(\n  //   () => {\n  //     if (address && !isConnected) {\n  //       resetConnection();\n  //     }\n  //   },\n  //   [address],\n  //   isConnected,\n  // );\n\n  useEffect(() => {\n    // set main wallet on load\n    // let mainWalletConnect = localStorage.getItem(\"walletconnect\");\n    // if (mainWalletConnect !== null) {\n    //   setWalletConnectSession_main(JSON.parse(mainWalletConnect));\n    // }\n\n    return () => {\n      // let mainWalletConnect = localStorage.getItem(\"mainWalletConnectSession\");\n      // console.log(\"n-mainWalletConnect: \", mainWalletConnect);\n      // // on unount set main WC instance\n      // localStorage.setItem(\"walletconnect\", mainWalletConnect);\n      // killSession(false);\n    };\n  }, []);\n  //\n\n  useEffect(() => {\n    // if (data && to) {\n    if (to) {\n      decodeFunctionData();\n    }\n  }, [data]);\n  //\n\n  const onWalletConnect = walletConnectUri => {\n    setWalletLoading(true);\n    const connector = setupConnector(walletConnectUri);\n    // console.log(\"n-connector: \", connector);\n    if (connector) {\n      setWalletConnectUri(walletConnectUri);\n\n      // create event listeners\n      subscribeToEvents(connector);\n    }\n  };\n\n  // const setupAndSubscribe = () => {\n  //   const connector = setupConnector();\n  //   console.log(\"n-connector: \", connector);\n  //   if (connector) {\n  //     subscribeToEvents(connector);\n  //     setWalletConnectSession_wallet(connector);\n  //   }\n  // };\n\n  const setupConnector = walletConnectUri => {\n    console.log(\" 📡 Connecting to Wallet Connect....\", walletConnectUri);\n    let connector;\n\n    /**----------------------\n     * check and save main wallet connect session\n     * as wallet connect with contract on create proposal is conflicting with main wc instance\n     * ---------------------*/\n    let mainWalletConnect = localStorage.getItem(\"walletconnect\");\n    if (mainWalletConnect !== null) {\n      setWalletConnectSession_main(JSON.parse(mainWalletConnect));\n      // remove  main wallect connect session\n      localStorage.removeItem(\"walletconnect\");\n    }\n\n    try {\n      // load wallet connect dynamically\n      // const WalletConnect = require(\"@walletconnect/client\").default;\n      console.log(\"n-walletConnectUri: LOADED \", walletConnectUri);\n\n      connector = new WalletConnect({ uri: walletConnectUri, clientMeta: CLIENT_META });\n\n      // return connector;\n    } catch (error) {\n      console.log(\"n-error: \", error);\n      console.error(\"setupConnector error:\", error);\n      localStorage.removeItem(\"walletConnectUri\");\n      setWalletConnectUri(\"\");\n      setWalletConnect_wallet(undefined);\n      return;\n    }\n    return connector;\n  };\n\n  const subscribeToEvents = connector => {\n    // console.log(\"n-connector: EVENT LISTENER \", connector);\n    setWalletConnect_wallet(connector);\n\n    connector.on(\"session_request\", (error, payload) => {\n      if (error) {\n        console.log(\"n-error: session request \", error);\n        throw error;\n      }\n\n      console.log(\"Event: session_request\", payload);\n      setPeerMeta(payload.params[0].peerMeta);\n\n      connector.approveSession({\n        accounts: [address],\n        chainId,\n      });\n\n      // console.log(\"n-connector.connected: \", connector.connected);\n      if (connector.connected) {\n        setIsConnected(true);\n        console.log(\"Session successfully connected.\");\n\n        console.log(\"WALLET CONNECTED !!! \", connector.connected);\n\n        let walletConnect = localStorage.getItem(\"walletconnect\");\n        setWalletConnectSession_wallet(JSON.parse(walletConnect));\n        setWalletLoading(false);\n      }\n    });\n    //\n    connector.on(\"call_request\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      console.log(\"Event: call_request\", payload);\n      parseCallRequest(payload);\n    });\n    //\n\n    connector.on(\"disconnect\", (error, payload) => {\n      console.log(\"disconnected \");\n      console.log(\"Event: disconnect\", payload);\n\n      // remove wallet connect instance\n      localStorage.removeItem(\"walletconnect\");\n      setWalletConnectSession_wallet(\"\");\n\n      resetConnection();\n\n      setTimeout(() => {\n        window.location.reload(true);\n      }, 500);\n\n      if (error) {\n        throw error;\n      }\n    });\n  };\n\n  const parseCallRequest = payload => {\n    const callData = payload.params[0];\n\n    setValue(callData.value);\n    setTo(callData.to);\n    setData(callData.data ? callData.data : \"0x\");\n  };\n  //\n\n  const decodeFunctionData = async () => {\n    try {\n      // console.log(\"n-decodeFunctionData: \", to, data);\n      const parsedTransactionData = await parseExternalContractTransaction(to, data);\n      // console.log(\"n-parsedTransactionData: \", parsedTransactionData);\n      setParsedTransactionData(parsedTransactionData);\n      setIsModalVisible(true);\n    } catch (error) {\n      console.log(error);\n      setParsedTransactionData(null);\n    }\n  };\n  //\n\n  const killSession = (isReload = true) => {\n    try {\n      console.log(\"ACTION\", \"killSession\");\n\n      // remove WC of multisig\n      localStorage.removeItem(\"walletConnectUri\");\n      console.log(\"the connection was reset\");\n\n      if (isReload) {\n        if (isConnected) {\n          //note: check disconnect event\n          walletConnect_wallet.killSession();\n        }\n\n        // setIsConnected(false);\n        // localStorage.removeItem(\"walletconnect\");\n\n        // console.log(\"n-walletConnectSession_main: \", walletConnectSession_main);\n        // localStorage.setItem(\"walletconnect\", JSON.stringify(walletConnectSession_main));\n\n        // setTimeout(() => {\n        //   // window.location.reload(true);\n        // }, 500);\n      }\n\n      // resetConnection();\n    } catch (error) {\n      console.log(\"n-error:kill session \", error);\n    }\n  };\n  //\n\n  const hideModal = () => setIsModalVisible(false);\n\n  const handleOk = () => {\n    loadTransactionData({\n      data,\n      to,\n      value,\n    });\n  };\n\n  const resetConnection = () => {\n    console.log(\"n-resetConnection: RESET EVERYTHING \");\n    setWalletConnectUri(\"\");\n    setIsConnected(false);\n    setWalletConnectSession_wallet(\"\");\n    setPeerMeta(\"\");\n    setData();\n    setValue();\n    setTo();\n  };\n\n  return (\n    <>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                setScan(false);\n                setWalletConnectUri(newValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"flex flex-col items-center justify-center \">\n        <div>\n          <img src=\"walletconnect-logo.svg\" alt=\"walletConnect\" style={{ height: 50, width: 50 }} />\n        </div>\n        <div className=\"m-2\">\n          <Input.Group compact>\n            <Input\n              style={{ width: \"calc(100% - 31px)\", marginBottom: 20 }}\n              placeholder=\"Paste WalletConnect URI\"\n              disabled={isConnected}\n              value={walletConnectUri}\n              // onChange={e => setWalletConnectUri(e.target.value)}\n              onChange={e => onWalletConnect(e.target.value)}\n            />\n            <Button\n              disabled={isConnected}\n              onClick={() => setScan(!scan)}\n              icon={\n                <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n                  <QrcodeOutlined style={{ fontSize: 18 }} />\n                </Badge>\n              }\n            />\n          </Input.Group>\n        </div>\n      </div>\n      <div>{walletLoading && <Spin />}</div>\n      <div>\n        {isConnected && (\n          <>\n            {peerMeta !== undefined && (\n              <>\n                <div className=\"flex justify-center items-start w-full \">\n                  <img src={peerMeta.icons[0]} style={{ width: 30, height: 25 }} />\n                  <div>\n                    <p>\n                      <a href={peerMeta.url} target=\"_blank\" rel=\"noreferrer\">\n                        {peerMeta.url}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n                <Button onClick={killSession} type=\"primary\">\n                  Disconnect\n                </Button>\n              </>\n            )}\n          </>\n        )}\n      </div>\n      {/* {!isConnected && (\n        <div\n          style={{ cursor: \"pointer\" }}\n          onClick={() => {\n            // localStorage.removeItem(\"walletconnect\");\n            // setTimeout(() => {\n            //   window.location.reload(true);\n            // }, 500);\n          }}\n        >\n          🗑\n        </div>\n      )} */}\n\n      {isModalVisible && (\n        <TransactionDetailsModal\n          visible={isModalVisible}\n          txnInfo={parsedTransactionData}\n          handleOk={handleOk}\n          handleCancel={hideModal}\n          showFooter={true}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          to={to}\n          value={value}\n          type=\"Wallect Connect\"\n        />\n      )}\n    </>\n  );\n};\nexport default WalletConnectInput;\n","export const getSDKVersion = () => {\n  return \"7.6.0\"; // IMPORTANT: needs to be >= 1.0.0\n};\n\n// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, \"0\");\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join(\"\");\n};\n\nexport const generateRequestId = (): string => {\n  if (typeof window !== \"undefined\") {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n","import {\n  ErrorResponse,\n  SDKRequestData,\n  RequestId,\n  SuccessResponse,\n  MethodToResponse,\n  Methods,\n} from \"./types\";\nimport { getSDKVersion, generateRequestId } from \"./utils\";\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(\n    method: M,\n    params: P\n  ): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (\n    id: RequestId,\n    data: MethodToResponse[Methods],\n    version: string\n  ): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (\n    id: RequestId,\n    error: string,\n    version: string\n  ): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","import React, { createContext, useContext, useState, useEffect, useRef, useCallback } from \"react\";\nimport { providers, utils } from \"ethers\";\nimport { useAppCommunicator } from \"../helpers/communicator\";\nimport {\n  InterfaceMessageIds,\n  InterfaceMessageProps,\n  Methods,\n  MethodToResponse,\n  RequestId,\n  RPCPayload,\n  SignMessageParams,\n  SignTypedMessageParams,\n  Transaction,\n} from \"../helpers/types\";\n\ninterface TransactionWithId extends Transaction {\n  id: number;\n}\n\ntype SafeInjectContextType = {\n  address: string | undefined;\n  appUrl: string | undefined;\n  rpcUrl: string | undefined;\n  iframeRef: React.RefObject<HTMLIFrameElement> | null;\n  newTx: TransactionWithId | undefined;\n  setAddress: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setAppUrl: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setRpcUrl: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setNewTx: React.Dispatch<React.SetStateAction<any>>;\n};\n\nexport const SafeInjectContext = createContext<SafeInjectContextType>({\n  address: undefined,\n  appUrl: undefined,\n  rpcUrl: undefined,\n  iframeRef: null,\n  newTx: undefined,\n  setAddress: () => {},\n  setAppUrl: () => {},\n  setRpcUrl: () => {},\n  setNewTx: () => {},\n});\n\nexport const SafeInjectProvider: React.FunctionComponent<{ children: React.ReactNode }> = ({ children }) => {\n  const [address, setAddress] = useState<string>();\n  const [appUrl, setAppUrl] = useState<string>();\n  const [rpcUrl, setRpcUrl] = useState<string>();\n  const [provider, setProvider] = useState<providers.StaticJsonRpcProvider>();\n  const [newTx, setNewTx] = useState<TransactionWithId>();\n\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const communicator = useAppCommunicator(iframeRef);\n\n  const sendMessageToIframe = useCallback(\n    function <T extends InterfaceMessageIds>(message: InterfaceMessageProps<T>, requestId?: RequestId) {\n      const requestWithMessage = {\n        ...message,\n        requestId: requestId || Math.trunc(window.performance.now()),\n        version: \"0.4.2\",\n      };\n\n      if (iframeRef) {\n        iframeRef.current?.contentWindow?.postMessage(requestWithMessage, appUrl!);\n      }\n    },\n    [iframeRef, appUrl],\n  );\n\n  useEffect(() => {\n    if (!rpcUrl) return;\n\n    setProvider(new providers.StaticJsonRpcProvider(rpcUrl));\n  }, [rpcUrl]);\n\n  useEffect(() => {\n    if (!provider) return;\n\n    communicator?.on(Methods.getSafeInfo, async () => ({\n      safeAddress: address,\n      chainId: (await provider.getNetwork()).chainId,\n      owners: [],\n      threshold: 1,\n      isReadOnly: false,\n    }));\n\n    communicator?.on(Methods.getEnvironmentInfo, async () => ({\n      origin: document.location.origin,\n    }));\n\n    communicator?.on(Methods.rpcCall, async msg => {\n      const params = msg.data.params as RPCPayload;\n\n      try {\n        const response = (await provider.send(params.call, params.params)) as MethodToResponse[\"rpcCall\"];\n        return response;\n      } catch (err) {\n        return err;\n      }\n    });\n\n    communicator?.on(Methods.sendTransactions, msg => {\n      // @ts-expect-error explore ways to fix this\n      const transactions = (msg.data.params.txs as Transaction[]).map(({ to, ...rest }) => ({\n        to: utils.getAddress(to), // checksummed\n        ...rest,\n      }));\n      setNewTx({\n        id: parseInt(msg.data.id.toString()),\n        ...transactions[0],\n      });\n      // openConfirmationModal(transactions, msg.data.params.params, msg.data.id)\n    });\n\n    communicator?.on(Methods.signMessage, async msg => {\n      const { message } = msg.data.params as SignMessageParams;\n\n      // openSignMessageModal(message, msg.data.id, Methods.signMessage)\n    });\n\n    communicator?.on(Methods.signTypedMessage, async msg => {\n      const { typedData } = msg.data.params as SignTypedMessageParams;\n\n      // openSignMessageModal(typedData, msg.data.id, Methods.signTypedMessage)\n    });\n  }, [communicator, address, provider]);\n\n  return (\n    <SafeInjectContext.Provider\n      value={{\n        address,\n        appUrl,\n        rpcUrl,\n        iframeRef,\n        newTx,\n        setNewTx,\n        setAddress,\n        setAppUrl,\n        setRpcUrl,\n      }}\n    >\n      {children}\n    </SafeInjectContext.Provider>\n  );\n};\n\nexport const useSafeInject = () => useContext(SafeInjectContext);\n","import { useState, useEffect } from \"react\";\nimport { Input, Button, Spin, Row, Col, Modal } from \"antd\";\nimport axios from \"axios\";\nimport { useSafeInject } from \"../contexts/SafeInjectContext\";\nimport TransactionDetailsModal from \"./MultiSig/TransactionDetailsModal\";\nimport { NETWORKS } from \"../constants\";\nimport { parseExternalContractTransaction } from \"../helpers\";\n\nexport default function IFrame({ address, loadTransactionData, mainnetProvider, price, isTxLoaded }) {\n  const cachedNetwork = window.localStorage.getItem(\"network\");\n  let targetNetwork = NETWORKS[cachedNetwork || \"mainnet\"];\n\n  const { setAddress, appUrl, setAppUrl, setRpcUrl, iframeRef, newTx, setNewTx } = useSafeInject();\n\n  const [isIFrameLoading, setIsIFrameLoading] = useState(false);\n  const [inputAppUrl, setInputAppUrl] = useState();\n  const [tx, setTx] = useState();\n  const [parsedTransactionData, setParsedTransactionData] = useState();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isSafeDappsOpen, setIsSafeDappsOpen] = useState(false);\n  const [safeDapps, setSafeDapps] = useState({});\n  const [searchSafeDapp, setSearchSafeDapp] = useState();\n  const [filteredSafeDapps, setFilteredSafeDapps] = useState();\n  const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    setAddress(address);\n    setRpcUrl(targetNetwork.rpcUrl);\n  }, []);\n\n  useEffect(() => {\n    const fetchSafeDapps = async chainId => {\n      const response = await axios.get(`https://safe-client.gnosis.io/v1/chains/${chainId}/safe-apps`);\n      setSafeDapps(dapps => ({\n        ...dapps,\n        [chainId]: response.data.filter(d => ![29, 11].includes(d.id)), // Filter out Transaction Builder and WalletConnect\n      }));\n    };\n\n    if (isSafeDappsOpen && !safeDapps[targetNetwork.chainId]) {\n      fetchSafeDapps(targetNetwork.chainId);\n    }\n  }, [isSafeDappsOpen, safeDapps, targetNetwork]);\n\n  useEffect(() => {\n    if (safeDapps[targetNetwork.chainId]) {\n      setFilteredSafeDapps(\n        safeDapps[targetNetwork.chainId].filter(dapp => {\n          if (!searchSafeDapp) return true;\n\n          return (\n            dapp.name.toLowerCase().indexOf(searchSafeDapp.toLocaleLowerCase()) !== -1 ||\n            dapp.url.toLowerCase().indexOf(searchSafeDapp.toLocaleLowerCase()) !== -1\n          );\n        }),\n      );\n    } else {\n      setFilteredSafeDapps(undefined);\n    }\n  }, [safeDapps, targetNetwork, searchSafeDapp]);\n\n  useEffect(() => {\n    if (newTx) {\n      setTx(newTx);\n    }\n  }, [newTx]);\n\n  useEffect(() => {\n    if (tx) {\n      decodeFunctionData();\n    }\n  }, [tx]);\n\n  useEffect(() => {\n    if (tx) {\n      decodeFunctionData();\n    }\n  }, [tx]);\n\n  useEffect(() => {\n    if (isTxLoaded) {\n      hideModal();\n    }\n  }, [isTxLoaded]);\n\n  const decodeFunctionData = async () => {\n    try {\n      const parsedTransactionData = await parseExternalContractTransaction(tx.to, tx.data);\n      setParsedTransactionData(parsedTransactionData);\n      setIsModalVisible(true);\n    } catch (error) {\n      console.log(error);\n      setParsedTransactionData(null);\n    }\n  };\n\n  const hideModal = () => setIsModalVisible(false);\n  const onRefresh = () => setRefresh(!refresh);\n\n  const handleOk = () => {\n    loadTransactionData({\n      to: tx.to,\n      value: tx.value,\n      data: tx.data,\n      isIframe: true,\n    });\n    setNewTx(false);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <Button onClick={() => setIsSafeDappsOpen(true)}>Select from supported dapps</Button>\n      <Modal\n        title=\"Select a dapp\"\n        visible={isSafeDappsOpen}\n        onCancel={() => setIsSafeDappsOpen(false)}\n        footer={null}\n        destroyOnClose\n        closable\n        maskClosable\n      >\n        <div\n          style={{\n            minHeight: \"30rem\",\n            maxHeight: \"30rem\",\n            overflow: \"scroll\",\n            overflowX: \"auto\",\n            overflowY: \"auto\",\n          }}\n        >\n          {!safeDapps ||\n            (!safeDapps[targetNetwork.chainId] && (\n              <div>\n                <Spin />\n              </div>\n            ))}\n          <div\n            style={{\n              paddingBottom: \"2rem\",\n              paddingLeft: \"2rem\",\n              paddingRight: \"2rem\",\n            }}\n          >\n            {safeDapps && safeDapps[targetNetwork.chainId] && (\n              <div\n                style={{\n                  paddingBottom: \"1.5rem\",\n                }}\n              >\n                <Input\n                  placeholder=\"search 🔎\"\n                  style={{ maxWidth: \"30rem\" }}\n                  value={searchSafeDapp}\n                  onChange={e => setSearchSafeDapp(e.target.value)}\n                />\n              </div>\n            )}\n            <Row gutter={[16, 16]}>\n              {filteredSafeDapps &&\n                filteredSafeDapps.map((dapp, i) => (\n                  <Col\n                    key={i}\n                    className=\"gutter-row\"\n                    span={8}\n                    style={{\n                      maxWidth: \"140px\",\n                    }}\n                  >\n                    <Button\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        padding: \"1rem\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        borderRadius: \"10px\",\n                      }}\n                      onClick={() => {\n                        setAppUrl(dapp.url);\n                        setInputAppUrl(dapp.url);\n                        setIsSafeDappsOpen(false);\n                      }}\n                    >\n                      <img\n                        src={dapp.iconUrl}\n                        alt={dapp.name}\n                        style={{\n                          width: \"2rem\",\n                          borderRadius: \"full\",\n                        }}\n                      />\n                      <div\n                        style={{\n                          marginTop: \"0.5rem\",\n                          textAlign: \"center\",\n                          width: \"6rem\",\n                          overflow: \"hidden\",\n                        }}\n                      >\n                        {dapp.name}\n                      </div>\n                    </Button>\n                  </Col>\n                ))}\n            </Row>\n          </div>\n        </div>\n      </Modal>\n      <Input\n        placeholder=\"custom dapp URL\"\n        style={{\n          marginTop: 16,\n          minWidth: \"18rem\",\n          maxWidth: \"20rem\",\n        }}\n        autoFocus={true}\n        value={inputAppUrl}\n        onChange={e => setInputAppUrl(e.target.value)}\n      />\n      <Button\n        type={\"primary\"}\n        style={{\n          marginTop: \"1rem\",\n          maxWidth: \"8rem\",\n        }}\n        onClick={() => {\n          setAppUrl(inputAppUrl);\n          setIsIFrameLoading(true);\n        }}\n      >\n        {isIFrameLoading ? <Spin /> : \"Load\"}\n      </Button>\n      {appUrl && (\n        <div className=\"flex flex-col items-end\">\n          <Button className=\"mt-2\" onClick={onRefresh}>\n            refresh\n          </Button>\n          <iframe\n            key={refresh}\n            title=\"app\"\n            src={appUrl}\n            width=\"1200rem\"\n            height=\"900rem\"\n            style={{\n              marginTop: \"1rem\",\n            }}\n            ref={iframeRef}\n            onLoad={() => setIsIFrameLoading(false)}\n          />\n        </div>\n      )}\n      {isModalVisible && (\n        <TransactionDetailsModal\n          visible={isModalVisible}\n          txnInfo={parsedTransactionData}\n          handleOk={handleOk}\n          handleCancel={hideModal}\n          showFooter={true}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          to={tx.to}\n          value={tx.value}\n          type=\"IFrame\"\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, List } from \"antd\";\n\nimport { Address, Balance, Blockie } from \"..\";\nimport TransactionDetailsModal from \"./TransactionDetailsModal\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { parseExternalContractTransaction } from \"../../helpers\";\n\nconst axios = require(\"axios\");\n\nexport default function TransactionListItem({\n  item,\n  mainnetProvider,\n  blockExplorer,\n  price,\n  readContracts,\n  contractName,\n  children,\n}) {\n  //console.log(\"coming in item:\", item);\n  const transactionHash = item?.transactionHash;\n\n  item = item.args ? item.args : item;\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [txnData, setTxnData] = useState({});\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  useEffect(() => {\n    if (!txnData[item.hash]) {\n      try {\n        const parsedData = item.data != \"0x\" ? readContracts[contractName].interface.parseTransaction(item) : null;\n        //console.log(\"SET\",JSON.stringify(item),JSON.stringify(parsedData))\n        const newData = {};\n        newData[item.hash] = parsedData;\n        setTxnData({ ...txnData, ...newData });\n      } catch (argumentError) {\n        const getParsedTransaction = async () => {\n          const parsedTransaction = await parseExternalContractTransaction(item.to, item.data);\n          const newData = {};\n          newData[item.hash] = parsedTransaction;\n          setTxnData({ ...txnData, ...newData });\n        };\n        getParsedTransaction();\n      }\n    }\n  }, [item]);\n\n  const txDisplay = () => {\n    const toSelf = item?.to == readContracts[contractName].address;\n\n    if (toSelf && txnData[item.hash]?.functionFragment?.name == \"addSigner\") {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Add Signer</span>\n          {ethers.utils.isAddress(txnData[item.hash]?.args[0]) && (\n            <Address\n              address={txnData[item.hash]?.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <span style={{ fontSize: 16 }}>with threshold {txnData[item.hash]?.args[1]?.toNumber()}</span>\n          <>{children}</>\n        </>\n      );\n    } else if (toSelf && txnData[item.hash]?.functionFragment?.name == \"removeSigner\") {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Remove Signer</span>\n          {ethers.utils.isAddress(txnData[item.hash]?.args[0]) && (\n            <Address\n              address={txnData[item.hash]?.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <span style={{ fontSize: 16 }}>with threshold {txnData[item.hash]?.args[1]?.toNumber()}</span>\n          <>{children}</>\n        </>\n      );\n    } else if (!txnData[item.hash]?.functionFragment?.name) {\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Transfer</span>\n          <Balance\n            balance={item.value ? item.value : parseEther(\"\" + parseFloat(item.amount).toFixed(12))}\n            dollarMultiplier={price}\n          />\n          to\n          <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={16} />\n          <>{children}</>\n        </>\n      );\n    } else if (txnData[item.hash]?.signature != \"\") {\n      //console.log(\"CALL\",txnData)\n\n      return (\n        <>\n          <span style={{ fontSize: 16, fontWeight: \"bold\" }}>Call</span>\n          <span style={{ fontSize: 16 }}>\n            {txnData[item.hash]?.signature}\n            <Button style={{ margin: 4 }} disabled={!txnData[item.hash]} onClick={showModal}>\n              <EllipsisOutlined />\n            </Button>\n          </span>\n          <span style={{ fontSize: 16 }}>on</span>\n          <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={16} />\n          <>{children}</>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <div>\n            <i>Unknown transaction type...If you are reading this please screenshot and send to @austingriffith</i>\n          </div>\n          {ethers.utils.isAddress(txnData?.args[0]) && (\n            <Address\n              address={txnData.args[0]}\n              ensProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              fontSize={16}\n            />\n          )}\n          <Balance\n            balance={item.value ? item.value : parseEther(\"\" + parseFloat(item.amount).toFixed(12))}\n            dollarMultiplier={price}\n          />\n          <>{children}</>\n          <Button disabled={!txnData[item.hash]} onClick={showModal}>\n            <EllipsisOutlined />\n          </Button>\n          <div\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              display: \"flex\",\n              justifyContent: \"space-evenly\",\n              width: \"100%\",\n            }}\n          >\n            <p>\n              <b>Event Name :&nbsp;</b>\n              {txnData ? txnData[item.hash].functionFragment?.name : \"Transfer Funds\"}&nbsp;\n            </p>\n            <p>\n              <b>To:&nbsp;</b>\n              <Address address={item.to} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={12} />\n            </p>\n          </div>\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      <TransactionDetailsModal\n        visible={isModalVisible}\n        txnInfo={txnData[item.hash]}\n        handleOk={() => setIsModalVisible(false)}\n        handleCancel={() => setIsModalVisible(false)}\n        mainnetProvider={mainnetProvider}\n        price={price}\n      />\n      {\n        <List.Item style={{ border: 0 }} key={transactionHash && transactionHash} className=\"m-5 \">\n          <>\n            <a\n              href={blockExplorer + \"tx/\" + transactionHash}\n              disabled={transactionHash === undefined}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <b style={{ padding: 16 }}>#{typeof item.nonce === \"number\" ? item.nonce : item.nonce.toNumber()}</b>\n            </a>\n            {txDisplay()}\n            <Blockie size={4} scale={8} address={transactionHash === undefined ? item.hash : transactionHash} />\n          </>\n        </List.Item>\n      }\n    </>\n  );\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nconst useEventListener = (contract, contractName, eventName, provider) => {\n  const [eventData, setEventData] = useState([]);\n\n  const loadEvents = async () => {\n    const filter = contract[contractName].filters[eventName]();\n    const queryEvents = await contract[contractName].queryFilter(filter);\n    setEventData(queryEvents);\n  };\n\n  // watch events and load recursively (we can use in future to update tx list)\n  //   const loadEvents = () => {\n  //     contract[contractName].on(eventName, function () {\n  //       if (arguments.length > 0) {\n  //         const event = arguments[arguments.length - 1];\n  //         console.log(`n-🔴 => event`, event);\n  //         setEventData(preData => [...preData, event]);\n  //       }\n  //     });\n  //   };\n\n  useEffect(() => {\n    if (contract && contract[contractName] !== undefined) {\n      loadEvents();\n    }\n  }, [contractName, contract, eventName]);\n  return eventData;\n};\n\nexport default useEventListener;\n","import React, { useCallback, useEffect } from \"react\";\nimport { Select, List, Spin, Collapse } from \"antd\";\nimport axios from \"axios\";\n\n// import { useEventListener } from \"eth-hooks/events/\";\n\nimport { Address } from \"..\";\nimport { useState } from \"react\";\nimport useEventListener from \"../../hooks/useEventListener\";\n\nconst { Panel } = Collapse;\n\nfunction Owners({\n  // ownerEvents,\n  signaturesRequired,\n  mainnetProvider,\n  blockExplorer,\n  // address,\n  // poolServerUrl,\n  // contractAddress,\n  contractName,\n  localProvider,\n  currentMultiSigAddress,\n  reDeployWallet,\n  contractNameForEvent,\n  readContracts,\n}) {\n  const [ownerEvents, setOwnerEvents] = useState([]);\n\n  // const allOwnerEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"Owner\",\n  //   localProvider,\n  //   1,\n  // );\n\n  const allOwnerEvents = useEventListener(\n    currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n    contractNameForEvent,\n    \"Owner\",\n    localProvider,\n  );\n\n  const owners = new Set();\n  const prevOwners = new Set();\n  ownerEvents.forEach(ownerEvent => {\n    if (ownerEvent.args.added) {\n      owners.add(ownerEvent.args.owner);\n      prevOwners.delete(ownerEvent.args.owner);\n    } else {\n      prevOwners.add(ownerEvent.args.owner);\n      owners.delete(ownerEvent.args.owner);\n    }\n  });\n  // const updateOwners = async owners => {\n  //   let reqData = {\n  //     owners: [...owners],\n  //   };\n  //   const res = await axios.post(poolServerUrl + `updateOwners/${address}/${contractAddress}`, reqData);\n  //   console.log(\"update owner response\", res.data);\n  // };\n\n  // useEffect(() => {\n  //   if (signaturesRequired && owners.size > 0) {\n  //     //  disabled for updating owners at backend as it is automatically updated\n  //     // updateOwners(owners);\n  //   }\n  // }, [owners.size, signaturesRequired]);\n\n  const loadOwnersEvents = async () => {\n    setOwnerEvents(allOwnerEvents.filter(contractEvent => contractEvent.address === currentMultiSigAddress));\n  };\n\n  useEffect(() => {\n    if (allOwnerEvents.length > 0) {\n      loadOwnersEvents();\n    }\n  }, [allOwnerEvents.length]);\n\n  return (\n    <div>\n      <h2 style={{ marginTop: 32 }}>\n        Signatures Required:{\" \"}\n        {/* {signaturesRequired && ownerEvents.length !== 0 ? signaturesRequired.toNumber() : <Spin></Spin>} */}\n        {signaturesRequired ? signaturesRequired.toNumber() : <Spin></Spin>}\n      </h2>\n      <List\n        header={<h2>Owners</h2>}\n        style={{ maxWidth: 400, margin: \"auto\", marginTop: 32 }}\n        bordered\n        dataSource={[...owners]}\n        loading={ownerEvents.length === 0}\n        renderItem={ownerAddress => {\n          return (\n            <List.Item key={\"owner_\" + ownerAddress}>\n              <Address\n                address={ownerAddress}\n                ensProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                fontSize={20}\n              />\n            </List.Item>\n          );\n        }}\n      />\n\n      <Collapse\n        collapsible={prevOwners.size == 0 ? \"disabled\" : \"\"}\n        style={{ maxWidth: 400, margin: \"auto\", marginTop: 10 }}\n      >\n        <Panel header=\"Previous Owners\" key=\"1\">\n          <List\n            dataSource={[...prevOwners]}\n            renderItem={prevOwnerAddress => {\n              return (\n                <List.Item key={\"owner_\" + prevOwnerAddress}>\n                  <Address\n                    address={prevOwnerAddress}\n                    ensProvider={mainnetProvider}\n                    blockExplorer={blockExplorer}\n                    fontSize={20}\n                  />\n                </List.Item>\n              );\n            }}\n          />\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\nexport default Owners;\n","import React from \"react\";\nimport { Spin } from 'antd';\nimport { CheckCircleOutlined, StopOutlined } from '@ant-design/icons';\n\nexport default function CreateModalSentOverlay(props) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        zIndex: 10,\n        top: 55,\n        bottom: 53,\n        left: 0,\n        width: '100%',\n        pointerEvents: 'none',\n        backdropFilter: 'blur(4px)',\n\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: '2rem',\n      }}>\n      {props.txError && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.errorText}</div>\n          <StopOutlined style={{ color: 'red', fontSize: '4rem' }} />\n        </>\n      )}\n      {props.txSuccess && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.successText}</div>\n          <CheckCircleOutlined style={{ color: 'green', fontSize: '4rem' }} />\n        </>\n      )}\n      {!props.txError && !props.txSuccess && (\n        <>\n          <div style={{ fontSize: '1.5rem' }}>{props.pendingText}</div>\n          <div style={{ height: '4rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <Spin size=\"large\" style={{ transform: 'scale(1.5)' }} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};","import React, { useState, useEffect, useMemo } from \"react\";\nimport { Button, Modal, InputNumber, Alert } from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { ethers } from \"ethers\";\nimport { Input } from \"antd\";\nimport axios from \"axios\";\n\nimport { AddressInput, EtherInput, Address } from \"..\";\nimport CreateModalSentOverlay from \"./CreateModalSentOverlay\";\nimport { useLocalStorage } from \"../../hooks\";\n\nfunction CreateMultiSigModal({\n  price,\n  selectedChainId,\n  mainnetProvider,\n  address,\n  tx,\n  writeContracts,\n  contractName,\n  isCreateModalVisible,\n  setIsCreateModalVisible,\n  poolServerUrl,\n  reDeployWallet,\n  getUserWallets,\n  setReDeployWallet,\n  currentNetworkName,\n  isFactoryDeployed,\n}) {\n  const [deployType, setDeployType] = useState(\"CREATE\");\n  const [pendingCreate, setPendingCreate] = useState(false);\n  const [txSent, setTxSent] = useState(false);\n  const [txError, setTxError] = useState(false);\n  const [txSuccess, setTxSuccess] = useState(false);\n\n  // const [signaturesRequired, setSignaturesRequired] = useState(undefined);\n  const [signaturesRequired, setSignaturesRequired] = useLocalStorage(\"signaturesRequired\", undefined);\n  const [amount, setAmount] = useState(\"0\");\n  // const [owners, setOwners] = useState([\"\"]);\n  const [owners, setOwners] = useLocalStorage(\"owners\", []);\n  // const [walletName, setWalletName] = useState(\"\");\n  const [walletName, setWalletName] = useLocalStorage(\"walletName\");\n  const [preComputedAddress, setPreComputedAddress] = useState(\"\");\n  const [isWalletExist, setIsWalletExist] = useState(false);\n\n  useEffect(() => {\n    if (isCreateModalVisible === false) {\n      return;\n    }\n    if (isCreateModalVisible && address && owners && owners.length > 0) {\n      owners[0] = address;\n      setOwners([...new Set([...owners])]);\n      return;\n    }\n\n    if (isCreateModalVisible && address && owners && owners.length === 0) {\n      setOwners([...new Set([address])]);\n      return;\n    }\n  }, [address, isCreateModalVisible]);\n\n  const showCreateModal = async deployType => {\n    if (deployType === \"CREATE\") {\n      setDeployType(\"CREATE\");\n      setTimeout(() => {\n        setIsCreateModalVisible(true);\n      }, 100);\n    }\n\n    if (deployType === \"RE_DEPLOY\") {\n      // on redploy get previous data in states\n      let prevSignaturesRequired = reDeployWallet ? reDeployWallet[\"signaturesRequired\"] : 0;\n      let prevOwners = reDeployWallet ? reDeployWallet[\"owners\"] : [];\n\n      let prevWalletName = reDeployWallet[\"walletName\"];\n\n      let computed_wallet_address = await writeContracts[contractName].computedAddress(prevWalletName);\n\n      setDeployType(\"RE_DEPLOY\");\n      setSignaturesRequired(prevSignaturesRequired);\n      setOwners([...new Set([...prevOwners, address])]);\n      setPreComputedAddress(computed_wallet_address);\n\n      setTimeout(() => {\n        setIsCreateModalVisible(true);\n      }, 100);\n    }\n  };\n\n  const handleCancel = () => {\n    // setWalletName(\"\");\n    setIsCreateModalVisible(false);\n    // getUserWallets();\n    // setIsWalletExist(false);\n  };\n\n  const addOwnerField = () => {\n    const newOwners = [...owners, \"\"];\n    setOwners(newOwners);\n  };\n\n  const removeOwnerField = index => {\n    const newOwners = [...owners];\n    newOwners.splice(index, 1);\n    setOwners(newOwners);\n  };\n\n  const updateOwner = (value, index) => {\n    // for a single addresss\n    if (value.length <= 42) {\n      const newOwners = [...owners];\n      newOwners[index] = value;\n      setOwners(newOwners);\n    }\n\n    // if value is multiple addresses with comma\n    if (value.length > 42) {\n      addMultipleAddress(value);\n    }\n  };\n\n  const addMultipleAddress = value => {\n    // add basic validation a address should contains 0x with length of 42 chars\n    const validateAddress = address => address.includes(\"0x\") && address.length === 42;\n\n    const addresses = value.trim().split(\",\");\n    let uniqueAddresses = [...new Set([...addresses])];\n\n    uniqueAddresses = uniqueAddresses.filter(validateAddress);\n\n    let finalUniqueAddresses = [...new Set([...owners.filter(validateAddress), ...uniqueAddresses])];\n    setOwners(finalUniqueAddresses);\n  };\n\n  const validateFields = () => {\n    let valid = true;\n\n    if (signaturesRequired > owners.length) {\n      console.log(\"Validation error: signaturesRequired is greather than number of owners.\");\n      valid = false;\n    }\n\n    owners.forEach((owner, index) => {\n      let err;\n      if (!owner) {\n        err = \"Required Input\";\n      } else if (owners.slice(0, index).some(o => o === owner)) {\n        err = \"Duplicate Owner\";\n      } else if (!ethers.utils.isAddress(owner)) {\n        err = \"Bad format\";\n      }\n\n      if (err) {\n        console.log(\"Owners field error: \", err);\n        valid = false;\n      }\n    });\n\n    return valid;\n  };\n\n  const resetState = () => {\n    setWalletName(\"\");\n    setPendingCreate(false);\n    setTxSent(false);\n    setTxError(false);\n    setTxSuccess(false);\n    setOwners([\"\"]);\n    setAmount(\"0\");\n    setSignaturesRequired(false);\n    setIsWalletExist(false);\n    setPreComputedAddress(\"\");\n  };\n\n  const handleSubmit = () => {\n    try {\n      setPendingCreate(true);\n\n      if (!validateFields()) {\n        setPendingCreate(false);\n        throw \"Field validation failed.\";\n      }\n      let currentWalletName = deployType === \"CREATE\" ? walletName : reDeployWallet[\"walletName\"];\n\n      tx(\n        // create 2\n        writeContracts[contractName].create2(owners, signaturesRequired, currentWalletName, {\n          value: ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(12)),\n        }),\n        async update => {\n          if (update && (update.error || update.reason)) {\n            console.log(\"tx update error!\");\n            setPendingCreate(false);\n            setTxError(true);\n          }\n\n          if (update && update.code) {\n            setPendingCreate(false);\n            setTxSent(false);\n          }\n\n          if (update && (update.status === \"confirmed\" || update.status === 1)) {\n            console.log(\"tx update confirmed!\");\n\n            let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n\n            let walletAddress = deployType === \"CREATE\" ? computed_wallet_address : reDeployWallet[\"walletAddress\"];\n\n            if (deployType === \"CREATE\") {\n              let reqData = {\n                owners,\n                signaturesRequired,\n              };\n\n              console.log(\"n-reqData: \", reqData);\n              const res = await axios.post(\n                poolServerUrl + `createWallet/${address}/${walletName}/${walletAddress}/${selectedChainId}`,\n                reqData,\n              );\n\n              let data = res.data;\n              console.log(\"create wallet res data: \", data);\n\n              setPendingCreate(false);\n              setTxSuccess(true);\n              resetState();\n            }\n\n            if (deployType === \"RE_DEPLOY\") {\n              const res = await axios.get(\n                poolServerUrl + `updateChainId/${address}/${walletAddress}/${selectedChainId}`,\n              );\n              let data = res.data;\n\n              console.log(\"update chain res data: \", data);\n              setReDeployWallet(undefined);\n              window.location.reload();\n            }\n\n            resetState();\n            await getUserWallets(true);\n          }\n        },\n      ).catch(err => {\n        setPendingCreate(false);\n        throw err;\n      });\n\n      setTxSent(true);\n    } catch (e) {\n      console.log(\"CREATE MUTLI-SIG SUBMIT FAILED: \", e);\n    }\n  };\n\n  const checkWalletExist = async () => {\n    let currentWalletName = deployType === \"CREATE\" ? walletName : reDeployWallet[\"walletName\"];\n\n    let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n\n    let isContractExists = await writeContracts[contractName].provider.getCode(computed_wallet_address);\n\n    if (isContractExists !== \"0x\") {\n      setIsWalletExist(true);\n    }\n\n    if (isContractExists === \"0x\") {\n      setIsWalletExist(false);\n    }\n  };\n\n  const onInputWalletName = async walletName => {\n    setWalletName(walletName);\n    let currentWalletName = walletName;\n\n    let computed_wallet_address = await writeContracts[contractName].computedAddress(currentWalletName);\n    setPreComputedAddress(computed_wallet_address);\n  };\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={() => showCreateModal(\"CREATE\")}\n        className=\"mx-2\"\n        disabled={isFactoryDeployed === undefined}\n      >\n        Create\n      </Button>\n\n      {reDeployWallet !== undefined && (\n        <Button type=\"primary\" onClick={() => showCreateModal(\"RE_DEPLOY\")} ghost className=\"mx-2\">\n          Deploy {reDeployWallet[\"walletName\"]} to {currentNetworkName}\n        </Button>\n      )}\n\n      <Modal\n        key={address}\n        title=\"Create Multi-Sig Wallet\"\n        visible={isCreateModalVisible}\n        onCancel={handleCancel}\n        destroyOnClose\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n\n          // on create\n          deployType === \"CREATE\" && (\n            <Button\n              key=\"submit\"\n              type=\"primary\"\n              loading={pendingCreate}\n              onClick={handleSubmit}\n              disabled={isWalletExist || Boolean(walletName) === false || Boolean(signaturesRequired) === false}\n            >\n              Create\n            </Button>\n          ),\n\n          // on redeploy on new network\n          deployType === \"RE_DEPLOY\" && (\n            <Button\n              key=\"submit\"\n              type=\"primary\"\n              loading={pendingCreate}\n              onClick={handleSubmit}\n              disabled={Boolean(signaturesRequired) === false}\n            >\n              Deploy\n            </Button>\n          ),\n        ]}\n      >\n        {txSent && (\n          <CreateModalSentOverlay\n            txError={txError}\n            txSuccess={txSuccess}\n            pendingText=\"Creating Multi-Sig\"\n            successText=\"Multi-Sig Created\"\n            errorText=\"Transaction Failed\"\n          />\n        )}\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n          <Input\n            placeholder=\"Enter wallet name\"\n            // onChange={event => setWalletName(event.target.value)}\n            onChange={event => onInputWalletName(event.target.value)}\n            // value={reDeployWallet !== undefined ? reDeployWallet[\"walletName\"] : walletName}\n            value={deployType === \"RE_DEPLOY\" ? (reDeployWallet ? reDeployWallet[\"walletName\"] : \"\") : walletName}\n            disabled={deployType === \"RE_DEPLOY\"}\n            key={address}\n            onBlur={checkWalletExist}\n          />\n          {isWalletExist && <Alert message=\"Wallet name already exist choose another name !!\" type=\"error\" showIcon />}\n\n          {preComputedAddress && (\n            <>\n              <div className=\"text-xs text-gray-500\">Wallet address should be </div>\n              <Address address={preComputedAddress} />\n            </>\n          )}\n          {owners.map((owner, index) => (\n            <div key={index} style={{ display: \"flex\", gap: \"1rem\" }}>\n              <div style={{ width: \"90%\" }}>\n                <AddressInput\n                  autoFocus\n                  ensProvider={mainnetProvider}\n                  placeholder={\"Owner address\"}\n                  value={owner}\n                  onChange={val => updateOwner(val, index)}\n                />\n              </div>\n              {index > 0 && (\n                <Button style={{ padding: \"0 0.5rem\" }} danger onClick={() => removeOwnerField(index)}>\n                  <DeleteOutlined />\n                </Button>\n              )}\n            </div>\n          ))}\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\", width: \"90%\" }}>\n            <Button onClick={addOwnerField}>\n              <PlusOutlined />\n            </Button>\n          </div>\n          <div style={{ width: \"90%\" }}>\n            <InputNumber\n              style={{ width: \"100%\" }}\n              placeholder=\"Number of signatures required\"\n              value={signaturesRequired}\n              // value={\n              //   deployType === \"RE_DEPLOY\"\n              //     ? reDeployWallet\n              //       ? reDeployWallet[\"signaturesRequired\"]\n              //       : \"\"\n              //     : signaturesRequired\n              // }\n              onChange={setSignaturesRequired}\n            />\n          </div>\n          <div style={{ width: \"90%\" }}>\n            <EtherInput\n              placeholder=\"Fund your multi-sig (optional)\"\n              price={price}\n              mode=\"USD\"\n              value={amount}\n              onChange={setAmount}\n            />\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nconst checkProps = (prePorps, nextProps) => {\n  return nextProps?.address !== prePorps?.address;\n};\nexport default React.memo(CreateMultiSigModal, checkProps);\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, Select, Alert, Input, Spin } from \"antd\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage } from \"../../hooks\";\n\nimport { AddressInput } from \"..\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport useStore from \"../../store/useStore\";\n\nexport default function ImportMultiSigModal({\n  mainnetProvider,\n  targetNetwork,\n  networkOptions,\n  // multiSigs,\n  // setMultiSigs,\n  // setCurrentMultiSigAddress,\n  multiSigWalletABI,\n  localProvider,\n  // poolServerUrl,\n  userWallets,\n  getUserWallets,\n  isFactoryDeployed,\n  setSelectedWalletAddress,\n  walletParams,\n}) {\n  const [importedMultiSigs, setImportedMultiSigs] = useLocalStorage(\"importedMultiSigs\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [pendingImport, setPendingImport] = useState(false);\n  const [error, setError] = useState(false);\n  const [duplicateError, setDuplicateError] = useState(false);\n  const [address, setAddress] = useState();\n  const [walletName, setWalletName] = useState(\"\");\n  const [loadingWalletName, setLoadingWalletName] = useState(false);\n  const [factoryVersion, setFactoryVersion] = useState(undefined);\n  const [network, setNetwork] = useState(targetNetwork.name);\n\n  const walletAddressDebounce = useDebounce(address, 700);\n\n  const resetState = () => {\n    setError(false);\n    setAddress(\"\");\n    setNetwork(targetNetwork.name);\n    setPendingImport(false);\n    setWalletName(\"\");\n  };\n\n  const handleCancel = () => {\n    resetState();\n    setIsModalVisible(false);\n  };\n  const getFactoryVersion = async contract => {\n    try {\n      // get the factory version\n      const factoryVersion = await contract.factoryVersion();\n      return Number(factoryVersion.toString());\n    } catch (error) {\n      // console.log(\"n-error: \", error);\n      // if no factory version variable that mean its version zero\n      console.log(\"its older factory version !!\");\n      return 0;\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setPendingImport(true);\n\n      const contract = new ethers.Contract(address, multiSigWalletABI, localProvider);\n\n      let signaturesRequired = await contract.signaturesRequired();\n      signaturesRequired = signaturesRequired.toString();\n\n      let owners = [];\n\n      if (factoryVersion === 1) {\n        let ownnersCount = await contract.numberOfOwners();\n        ownnersCount = ownnersCount.toString();\n        for (let index = 0; index < +ownnersCount; index++) {\n          let owner = await contract.owners(index);\n          owners.push(owner);\n        }\n      }\n\n      let walletAddress = contract.address;\n\n      let importWalletData = {\n        walletName,\n        walletAddress,\n        chainIds: [targetNetwork.chainId],\n        signaturesRequired: +signaturesRequired,\n        owners,\n      };\n\n      let newImportedMultiSigs = importedMultiSigs || {};\n      (newImportedMultiSigs[network] = newImportedMultiSigs[network] || []).push(importWalletData);\n      newImportedMultiSigs[network] = [...new Set(newImportedMultiSigs[network])];\n      setImportedMultiSigs(newImportedMultiSigs);\n\n      await getUserWallets(true);\n\n      resetState();\n      setIsModalVisible(false);\n      setSelectedWalletAddress(walletAddress);\n      window.location.reload();\n    } catch (e) {\n      console.log(\"n-Import error:\", e);\n      setError(true);\n      setPendingImport(false);\n    }\n  };\n\n  const checkDuplicateWallet = address => {\n    let isExists = userWallets.find(data => data.walletAddress === address);\n    if (isExists) {\n      setDuplicateError(true);\n    }\n  };\n\n  const onEnterWalletAddress = async address => {\n    try {\n      if (ethers.utils.isAddress(address)) {\n        setError(false);\n        setLoadingWalletName(true);\n        const contract = new ethers.Contract(address, multiSigWalletABI, localProvider);\n\n        let factoryVersion = await getFactoryVersion(contract);\n        setFactoryVersion(factoryVersion);\n\n        if (factoryVersion === 1) {\n          const walletName = await contract.name();\n          setWalletName(walletName);\n        }\n\n        setLoadingWalletName(false);\n        checkDuplicateWallet(address);\n      } else {\n        setWalletName(\"\");\n        setError(true);\n      }\n    } catch (error) {\n      setWalletName(\"\");\n      setLoadingWalletName(false);\n      setError(true);\n    }\n  };\n\n  const onEnterWalletName = async event => {\n    setWalletName(event.target.value);\n  };\n\n  const importURLWallet = async () => {\n    if (walletParams && userWallets) {\n      let isExists = userWallets.find(data => data.walletAddress === address);\n\n      setIsModalVisible(isExists === undefined);\n      setAddress(walletParams.walletAddress);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddressDebounce) {\n      onEnterWalletAddress(walletAddressDebounce);\n    }\n  }, [walletAddressDebounce]);\n\n  useEffect(() => {\n    importURLWallet();\n  }, [walletParams, userWallets]);\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        ghost\n        onClick={() => setIsModalVisible(true)}\n        disabled={isFactoryDeployed === undefined || walletParams !== undefined}\n      >\n        Import\n      </Button>\n      <Modal\n        title=\"Import Multisig\"\n        visible={isModalVisible}\n        closable={walletParams === undefined}\n        // onCancel={handleCancel}\n\n        destroyOnClose\n        footer={[\n          <Button key=\"back\" onClick={handleCancel} disabled={walletParams !== undefined}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!address || !network || error || walletName === \"\" || duplicateError}\n            loading={pendingImport}\n            onClick={handleSubmit}\n          >\n            Import\n          </Button>,\n        ]}\n      >\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n          <AddressInput\n            autoFocus\n            ensProvider={mainnetProvider}\n            placeholder={\"Multisig address\"}\n            value={address}\n            onChange={setAddress}\n          />\n          <Input\n            placeholder=\"Enter wallet name\"\n            value={walletName}\n            onChange={onEnterWalletName}\n            suffix={loadingWalletName && <Spin spinning />}\n            disabled={error || duplicateError}\n          />\n          <Select defaultValue={targetNetwork.name} onChange={value => setNetwork(value)}>\n            {networkOptions}\n          </Select>\n          {error && <Alert message=\"Unable to import: this doesn't seem like a multisig.\" type=\"error\" showIcon />}\n          {duplicateError && <Alert message=\"Wallet already present ! \" type=\"error\" showIcon />}\n        </div>\n      </Modal>\n    </>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import \"antd/dist/antd.css\";\nimport \"graphiql/graphiql.min.css\";\n\nimport React, { useState } from \"react\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport GraphiQL from \"graphiql\";\nimport fetch from \"isomorphic-fetch\";\n\n\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ShareAltOutlined } from \"@ant-design/icons\";\n\nimport { Balance, Address, TransactionListItem, Owners } from \"../components\";\nimport QR from \"qrcode.react\";\nimport { List, Button, Alert, Typography, message } from \"antd\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n// import { useEventListener } from \"eth-hooks/events/\";\nimport { getFactoryVersion, Sleep } from \"../constants\";\nimport useEventListener from \"../hooks/useEventListener\";\nimport { useStore } from \"../store/useStore\";\n\nconst { Text } = Typography;\n\nfunction Home({\n  targetNetwork,\n  address,\n  contractAddress,\n  localProvider,\n  price,\n  mainnetProvider,\n  blockExplorer,\n  contractName,\n  readContracts,\n  signaturesRequired,\n  reDeployWallet,\n  currentMultiSigAddress,\n  contractNameForEvent,\n}) {\n  // const allExecuteTransactionEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"ExecuteTransaction\",\n  //   localProvider,\n  //   1,\n  // );\n  const [state, dispatch] = useStore();\n\n  const walletParams = useParams();\n\n  const allExecuteTransactionEvents = useEventListener(\n    currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n    contractNameForEvent,\n    \"ExecuteTransaction\",\n    localProvider,\n  );\n\n  const [executeTransactionEvents, setExecuteTransactionEvents] = useState(undefined);\n  const [walletName, setWalletName] = useState();\n  const [txListLoading, setTxListLoading] = useState(true);\n\n  const updateExecutedEvents = async () => {\n    // old event listner logic\n    const filteredEvents = allExecuteTransactionEvents.filter(\n      contractEvent => contractEvent.address === currentMultiSigAddress,\n    );\n    setExecuteTransactionEvents(filteredEvents.reverse());\n    setTxListLoading(false);\n  };\n\n  const getWalletName = async () => {\n    // wait for 1 sec to get proper contract instance\n    await Sleep(1000);\n    let factoryVersion = await getFactoryVersion(readContracts[contractName]);\n    if (factoryVersion === 1) {\n      if (readContracts[contractName] && reDeployWallet === undefined) {\n        let walletName = await readContracts[contractName].name();\n        setWalletName(walletName);\n      }\n    } else {\n      setWalletName(\"\");\n    }\n  };\n  useEffect(() => {\n    void getWalletName();\n  }, [readContracts[contractName]].address);\n\n  useEffect(() => {\n    if (readContracts[contractName]) {\n      updateExecutedEvents();\n    }\n  }, [allExecuteTransactionEvents, currentMultiSigAddress, readContracts, contractName, readContracts[contractName]]);\n\n  useEffect(() => {\n    if (\"walletAddress\" in walletParams && \"networkName\" in walletParams) {\n      dispatch({ payload: { walletParams } });\n    } else {\n      dispatch({ payload: { walletParams: undefined } });\n    }\n  }, [walletParams]);\n\n  return (\n    <>\n      <div\n        //  style={{ padding: 32, maxWidth: 850, margin: \"auto\" }}\n        className=\" flex flex-col justify-center items-center  m-2 \"\n      >\n        {reDeployWallet !== undefined && (\n          <>\n            <div className=\"text-left my-2 w-1/2 \">\n              <Alert message=\"Alert\" description=\"Please deploy this wallet !!\" type=\"warning\" showIcon />\n            </div>\n          </>\n        )}\n        {/* main contract info */}\n        <div className=\"flex  justify-around  flex-wrap  w-full border-2 p-4 md:w-auto md:rounded-3xl md:shadow-md\">\n          {/* contract balanace qr */}\n          <div\n            // style={{ paddingBottom: 32 }}\n            className=\"flex flex-col  items-center w-full p-5 border-2  rounded-3xl shadow-md  md:flex-1 md:p-0 md:shadow-none md:rounded-none md:w-auto md:border-none\"\n          >\n            <div>\n              <Balance\n                address={contractAddress ? contractAddress : \"\"}\n                provider={localProvider}\n                dollarMultiplier={price}\n                size={40}\n              />\n            </div>\n            <div className=\"px-20\">\n              <QR\n                value={contractAddress ? contractAddress.toString() : \"\"}\n                size={180}\n                level=\"H\"\n                includeMargin\n                renderAs=\"svg\"\n                imageSettings={{ excavate: false, src: \"\", height: 0, width: 0 }}\n              />\n            </div>\n\n            <div className=\"text-2xl\">{walletName}</div>\n            <div\n              // style={{ display: \"flex\", justifyContent: \"center\" }}\n              className=\"\"\n            >\n              <Address\n                address={contractAddress ? contractAddress : \"\"}\n                ensProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                fontSize={25}\n              />\n            </div>\n          </div>\n\n          {/* contract owner signature */}\n          <div className=\"w-full px-2 mt-4  md:mt-0 md:flex-1 md:w-96 \">\n            <Owners\n              key={walletParams && JSON.stringify(walletParams)}\n              // ownerEvents={ownerEvents}\n              signaturesRequired={signaturesRequired}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              // address={address}\n              // poolServerUrl={poolServerUrl}\n              // contractAddress={contractAddress}\n              contractName={contractName}\n              localProvider={localProvider}\n              currentMultiSigAddress={currentMultiSigAddress}\n              reDeployWallet={reDeployWallet}\n              contractNameForEvent={contractNameForEvent}\n              readContracts={readContracts}\n            />\n          </div>\n\n          {/* share wallet url */}\n          <div className=\"\">\n            <Text\n              copyable={{\n                icon: [\n                  <ShareAltOutlined className=\"text-xl cursor-pointer\" style={{ color: \"#1890FF\" }} />,\n                  <ShareAltOutlined className=\"text-xl cursor-pointer\" style={{ color: \"greenyellow\" }} />,\n                ],\n                text: `${window.location.origin}/${contractAddress}/${targetNetwork?.name}`,\n                tooltips: [\"Copy wallet share url\", \"Copied\"],\n              }}\n            />\n          </div>\n        </div>\n\n        {/* proposal create button */}\n        <div className=\"my-5\">\n          {reDeployWallet === undefined && (\n            <Button\n              type={\"primary\"}\n              onClick={() => {\n                window.location = \"/create\";\n              }}\n            >\n              Propose Transaction\n            </Button>\n          )}\n        </div>\n        <div className=\"flex justify-center items-center w-screen   \">\n          {reDeployWallet === undefined && (\n            <div className=\" w-full md:w-1/2  py-5 \">\n              <List\n                // bordered\n\n                dataSource={executeTransactionEvents}\n                loading={txListLoading}\n                renderItem={item => {\n                  return (\n                    <div className=\"border-2 rounded-3xl shadow-md mt-4 \">\n                      {\"MultiSigWallet\" in readContracts && (\n                        <>\n                          <TransactionListItem\n                            item={Object.create(item)}\n                            mainnetProvider={mainnetProvider}\n                            blockExplorer={blockExplorer}\n                            price={price}\n                            readContracts={readContracts}\n                            contractName={contractName}\n                          />\n                        </>\n                      )}\n                    </div>\n                  );\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\nconst checkProps = (preProps, nextProps) => {\n  // let ownerEvents = nextProps.ownerEvents.filter(contractEvent => contractEvent.address === nextProps.contractAddress);\n  return preProps.contractAddress === nextProps.contractAddress && preProps.reDeployWallet && nextProps.reDeployWallet;\n};\n\nexport default React.memo(Home, checkProps);\n","import React, { useEffect, useLayoutEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, Select, InputNumber, Space, Tooltip, Alert } from \"antd\";\nimport { CodeOutlined } from \"@ant-design/icons\";\nimport { AddressInput, EtherInput, WalletConnectInput, IFrame } from \"../components\";\nimport TransactionDetailsModal from \"../components/MultiSig/TransactionDetailsModal\";\nimport { parseExternalContractTransaction } from \"../helpers\";\nimport { useLocalStorage } from \"../hooks\";\nimport { ethers } from \"ethers\";\nimport { parseEther } from \"@ethersproject/units\";\nconst { Option } = Select;\n\nconst axios = require(\"axios\");\n\nexport default function CreateTransaction({\n  poolServerUrl,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired,\n}) {\n  const history = useHistory();\n  const [methodName, setMethodName] = useLocalStorage(\"methodName\", \"transferFunds\");\n  const [newSignaturesRequired, setNewSignaturesRequired] = useState(signaturesRequired);\n  const [amount, setAmount] = useState(\"0\");\n  const [to, setTo] = useLocalStorage(\"to\");\n  const [customCallData, setCustomCallData] = useState(\"\");\n  const [parsedCustomCallData, setParsedCustomCallData] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [shouldCreateTransaction, setShouldCreateTransaction] = useState(false);\n  const [isOwner, setIsOwner] = useState();\n  const [isIframe, setIsIframe] = useState(false);\n  const [isTxLoaded, setIsTxLoaded] = useState(false);\n\n  const [hasEdited, setHasEdited] = useState(); //we want the signaturesRequired to update from the contract _until_ they edit it\n  const [customNonce, setCustomNonce] = useState(nonce);\n\n  useEffect(() => {\n    if (!hasEdited) {\n      setNewSignaturesRequired(signaturesRequired);\n    }\n  }, [signaturesRequired]);\n\n  useLayoutEffect(() => {\n    setCustomNonce(nonce);\n  }, [nonce]);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const inputStyle = {\n    padding: 10,\n  };\n\n  useEffect(() => {\n    const getParsedTransaction = async () => {\n      const parsedTransaction = await parseExternalContractTransaction(to, customCallData);\n      setParsedCustomCallData(parsedTransaction);\n    };\n\n    getParsedTransaction();\n  }, [customCallData]);\n\n  const loadTransactionData = ({ to, value, data, isIframe = false }) => {\n    setTo(to);\n    value ? setAmount(ethers.utils.formatEther(value)) : setAmount(\"0\");\n    setCustomCallData(data);\n    setShouldCreateTransaction(true);\n    if (isIframe) {\n      setIsIframe(true);\n    }\n  };\n\n  useEffect(() => {\n    shouldCreateTransaction && createTransaction();\n    setShouldCreateTransaction(false);\n  }, [shouldCreateTransaction]);\n\n  const createTransaction = async () => {\n    try {\n      //a little security in the frontend just because\n      if (newSignaturesRequired < 1) {\n        alert(\"signatures required must be >= 1\");\n      } else {\n        setLoading(true);\n\n        let callData;\n        let executeToAddress;\n        if (\n          methodName === \"transferFunds\" ||\n          methodName === \"customCallData\" ||\n          methodName === \"wcCallData\" ||\n          methodName === \"iframeCallData\"\n        ) {\n          callData = methodName == \"transferFunds\" ? \"0x\" : customCallData;\n          executeToAddress = to;\n        } else {\n          callData = readContracts[contractName]?.interface?.encodeFunctionData(methodName, [\n            to,\n            newSignaturesRequired,\n          ]);\n          executeToAddress = contractAddress;\n        }\n        const newHash = await readContracts[contractName].getTransactionHash(\n          customNonce,\n          executeToAddress,\n          parseEther(\"\" + parseFloat(amount).toFixed(12)),\n          callData,\n        );\n\n        const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n\n        const recover = await readContracts[contractName].recover(newHash, signature);\n\n        const isOwner = await readContracts[contractName].isOwner(recover);\n        setIsOwner(isOwner);\n\n        if (isOwner) {\n          const res = await axios.post(poolServerUrl, {\n            chainId: localProvider._network.chainId,\n            address: readContracts[contractName]?.address,\n            nonce: customNonce,\n            to: executeToAddress,\n            amount,\n            data: callData,\n            hash: newHash,\n            signatures: [signature],\n            signers: [recover],\n          });\n\n          if (isIframe) {\n            setLoading(prev => false);\n            setIsTxLoaded(prev => true);\n            setTimeout(() => {\n              let hostURL = window.location.origin;\n              window.open(`${hostURL}/pool`, \"_blank\");\n\n              setIsTxLoaded(prev => false);\n              return;\n            }, 1000);\n          }\n\n          if (isIframe === false) {\n            setTimeout(() => {\n              history.push(\"/pool\");\n              setLoading(false);\n            }, 1000);\n          }\n        } else {\n          console.log(\"ERROR, NOT OWNER.\");\n          setLoading(false);\n        }\n      }\n    } catch (error) {\n      console.log(\"n-Error: \", error);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center flex-col items-center\">\n      <div\n        // style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}\n        className=\"flex justify-center border-2 m-5 rounded-2xl shadow-md\"\n        style={{\n          minWidth: \"24rem\",\n        }}\n      >\n        <div className=\"flex flex-col items-center\" style={{ margin: 8 }}>\n          <div style={{ margin: 8, padding: 8, width: \"10rem\", maxWidth: \"15rem\" }}>\n            <Select value={methodName} style={{ width: \"100%\" }} onChange={setMethodName}>\n              <Option key=\"transferFunds\">Send ETH</Option>\n              <Option key=\"addSigner\">Add Signer</Option>\n              <Option key=\"removeSigner\">Remove Signer</Option>\n              <Option key=\"customCallData\">Custom Call Data</Option>\n              <Option key=\"wcCallData\">\n                {/* <img src=\"walletconnect-logo.svg\" style={{ height: 20, width: 20 }} /> WalletConnect */}\n                WalletConnect\n              </Option>\n              <Option key=\"iframeCallData\">IFrame</Option>\n            </Select>\n          </div>\n          {methodName === \"wcCallData\" ? (\n            <div style={inputStyle}>\n              <WalletConnectInput\n                chainId={localProvider?._network.chainId}\n                address={contractAddress}\n                loadTransactionData={loadTransactionData}\n                mainnetProvider={mainnetProvider}\n                price={price}\n              />\n            </div>\n          ) : methodName === \"iframeCallData\" ? (\n            <IFrame\n              address={contractAddress}\n              loadTransactionData={loadTransactionData}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              isTxLoaded={isTxLoaded}\n            />\n          ) : (\n            <>\n              <div style={inputStyle}>\n                <AddressInput\n                  autoFocus\n                  ensProvider={mainnetProvider}\n                  placeholder={methodName == \"transferFunds\" ? \"Recepient address\" : \"Owner address\"}\n                  value={to}\n                  onChange={setTo}\n                />\n              </div>\n              <div style={inputStyle}>\n                {(methodName == \"addSigner\" || methodName == \"removeSigner\") && (\n                  <InputNumber\n                    style={{ width: \"100%\" }}\n                    placeholder=\"New # of signatures required\"\n                    value={newSignaturesRequired}\n                    onChange={value => {\n                      setNewSignaturesRequired(value);\n                      setHasEdited(true);\n                    }}\n                  />\n                )}\n                {methodName == \"customCallData\" && (\n                  <>\n                    <Input.Group compact>\n                      <Input\n                        style={{ width: \"calc(100% - 31px)\", marginBottom: 20 }}\n                        placeholder=\"Custom call data\"\n                        value={customCallData}\n                        onChange={e => {\n                          setCustomCallData(e.target.value);\n                        }}\n                      />\n                      <Tooltip title=\"Parse transaction data\">\n                        <Button onClick={showModal} icon={<CodeOutlined />} />\n                      </Tooltip>\n                    </Input.Group>\n                    <TransactionDetailsModal\n                      visible={isModalVisible}\n                      txnInfo={parsedCustomCallData}\n                      handleOk={() => setIsModalVisible(false)}\n                      handleCancel={() => setIsModalVisible(false)}\n                      mainnetProvider={mainnetProvider}\n                      price={price}\n                    />\n                  </>\n                )}\n                {(methodName == \"transferFunds\" || methodName == \"customCallData\") && (\n                  <EtherInput\n                  price={price}\n                  mode=\"USD\"\n                  value={amount}\n                  contractAddress={contractAddress}\n                  onChange={setAmount}\n                  provider={localProvider}\n                />\n                )}\n              </div>\n              <InputNumber\n                style={{ width: \"100%\" }}\n                placeholder=\"Leave blank for current nonce\"\n                defaultValue={nonce}\n                onChange={value => {\n                  if (value == null) {\n                    value = nonce;\n                  }\n                  setCustomNonce(value);\n                }}\n              />\n              <Space style={{ marginTop: 32 }}>\n                <Button loading={loading} onClick={createTransaction} type=\"primary\">\n                  Propose\n                </Button>\n              </Space>\n            </>\n          )}\n        </div>\n      </div>\n\n      {isOwner === false && <Alert message=\"you are not the owner ! \" type=\"error\" showIcon />}\n    </div>\n  );\n}\n","import { parseEther } from \"@ethersproject/units\";\nimport { Button, List, Spin, Checkbox } from \"antd\";\nimport { usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport { TransactionListItem, TenderlySimulation } from \"../components\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nconst axios = require(\"axios\");\n\nconst DEBUG = false;\n\nexport default function Transactions({\n  poolServerUrl,\n  contractName,\n  signaturesRequired,\n  address,\n  nonce,\n  userSigner,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  blockExplorer,\n}) {\n  const [transactions, setTransactions] = useState();\n  const [selectedTx, setSelectedTx] = useState(new Map());\n  const { currentTheme } = useThemeSwitcher();\n\n  usePoller(() => {\n    const getTransactions = async () => {\n      const res = await axios.get(\n        poolServerUrl + readContracts[contractName].address + \"_\" + localProvider._network.chainId,\n      );\n\n      console.log(\"backend stuff res\", res.data);\n\n      const newTransactions = [];\n      for (const i in res.data) {\n        console.log(\"backend stuff res.data[i]\", res.data[i]);\n        const thisNonce = ethers.BigNumber.from(res.data[i].nonce);\n        if (thisNonce && nonce && thisNonce.gte(nonce)) {\n          const validSignatures = [];\n          for (const sig in res.data[i].signatures) {\n            const signer = await readContracts[contractName].recover(res.data[i].hash, res.data[i].signatures[sig]);\n            const isOwner = await readContracts[contractName].isOwner(signer);\n            if (signer && isOwner) {\n              validSignatures.push({ signer, signature: res.data[i].signatures[sig] });\n            }\n          }\n\n          res.data[i].nonce = thisNonce;\n\n          const update = { ...res.data[i], validSignatures };\n          newTransactions.push(update);\n        }\n      }\n\n      console.log(\"backend stuff newTransactions\", newTransactions);\n\n      setTransactions(newTransactions);\n    };\n    if (readContracts[contractName]) getTransactions();\n  }, 3777);\n\n  const getSortedSigList = async (allSigs, newHash) => {\n    const sigList = [];\n    for (const sig in allSigs) {\n      const recover = await readContracts[contractName].recover(newHash, allSigs[sig]);\n      sigList.push({ signature: allSigs[sig], signer: recover });\n    }\n\n    sigList.sort((a, b) => {\n      return ethers.BigNumber.from(a.signer).sub(ethers.BigNumber.from(b.signer));\n    });\n\n    const finalSigList = [];\n    const finalSigners = [];\n    const used = {};\n    for (const sig in sigList) {\n      if (!used[sigList[sig].signature]) {\n        finalSigList.push(sigList[sig].signature);\n        finalSigners.push(sigList[sig].signer);\n      }\n      used[sigList[sig].signature] = true;\n    }\n\n    return [finalSigList, finalSigners];\n  };\n\n  if (!signaturesRequired) {\n    return <Spin />;\n  }\n\n  return (\n    <div\n      //  style={{ maxWidth: 850, margin: \"auto\", marginTop: 32, marginBottom: 32 }}\n      className=\"flex flex-col justify-center items-center w-full   \"\n    >\n      <h1\n        className={`p-2 mt-1 w-1/12   ${\n          currentTheme === \"light\" ? \"bg-gray-100 border-2\" : \"border border-gray-300\"\n        } rounded-xl text-md`}\n      >\n        #{nonce ? nonce.toNumber() : <Spin />}\n      </h1>\n      <div className=\"lg:w-screen lg:p-x-52    txListWidth\">\n        <List\n          // bordered\n          dataSource={transactions}\n          renderItem={(item, index) => {\n            const hasSigned = item.signers.indexOf(address) >= 0;\n            const hasEnoughSignatures = item.signatures.length <= signaturesRequired.toNumber();\n\n            return (\n              <div className=\"border-2 rounded-2xl shadow-md mt-4\">\n                <TransactionListItem\n                  item={item}\n                  mainnetProvider={mainnetProvider}\n                  blockExplorer={blockExplorer}\n                  price={price}\n                  readContracts={readContracts}\n                  contractName={contractName}\n                >\n                  <div\n                    // style={{ padding: 16 }}\n                    className={`${\n                      currentTheme === \"light\" ? \"bg-gray-100\" : \"\"\n                    } border-2 rounded-2xl flex justify-center items-center `}\n                  >\n                    <div\n                      // style={{ padding: 4 }}\n                      className=\"w-14 \"\n                    >\n                      {item.signatures.length}/{signaturesRequired.toNumber()} {hasSigned ? \"✅\" : \"\"}\n                    </div>\n                    <div className=\"w-full flex justify-between p-2\">\n                      <Button\n                        type=\"secondary\"\n                        onClick={async () => {\n                          const newHash = await readContracts[contractName].getTransactionHash(\n                            item.nonce,\n                            item.to,\n                            parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                            item.data,\n                          );\n\n                          const signature = await userSigner?.signMessage(ethers.utils.arrayify(newHash));\n                          const recover = await readContracts[contractName].recover(newHash, signature);\n                          const isOwner = await readContracts[contractName].isOwner(recover);\n                          if (isOwner) {\n                            const [finalSigList, finalSigners] = await getSortedSigList(\n                              [...item.signatures, signature],\n                              newHash,\n                            );\n\n                            let obj = selectedTx.get(index) ? selectedTx.get(index) : {};\n\n                            obj.finalSigList = finalSigList;\n                            selectedTx.set(index, obj);\n                            setSelectedTx(selectedTx);\n\n                            const res = await axios.post(poolServerUrl, {\n                              ...item,\n                              signatures: finalSigList,\n                              signers: finalSigners,\n                            });\n                          }\n                        }}\n                      >\n                        Sign\n                      </Button>\n                      <Button\n                        key={item.hash}\n                        type={hasEnoughSignatures ? \"primary\" : \"secondary\"}\n                        onClick={async () => {\n                          console.log(\"EXEC\");\n\n                          const newHash = await readContracts[contractName].getTransactionHash(\n                            item.nonce,\n                            item.to,\n                            parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                            item.data,\n                          );\n\n                          const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n\n                          let finalGaslimit = 250000;\n\n                          try {\n                            // get estimate gas for a execute tx\n                            let estimateGasLimit = await writeContracts[contractName].estimateGas.executeTransaction(\n                              item.to,\n                              parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              item.data,\n                              finalSigList,\n                            );\n                            estimateGasLimit = await estimateGasLimit.toNumber();\n\n                            console.log(\"estimateGasLimit\", estimateGasLimit);\n\n                            // add extra 50k gas\n                            finalGaslimit = estimateGasLimit + 50000;\n                          } catch (e) {\n                            console.log(\"Failed to estimate gas\");\n                          }\n\n                          tx(\n                            writeContracts[contractName].executeTransaction(\n                              item.to,\n                              parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              item.data,\n                              finalSigList,\n                              { gasLimit: finalGaslimit },\n                            ),\n                            async update => {\n                              if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                                try {\n                                  const parsedData =\n                                    item.data !== \"0x\"\n                                      ? readContracts[contractName].interface.parseTransaction(item)\n                                      : null;\n                                  // get all existing owner list\n                                  let ownnersCount = await readContracts[contractName].numberOfOwners();\n                                  /**----------------------\n                                   * update owners on api at add signer\n                                   * ---------------------*/\n                                  if (parsedData && [\"addSigner\", \"removeSigner\"].includes(parsedData.name)) {\n                                    // let finalOwnerList = [parsedData.args.newSigner, ...item.signers];\n                                    let ownerAddress = address;\n                                    let contractAddress = readContracts[contractName].address;\n                                    let owners = [];\n                                    ownnersCount = ownnersCount.toString();\n                                    for (let index = 0; index < +ownnersCount; index++) {\n                                      let owner = await readContracts[contractName].owners(index);\n                                      owners.push(owner);\n                                    }\n                                    let reqData = { owners: owners };\n                                    const res = await axios.post(\n                                      poolServerUrl + `updateOwners/${ownerAddress}/${contractAddress}`,\n                                      reqData,\n                                    );\n                                    console.log(\"update owner response\", res.data);\n                                  }\n                                } catch (error) {\n                                  console.log(`🔴 Error`, error);\n                                }\n                              }\n                            },\n                          );\n                        }}\n                      >\n                        Exec\n                      </Button>\n                      <Checkbox\n                        onChange={async e => {\n                          if (e.target.checked) {\n                            const newHash = await readContracts[contractName].getTransactionHash(\n                              item.nonce,\n                              item.to,\n                              parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              item.data,\n                            );\n\n                            const [finalSigList, finalSigners] = await getSortedSigList(item.signatures, newHash);\n                            selectedTx.set(index, {\n                              to: item.to,\n                              value: parseEther(\"\" + parseFloat(item.amount).toFixed(12)),\n                              data: item.data,\n                              finalSigList: finalSigList,\n                            });\n                            setSelectedTx(selectedTx);\n                          } else {\n                            selectedTx.delete(index);\n                            setSelectedTx(selectedTx);\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <TenderlySimulation\n                    params={item}\n                    address={address}\n                    multiSigWallet={readContracts[\"MultiSigWallet\"]}\n                    signaturesRequired={signaturesRequired}\n                  />\n                </TransactionListItem>\n              </div>\n            );\n          }}\n        />\n        <Button\n          type=\"secondary\"\n          onClick={async () => {\n            var tos = [];\n            var values = [];\n            var data = [];\n            var sigs = [];\n\n            for (let i = 0; i < selectedTx.size; i++) {\n              if (selectedTx.has(i)) {\n                tos.push(selectedTx.get(i).to);\n                values.push(selectedTx.get(i).value);\n                data.push(selectedTx.get(i).data);\n                sigs.push(selectedTx.get(i).finalSigList);\n              }\n            }\n            tx(writeContracts[contractName].executeBatch(tos, values, data, sigs));\n          }}\n        >\n          Exec selected\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Alert, Button, Col, Row } from \"antd\";\nimport { Route, Switch } from \"react-router-dom\";\nimport EmptyWalletAlert from \"./components/MultiSig/EmptyWalletAlert\";\n\nimport \"./App.css\";\nimport { Contract } from \"./components\";\nimport { CreateTransaction, Hints, Home, Subgraph, Transactions } from \"./views\";\n\n/**----------------------\n * TODO:we can create a global context state and fetch all this props on individual components\n * ---------------------*/\n\nconst Routes = ({\n  targetNetwork,\n  contractName,\n  contractAddress,\n  mainnetProvider,\n  localProvider,\n  price,\n  readContracts,\n  userSigner,\n  nonce,\n  signaturesRequired,\n  blockExplorer,\n  // executeTransactionEvents,\n  // ownerEvents,\n  address,\n  yourLocalBalance,\n  tx,\n  writeContracts,\n  contractConfig,\n  userHasMultiSigs,\n  currentMultiSigAddress,\n  DEBUG,\n  setIsCreateModalVisible,\n  BACKEND_URL,\n  mainnetContracts,\n  subgraphUri,\n  reDeployWallet,\n  isFactoryDeployed,\n  // allOwnerEvents,\n  contractNameForEvent,\n}) => {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\">\n          {!userHasMultiSigs ? (\n            <>\n              <EmptyWalletAlert\n                isFactoryDeployed={isFactoryDeployed}\n                setIsCreateModalVisible={setIsCreateModalVisible}\n              />\n            </>\n          ) : (\n            <>\n              <Home\n                key={currentMultiSigAddress}\n                targetNetwork={targetNetwork}\n                address={address}\n                contractAddress={currentMultiSigAddress}\n                localProvider={localProvider}\n                price={price}\n                mainnetProvider={mainnetProvider}\n                blockExplorer={blockExplorer}\n                // executeTransactionEvents={executeTransactionEvents}\n                contractName={contractName}\n                readContracts={readContracts}\n                // ownerEvents={ownerEvents}\n                signaturesRequired={signaturesRequired}\n                // poolServerUrl={BACKEND_URL}\n                reDeployWallet={reDeployWallet}\n                isFactoryDeployed={isFactoryDeployed}\n                currentMultiSigAddress={currentMultiSigAddress}\n                contractNameForEvent={contractNameForEvent}\n              />\n            </>\n          )}\n        </Route>\n        <Route exact path=\"/:walletAddress/:networkName\">\n          <Home\n            key={currentMultiSigAddress}\n            address={address}\n            contractAddress={currentMultiSigAddress}\n            localProvider={localProvider}\n            price={price}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            // executeTransactionEvents={executeTransactionEvents}\n            contractName={contractName}\n            readContracts={readContracts}\n            // ownerEvents={ownerEvents}\n            signaturesRequired={signaturesRequired}\n            // poolServerUrl={BACKEND_URL}\n            reDeployWallet={reDeployWallet}\n            isFactoryDeployed={isFactoryDeployed}\n            currentMultiSigAddress={currentMultiSigAddress}\n            contractNameForEvent={contractNameForEvent}\n          />\n        </Route>\n\n        <Route path=\"/create\">\n          <CreateTransaction\n            poolServerUrl={BACKEND_URL}\n            contractName={contractName}\n            contractAddress={contractAddress}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            price={price}\n            tx={tx}\n            readContracts={readContracts}\n            userSigner={userSigner}\n            DEBUG={DEBUG}\n            nonce={nonce}\n            blockExplorer={blockExplorer}\n            signaturesRequired={signaturesRequired}\n          />\n        </Route>\n        <Route path=\"/pool\">\n          <Transactions\n            poolServerUrl={BACKEND_URL}\n            contractName={contractName}\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            blockExplorer={blockExplorer}\n            nonce={nonce}\n            signaturesRequired={signaturesRequired}\n          />\n        </Route>\n        <Route exact path=\"/debug\">\n          <Contract\n            name={\"MultiSigFactory\"}\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n    </>\n  );\n};\nexport default Routes;\n","import { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { Select } from \"antd\";\n\nimport { NETWORKS, Sleep } from \"../../constants\";\n\nimport { CreateMultiSigModal, ImportMultiSigModal } from \"../index\";\n\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../store/useStore\";\n\nconst { Option } = Select;\n\nconst WalletActions = () => {\n  const selectNetworkOptions = [];\n  for (const id in NETWORKS) {\n    selectNetworkOptions.push(\n      <Select.Option key={id} value={NETWORKS[id].name}>\n        <span style={{ color: NETWORKS[id].color }}>{NETWORKS[id].name}</span>\n      </Select.Option>,\n    );\n  }\n\n  const [state, dispatch] = useStore();\n  const {\n    address,\n    reDeployWallet,\n    price,\n    selectedChainId,\n    mainnetProvider,\n    setReDeployWallet,\n    BACKEND_URL,\n    tx,\n    writeContracts,\n    isCreateModalVisible,\n    setIsCreateModalVisible,\n    getUserWallets,\n    targetNetwork,\n    isFactoryDeployed,\n    multiSigWalletABI,\n    localProvider,\n    userWallets,\n    setSelectedWalletAddress,\n    onChangeNetwork,\n    currentMultiSigAddress,\n    handleMultiSigChange,\n    hideWalletItem,\n    walletParams,\n  } = state;\n\n  const loadWallet = async () => {\n    if (walletParams && walletParams.networkName in NETWORKS) {\n      onChangeNetwork(walletParams.networkName);\n      await Sleep(1000);\n      handleMultiSigChange(walletParams.walletAddress);\n    }\n  };\n\n  useEffect(() => {\n    loadWallet();\n  }, [walletParams]);\n\n  return (\n    <>\n      <div key={address} className=\"flex justify-start items-center p-2 my-2  flex-wrap \">\n        <div>\n          <CreateMultiSigModal\n            key={address}\n            reDeployWallet={reDeployWallet}\n            setReDeployWallet={setReDeployWallet}\n            poolServerUrl={BACKEND_URL}\n            price={price}\n            selectedChainId={selectedChainId}\n            mainnetProvider={mainnetProvider}\n            address={address}\n            tx={tx}\n            writeContracts={writeContracts}\n            contractName={\"MultiSigFactory\"}\n            isCreateModalVisible={isCreateModalVisible}\n            setIsCreateModalVisible={setIsCreateModalVisible}\n            getUserWallets={getUserWallets}\n            currentNetworkName={targetNetwork.name}\n            isFactoryDeployed={isFactoryDeployed}\n          />\n        </div>\n\n        <div className=\"m-2  w-16\">\n          <ImportMultiSigModal\n            mainnetProvider={mainnetProvider}\n            targetNetwork={targetNetwork}\n            networkOptions={selectNetworkOptions}\n            // multiSigs={multiSigs}\n            // setMultiSigs={setMultiSigs}\n            // setCurrentMultiSigAddress={setCurrentMultiSigAddress}\n            multiSigWalletABI={multiSigWalletABI}\n            localProvider={localProvider}\n            // poolServerUrl={BACKEND_URL}\n            userWallets={userWallets}\n            getUserWallets={getUserWallets}\n            isFactoryDeployed={isFactoryDeployed}\n            setSelectedWalletAddress={setSelectedWalletAddress}\n            walletParams={walletParams}\n          />\n        </div>\n        <div className=\"m-2  w-32\">\n          <Select\n            className=\"w-full\"\n            value={currentMultiSigAddress}\n            onChange={handleMultiSigChange}\n            key={userWallets && userWallets.length}\n            disabled={walletParams !== undefined}\n          >\n            {userWallets &&\n              userWallets.length > 0 &&\n              userWallets.map((data, index) => {\n                return (\n                  <Option key={index} value={data.walletAddress}>\n                    <div className=\"flex justify-between items-center\">\n                      <div>{data.walletName}</div>\n                      {walletParams === undefined && (\n                        <>\n                          <MinusCircleOutlined\n                            onClick={e => hideWalletItem(e, data.walletAddress)}\n                            style={{ color: \"red\" }}\n                          />\n                        </>\n                      )}\n                    </div>\n                  </Option>\n                );\n              })}\n          </Select>\n        </div>\n        <div className=\"m-2  w-28 \">\n          {/* {networkSelect} */}\n\n          <Select\n            className=\"w-full text-left\"\n            // defaultValue={targetNetwork.name}\n            value={targetNetwork.name}\n            // style={{ textAlign: \"left\", width: 170 }}\n            onChange={onChangeNetwork}\n          >\n            {selectNetworkOptions}\n          </Select>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default WalletActions;\n","import { Button, Col, Menu, Row, Select } from \"antd\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\n\nimport Routes from \"./Routes\";\nimport StoreProvider from \"./store/StoreProvider\";\nimport WalletActions from \"./components/MultiSig/WalletActions\";\n\n// import CreateMultiSigModal from \"./components/MultiSig/CreateMultiSigModal\";\n\nimport \"antd/dist/antd.css\";\nimport { useOnBlock } from \"eth-hooks\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  CreateMultiSigModal,\n  Faucet,\n  FaucetHint,\n  GasGauge,\n  Header,\n  ImportMultiSigModal,\n  NetworkDisplay,\n  NetworkSwitch,\n  Ramp,\n  ThemeSwitch,\n} from \"./components\";\nimport { ALCHEMY_KEY, NETWORKS, Sleep } from \"./constants\";\n//import multiSigWalletABI from \"./contracts/multi_sig_wallet\";\n// contracts\nimport axios from \"axios\";\nimport MultiSigWalletAbi from \"./configs/MultiSigWallet_ABI.json\";\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\n\nimport { Web3ModalSetup } from \"./helpers\";\nimport { useLocalStorage } from \"./hooks\";\nimport useApp from \"./hooks/useApp\";\nimport { useStore } from \"./store/useStore\";\n\nconst { Option } = Select;\nconst { ethers } = require(\"ethers\");\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.mainnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n// const initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n/**----------------------\n * taking hardcoded multi sig wallet abi from MultiSigWallet_ABI.json file\n * note: if you update MultiSigWallet.sol file then you need to update this file from hardhat artifacts wallet\n * ---------------------*/\nconst multiSigWalletABI = MultiSigWalletAbi[\"abi\"];\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const cachedNetwork = window.localStorage.getItem(\"network\");\n  let targetNetwork = NETWORKS[cachedNetwork || \"mainnet\"];\n\n  /**----------------------\n   * local states\n   * ---------------------*/\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const [userWallets, setUserWallets] = useState(undefined);\n  const [reDeployWallet, setReDeployWallet] = useState(undefined);\n  const [updateServerWallets, setUpdateServerWallets] = useState(false);\n  const location = useLocation();\n  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);\n  const [multiSigs, setMultiSigs] = useState([]);\n  const [currentMultiSigAddress, setCurrentMultiSigAddress] = useState();\n  const [signaturesRequired, setSignaturesRequired] = useState();\n  const [nonce, setNonce] = useState(0);\n  const [contractNameForEvent, setContractNameForEvent] = useState();\n  // const [ownerEvents, setOwnerEvents] = useState();\n  // const [executeTransactionEvents, setExecuteTransactionEvents] = useState();\n\n  const [importedMultiSigs] = useLocalStorage(\"importedMultiSigs\");\n  const [hiddenWallets, setHiddenWallets] = useLocalStorage(\"hiddenWallets\", []);\n  const [multiSigFactoryData, setMultiSigFactoryData] = useLocalStorage(\"multiSigFactoryData\");\n\n  const [mainWalletConnectSession, setMainWalletConnectSession] = useLocalStorage(\"walletConnectSession_main\");\n  const [selectedWalletAddress, setSelectedWalletAddress] = useLocalStorage(\"selectedWalletAddress\");\n\n  /**----------------------\n   * initial configs\n   * ---------------------*/\n\n  // backend transaction handler:\n  let BACKEND_URL = \"http://localhost:49899/\";\n  if (targetNetwork && targetNetwork.name && targetNetwork.name != \"localhost\") {\n    BACKEND_URL = \"https://backend.multisig.lol:49899/\";\n  }\n\n  if (!targetNetwork) targetNetwork = NETWORKS[\"mainnet\"];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  let isFactoryDeployed = deployedContracts[targetNetwork.chainId];\n  const contractName = \"MultiSigWallet\";\n\n  /**----------------------\n   * apps root providers and setup configs\n   * ---------------------*/\n  const {\n    localProvider,\n    mainnetProvider,\n    price,\n    gasPrice,\n    userProviderAndSigner,\n    userSigner,\n    localChainId,\n    selectedChainId,\n    tx,\n    yourLocalBalance,\n    contractConfig,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    contractAddress,\n    // ownersMultiSigEvents,\n    walletCreate2Events,\n    // allExecuteTransactionEvents,\n    // allOwnerEvents,\n    signaturesRequiredContract,\n    nonceContract,\n  } = useApp({\n    targetNetwork,\n    providers,\n    injectedProvider,\n    USE_BURNER_WALLET,\n    address,\n    deployedContracts,\n    DEBUG,\n    currentMultiSigAddress,\n    contractNameForEvent,\n    reDeployWallet,\n    contractName,\n  });\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  /**----------------------\n   * methods\n   * ---------------------*/\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n\n    // ON LOGOUT REMOVING ALL WALLET CONNECT SESSIONS\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"walletConnectSession_wallet\");\n    localStorage.removeItem(\"walletConnectSession_main\");\n    localStorage.removeItem(\"walletConnectUri_wallet\");\n    localStorage.removeItem(\"isConnected_wallet\");\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  const handleMultiSigChange = async value => {\n    setContractNameForEvent(null);\n    setCurrentMultiSigAddress(value);\n    setSelectedWalletAddress(value);\n  };\n\n  async function getAddress() {\n    if (userSigner) {\n      const newAddress = await userSigner.getAddress();\n      setAddress(newAddress);\n    }\n  }\n\n  const updateUserWallets = () => {\n    let multiSigsForUser = userWallets && [...userWallets.map(data => data.walletAddress)];\n\n    const recentMultiSigAddress = multiSigsForUser && multiSigsForUser[multiSigsForUser.length - 1];\n    setCurrentMultiSigAddress(recentMultiSigAddress);\n    // setMultiSigs(multiSigsForUser);\n  };\n\n  const createEthersContractWallet = () => {\n    async function getContractValues() {\n      const latestSignaturesRequired = await readContracts.MultiSigWallet.signaturesRequired();\n      setSignaturesRequired(latestSignaturesRequired);\n\n      const nonce = await readContracts.MultiSigWallet.nonce();\n      setNonce(nonce);\n    }\n\n    let currentMultiSig = userWallets && userWallets.find(data => data.walletAddress === currentMultiSigAddress);\n    let currentMultiSigChainIds = currentMultiSig?.chainIds;\n\n    // on load contracts if current sig on  same chain id\n    if (\n      currentMultiSigAddress &&\n      currentMultiSigChainIds &&\n      currentMultiSigChainIds.map(id => Number(id))?.includes(Number(selectedChainId))\n    ) {\n      readContracts.MultiSigWallet = new ethers.Contract(currentMultiSigAddress, multiSigWalletABI, localProvider);\n      writeContracts.MultiSigWallet = new ethers.Contract(currentMultiSigAddress, multiSigWalletABI, userSigner);\n      setContractNameForEvent(\"MultiSigWallet\");\n      getContractValues();\n      setReDeployWallet(undefined);\n    } else {\n      setReDeployWallet(currentMultiSig);\n    }\n  };\n\n  const syncWalletsWithServer = async () => {\n    // let factoryVersion = await getFactoryVersion();\n    let totalWalletCount = await readContracts[\"MultiSigFactory\"]?.numberOfMultiSigs();\n    totalWalletCount = totalWalletCount ? totalWalletCount.toNumber() : 0;\n\n    if (totalWalletCount !== 0 && totalWalletCount === walletCreate2Events.length && updateServerWallets === false) {\n      // if (userWallets !== undefined && totalWalletCount !== userWallets.length) {\n      let walletsData = walletCreate2Events.map(data => data.args);\n      /**----------------------\n       * iterating over create even data and send it to backend api to update\n       * ---------------------*/\n      for (let index = 0; index < walletsData.length; index++) {\n        let wallet = walletsData[index];\n        let walletName = wallet.name;\n        let walletAddress = wallet.contractAddress;\n        let creator = wallet.creator;\n        let owners = wallet.owners;\n        let signaturesRequired = wallet.signaturesRequired.toNumber();\n        let reqData = {\n          owners,\n          signaturesRequired,\n        };\n        const res = await axios.post(\n          BACKEND_URL + `createWallet/${creator}/${walletName}/${walletAddress}/${selectedChainId}`,\n          reqData,\n        );\n        let data = res.data;\n        // console.log(\"update wallets on api res data: \", data);\n      }\n      setUpdateServerWallets(true);\n      // }\n    }\n  };\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  const getUserWallets = async isUpdate => {\n    if (isFactoryDeployed !== undefined) {\n      let res = await axios.get(BACKEND_URL + `getWallets/${address}`);\n      let data = res.data;\n\n      let localWallets =\n        importedMultiSigs && targetNetwork.name in importedMultiSigs ? [...importedMultiSigs[targetNetwork.name]] : [];\n\n      let allWallets = [...localWallets, ...data[\"userWallets\"]]\n        .flat()\n        .filter(data => hiddenWallets.includes(data.walletAddress) === false);\n\n      // setUserWallets(data[\"userWallets\"]);\n      setUserWallets(allWallets);\n\n      // set and reset  ContractNameForEvent to load the ownerevents\n      setContractNameForEvent(null);\n      setTimeout(() => {\n        setContractNameForEvent(\"MultiSigWallet\");\n      }, 100);\n\n      if (isUpdate) {\n        // const lastMultiSigAddress = data[\"userWallets\"][data[\"userWallets\"].length - 1]?.walletAddress;\n        const lastMultiSigAddress = allWallets[allWallets.length - 1]?.walletAddress;\n        setCurrentMultiSigAddress(lastMultiSigAddress);\n        setContractNameForEvent(null);\n        setIsCreateModalVisible(false);\n\n        setTimeout(() => {\n          setContractNameForEvent(\"MultiSigWallet\");\n        }, 100);\n      }\n    }\n  };\n\n  const onChangeNetwork = async value => {\n    if (targetNetwork.chainId !== NETWORKS[value].chainId) {\n      // window.localStorage.setItem(\"network\", value);\n      // setTimeout(() => {\n      //   window.location.reload();\n      // }, 1);\n      let targetNetwork = NETWORKS[value];\n\n      const ethereum = window.ethereum;\n      const data = [\n        {\n          chainId: \"0x\" + targetNetwork.chainId.toString(16),\n          chainName: targetNetwork.name,\n          nativeCurrency: targetNetwork.nativeCurrency,\n          rpcUrls: [targetNetwork.rpcUrl],\n          blockExplorerUrls: [targetNetwork.blockExplorer],\n        },\n      ];\n      console.log(\"data\", data);\n\n      let switchTx;\n      // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n      try {\n        switchTx = await ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: data[0].chainId }],\n        });\n      } catch (switchError) {\n        // not checking specific error code, because maybe we're not using MetaMask\n        try {\n          switchTx = await ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: data,\n          });\n        } catch (addError) {\n          // handle \"add\" error\n        }\n      }\n\n      window.localStorage.setItem(\"network\", value);\n      // setTimeout(() => {\n      // window.location.reload();\n      // }, 1);\n\n      // if (switchTx) {\n      // }\n    }\n  };\n\n  /**----------------------\n   * useEffect hooks\n   * ---------------------*/\n\n  /**----------------------\n   * load the main wallet connect configs if they are available\n   * ---------------------*/\n\n  useEffect(() => {\n    /**----------------------\n     * load default main WC session if it exists\n     * ---------------------*/\n    // let oldWalletConnect = localStorage.getItem(\"walletconnect\");\n\n    if (mainWalletConnectSession !== undefined) {\n      localStorage.setItem(\"walletconnect\", JSON.stringify(mainWalletConnectSession));\n    }\n    // return () => {\n    // };\n  }, []);\n\n  // -----------------\n  //   page reload on metamask account and network change\n  // -----------------\n  useEffect(() => {\n    window.ethereum?.on(\"accountsChanged\", function () {\n      window.location.reload();\n    });\n    // detect Network account change\n    window.ethereum?.on(\"networkChanged\", function () {\n      // on network chagne logout logic disabled\n      // if (deployedContracts[targetNetwork.chainId] === undefined) {\n      //   console.log(\"NO FACTORY FOUND LOGING OUT !!!\");\n      //   logoutOfWeb3Modal();\n      // } else {\n      //   window.location.reload();\n      // }\n      window.location.reload();\n    });\n  }, []);\n\n  /**----------------------\n   * on factory address change remove imported wallets from localstorage\n   * ---------------------*/\n\n  useEffect(() => {\n    if (deployedContracts[targetNetwork.chainId] && deployedContracts[targetNetwork.chainId][targetNetwork.name]) {\n      let currentFactoryContractAddres =\n        deployedContracts[targetNetwork.chainId][targetNetwork.name][\"contracts\"][\"MultiSigFactory\"].address;\n\n      if (multiSigFactoryData === undefined) {\n        localStorage.removeItem(\"importedMultiSigs\");\n        setMultiSigFactoryData({ ...multiSigFactoryData, [`${targetNetwork.name}`]: currentFactoryContractAddres });\n\n        return;\n      }\n\n      if (multiSigFactoryData !== undefined) {\n        let oldFactoryAddress = multiSigFactoryData[`${targetNetwork.name}`];\n        let isNewFactoryDeployed = currentFactoryContractAddres !== oldFactoryAddress;\n        if (isNewFactoryDeployed) {\n          localStorage.removeItem(\"importedMultiSigs\");\n          setMultiSigFactoryData({ ...multiSigFactoryData, [`${targetNetwork.name}`]: currentFactoryContractAddres });\n        }\n      }\n    }\n  }, [userSigner]);\n\n  /**----------------------\n   * set main account address once provider and signer loads\n   * ---------------------*/\n  useEffect(() => {\n    getAddress();\n  }, [userSigner]);\n\n  /**----------------------\n   * load user sig wallets data from api\n   * ---------------------*/\n\n  useEffect(() => {\n    if (address && userWallets) {\n      updateUserWallets();\n    }\n  }, [userWallets && userWallets.length, address]);\n\n  /**----------------------\n   * set nounce and signatures required\n   * ---------------------*/\n  useEffect(() => {\n    setSignaturesRequired(signaturesRequiredContract);\n    setNonce(nonceContract);\n  }, [signaturesRequiredContract, nonceContract]);\n\n  /**----------------------\n   * load selected wallet contract to read and write\n   * ---------------------*/\n\n  useEffect(() => {\n    if (currentMultiSigAddress) {\n      createEthersContractWallet();\n    }\n  }, [currentMultiSigAddress, readContracts, writeContracts, selectedChainId]);\n\n  /**----------------------\n   * sync wallets with server on load\n   * ---------------------*/\n  useEffect(() => {\n    void syncWalletsWithServer();\n  }, [walletCreate2Events.length, userWallets && userWallets.length]);\n\n  /**----------------------\n   * load web3 modal\n   * ---------------------*/\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  /**----------------------\n   * LOAD THE USER WALLETS DATA\n   * ---------------------*/\n\n  useEffect(() => {\n    if (address !== undefined) {\n      getUserWallets(false);\n    }\n  }, [address, updateServerWallets, hiddenWallets.length]);\n\n  /**----------------------\n   * set current selected sig address from localstorage\n   * ---------------------*/\n\n  useEffect(() => {\n    if (selectedWalletAddress && userWallets && userWallets.length > 0 && address) {\n      setCurrentMultiSigAddress(selectedWalletAddress);\n    }\n  }, [selectedWalletAddress, userWallets, address]);\n\n  /**----------------------\n   * --------- DYANAMIC VALUES\n   * ---------------------*/\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const userHasMultiSigs = currentMultiSigAddress ? true : false;\n\n  const selectNetworkOptions = [];\n  for (const id in NETWORKS) {\n    selectNetworkOptions.push(\n      <Select.Option key={id} value={NETWORKS[id].name}>\n        <span style={{ color: NETWORKS[id].color }}>{NETWORKS[id].name}</span>\n      </Select.Option>,\n    );\n  }\n\n  const networkSelect = (\n    <Select\n      className=\"w-full text-left\"\n      defaultValue={targetNetwork.name}\n      // style={{ textAlign: \"left\", width: 170 }}\n      onChange={onChangeNetwork}\n    >\n      {selectNetworkOptions}\n    </Select>\n  );\n\n  // top header bar\n  const HeaderBar = (\n    <>\n      <Header>\n        <div className=\"relative \" key={address}>\n          <div className=\"flex flex-1 items-center p-1\">\n            {USE_NETWORK_SELECTOR && (\n              // <div style={{ marginRight: 20 }}>\n              <div className=\"mr-20\">\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n              isFactoryDeployed={isFactoryDeployed}\n              gasPrice={gasPrice}\n            />\n          </div>\n          {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n            <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n          )}\n        </div>\n      </Header>\n\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n    </>\n  );\n\n  const hideWalletItem = async (e, walletAddress) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    setHiddenWallets([...hiddenWallets, walletAddress]);\n    // await getUserWallets(false);\n  };\n\n  const MainMenu = (\n    <div className=\"flex justify-center mt-5\" key={address}>\n      <Menu disabled={!userHasMultiSigs} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item\n          key=\"/\"\n          onClick={() => {\n            // to reload wallet contract on homepage\n            createEthersContractWallet();\n          }}\n        >\n          <Link to=\"/\">MultiSig</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/create\" disabled={reDeployWallet !== undefined}>\n          <Link to=\"/create\">Propose Transaction</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/pool\" disabled={reDeployWallet !== undefined}>\n          <Link to=\"/pool\">Pool</Link>\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n\n  const BurnerWallet = (\n    <>\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n\n  const store = {\n    address,\n    reDeployWallet,\n    price,\n    selectedChainId,\n    mainnetProvider,\n    setReDeployWallet,\n    BACKEND_URL,\n    tx,\n    writeContracts,\n    isCreateModalVisible,\n    setIsCreateModalVisible,\n    getUserWallets,\n    targetNetwork,\n    isFactoryDeployed,\n    contractName,\n    networkOptions,\n    multiSigWalletABI,\n    localProvider,\n    userWallets,\n    setSelectedWalletAddress,\n    onChangeNetwork,\n    currentMultiSigAddress,\n    handleMultiSigChange,\n    hideWalletItem,\n  };\n\n  return (\n    <div className=\"App\">\n      <StoreProvider store={{ ...store }}>\n        {HeaderBar}\n        <WalletActions />\n        {MainMenu}\n\n        {/* {Object.keys(writeContracts).length > 0 && Object.keys(readContracts).length > 0 && ( */}\n        <>\n          <Routes\n            // key={currentMultiSigAddress}\n            // allOwnerEvents={allOwnerEvents}\n            BACKEND_URL={BACKEND_URL}\n            DEBUG={DEBUG}\n            targetNetwork={targetNetwork}\n            account={address}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractAddress={contractAddress}\n            contractConfig={contractConfig}\n            contractName={contractName}\n            currentMultiSigAddress={currentMultiSigAddress}\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            // executeTransactionEvents={executeTransactionEvents}\n            gasPrice={gasPrice}\n            localProvider={localProvider}\n            mainnetContracts={mainnetContracts}\n            mainnetProvider={mainnetProvider}\n            nonce={nonce}\n            // ownerEvents={ownerEvents}\n            poolServerUrl={BACKEND_URL}\n            price={price}\n            readContracts={readContracts}\n            setIsCreateModalVisible={setIsCreateModalVisible}\n            signaturesRequired={signaturesRequired}\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            userHasMultiSigs={userHasMultiSigs}\n            userSigner={userSigner}\n            writeContracts={writeContracts}\n            yourLocalBalance={yourLocalBalance}\n            reDeployWallet={reDeployWallet}\n            isFactoryDeployed={isFactoryDeployed}\n            contractNameForEvent={contractNameForEvent}\n          />\n        </>\n        <ThemeSwitch />\n\n        {BurnerWallet}\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { useLocalStorage, useStaticJsonRPC } from \".\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\n\n// import { useEventListener } from \"eth-hooks/events/\";\n\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\n\nimport { Transactor, Web3ModalSetup } from \"../helpers\";\nimport useEventListener from \"./useEventListener\";\n\nexport default function useApp({\n  targetNetwork,\n  providers,\n  injectedProvider,\n  USE_BURNER_WALLET,\n  address,\n  deployedContracts,\n  DEBUG,\n  currentMultiSigAddress,\n  contractNameForEvent,\n  reDeployWallet,\n  contractName,\n}) {\n  // // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n\n  const userSigner = userProviderAndSigner.signer;\n\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // disabled externalContracts as it is taking old factory address or abi\n  // const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n  const contractConfig = { deployedContracts: deployedContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  const contractAddress = readContracts?.MultiSigWallet?.address;\n\n  //📟 Listen for broadcast events\n  // MultiSigFactory Events:\n  // const ownersMultiSigEvents = useEventListener(readContracts, \"MultiSigFactory\", \"Owners\", localProvider, 1);\n  // const walletCreateEvents = useEventListener(readContracts, \"MultiSigFactory\", \"Create\", localProvider, 1);\n  const walletCreate2Events = useEventListener(readContracts, \"MultiSigFactory\", \"Create2Event\", localProvider, 1);\n  // if (DEBUG) console.log(\"📟 ownersMultiSigEvents:\", ownersMultiSigEvents);\n\n  // MultiSigWallet Events:\n  // const allExecuteTransactionEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"ExecuteTransaction\",\n  //   localProvider,\n  //   1,\n  // );\n  // if (DEBUG) console.log(\"📟 executeTransactionEvents:\", allExecuteTransactionEvents);\n\n  // const allOwnerEvents = useEventListener(\n  //   currentMultiSigAddress && reDeployWallet === undefined ? readContracts : null,\n  //   contractNameForEvent,\n  //   \"Owner\",\n  //   localProvider,\n  //   1,\n  // );\n\n  /**----------------------\n   * readers hooks\n   * ---------------------*/\n  const signaturesRequiredContract = useContractReader(\n    reDeployWallet === undefined ? readContracts : null,\n    contractName,\n    \"signaturesRequired\",\n  );\n\n  const nonceContract = useContractReader(reDeployWallet === undefined ? readContracts : null, contractName, \"nonce\");\n\n  return {\n    localProvider,\n    mainnetProvider,\n    price,\n    gasPrice,\n    userProviderAndSigner,\n    userSigner,\n    localChainId,\n    selectedChainId,\n    tx,\n    yourLocalBalance,\n    contractConfig,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    contractAddress,\n    // ownersMultiSigEvents,\n    walletCreate2Events,\n    // allExecuteTransactionEvents,\n    // allOwnerEvents,\n    signaturesRequiredContract,\n    nonceContract,\n  };\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { SafeInjectProvider } from \"./contexts/SafeInjectContext\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <SafeInjectProvider>\n          <App subgraphUri={subgraphUri} />\n        </SafeInjectProvider>\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\n// export const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\nexport const INFURA_ID = \"5ce0898319eb4f5c9d4c982c8f78392a\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: \"https://eth-mainnet.g.alchemy.com/v2/o-vVF_-DyzQ4jc8vyIfpcLnWrNZTdkF1\", //\"https://rpc.scaffoldeth.io:48544\",//`https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  gnosis: {\n    name: \"gnosis\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 4000000000,\n    rpcUrl: \"https://rpc.gnosischain.com\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://opt-mainnet.g.alchemy.com/v2/rSAw45vZLgSbuRcykizMmDj4IO4AVohn`,\n    //rpcUrl: `https://mainnet.optimism.io`,\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 61000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#50a0ea\",\n    price: \"uniswap\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: `https://arb-mainnet.g.alchemy.com/v2/tYM-Tr8c9dHV5a8AgvXnVmS9e-xvoxeM`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  sepolia: {\n    name: \"sepolia\",\n    color: \"#87ff65\",\n    chainId: 11155111,\n    rpcUrl: \"https://rpc.sepolia.org\",\n    faucet: \"https://faucet.sepolia.dev/\",\n    blockExplorer: \"https://sepolia.etherscan.io\",\n  },\n  canto: {\n    name: \"canto\",\n    color: \"#00ff9b\",\n    chainId: 7700,\n    gasPrice: 420000000000,\n    rpcUrl: \"https://canto.slingshot.finance\",\n    faucet: \"https://cantofaucet.com/\",\n    blockExplorer: \"https://evm.explorer.canto.io/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n\nexport const getFactoryVersion = async contract => {\n  try {\n    // get the factory version\n    const factoryVersion = await contract.factoryVersion();\n    return Number(factoryVersion.toString());\n  } catch (error) {\n    // console.log(\"n-error: \", error);\n    // if no factory version variable that mean its version zero\n    console.log(\"its older factory version !!\");\n    return 0;\n  }\n};\nexport const Sleep = time =>\n  new Promise((resolve, reject) =>\n    setTimeout(() => {\n      resolve(true);\n    }, time),\n  );\n"],"sourceRoot":""}